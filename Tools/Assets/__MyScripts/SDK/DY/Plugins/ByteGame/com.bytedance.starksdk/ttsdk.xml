<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ttsdk</name>
    </assembly>
    <members>
        <member name="T:TTSDK.TTSingletonBehaviour`1">
            <summary>
            通用Unity单例
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:TTSDK.IPhoneCallBridge">
            <summary>
            iOS 平台的 call bridge 实现
            </summary>
        </member>
        <member name="T:TTSDK.PayMockService">
            <summary>
            Banner广告的Mock模块
            </summary>
        </member>
        <member name="F:TTSDK.TTAndroidNativeInitInfo.nativeCallJsFlag">
            <summary>
            Android Native 切换调用链路 Flag，开关打开走 JS 基础库
            </summary>
        </member>
        <member name="F:TTSDK.TTAndroidNativeInitInfo.exceptApiList">
            <summary>
            以下 API 例外，当开关 Flag 为 true，但以下 API 依然走老的链路到 Android 端上
            </summary>
        </member>
        <member name="F:TTSDK.TTAndroidNativeInitInfo.unitySDKVersion">
            <summary>
            初始化 Unity native 小游戏调用链路的设置
            </summary>
        </member>
        <member name="T:TTSDK.TuanjieRuntimePlatform">
            <summary>
            团结引擎运行时平台
            </summary>
        </member>
        <member name="F:TTSDK.TuanjieRuntimePlatform.PLATFORM_00000032">
            <summary>
            小游戏
            </summary>
        </member>
        <member name="F:TTSDK.TuanjieRuntimePlatform.PLATFORM_00000033">
            <summary>
            开放鸿蒙
            </summary>
        </member>
        <member name="F:TTSDK.TuanjieRuntimePlatform.PLATFORM_00000034">
            <summary>
            Android HMI
            </summary>
        </member>
        <member name="T:TTSDK.EngineDistribution">
            <summary>
            引擎发行版
            </summary>
        </member>
        <member name="F:TTSDK.EngineDistribution.None">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:TTSDK.EngineDistribution.Unity">
            <summary>
            Unity 引擎
            </summary>
        </member>
        <member name="F:TTSDK.EngineDistribution.Tuanjie">
            <summary>
            团结引擎
            </summary>
        </member>
        <member name="T:TTSDK.TTPlatform">
            <summary>
            平台相关判断工具类
            </summary>
        </member>
        <member name="M:TTSDK.TTPlatform.IsTuanjie">
            <summary>
            是否是团结引擎
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTPlatform.IsWebGL">
            <summary>
            是否是类 WebGL 平台
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTPlatform.IsAndroid">
            <summary>
            是否是类 Android 平台
            </summary>
            <returns></returns>
        </member>
        <member name="T:TTSDK.RecoveryUtils">
            <summary>
            Unity小游戏为容灾恢复准备的存档读写工具类
            和通用存档读写接口 TT.Save TT.LoadSaving 共用同个存储空间。
            通过此工具类写入的存档只会在容灾启动时得到保留，正常启动会清理所有容灾存档。
            </summary>
        </member>
        <member name="M:TTSDK.RecoveryUtils.SaveRecoveryArchive``1(``0,System.String)">
            <summary>
            保存游戏数据接口，所有游戏数据保存上限50M
            </summary>
            <param name="saveName"> 数据名 </param>
            <param name="serializableObject"> 可序列化的数据(存档类需标记为Serializable)[见以下的例子]</param>
            <returns>保存成功返回true，否则返回false</returns>
        </member>
        <member name="M:TTSDK.RecoveryUtils.LoadSavingRecoveryArchive``1(System.String)">
            <summary>
            加载游戏数据接口，返回数据类型需为Serializable
            </summary>
            <example>
            SaveData loaded = TT.LoadSaving&lt;SaveData&gt;();
            </example>
        </member>
        <member name="M:TTSDK.RecoveryUtils.DeleteSavingRecoveryArchive``1(System.String)">
            <summary>
            删除游戏数据接口
            </summary>
            <example>
            TT.DeleteSaving&lt;SaveData&gt;();
            </example>
        </member>
        <member name="M:TTSDK.RecoveryUtils.ClearAllRecoveryArchive">
            <summary>
            删除所有容灾游戏数据，若此次启动并非容灾，则StarkSDK会在初始化完成时自动调用该接口。
            </summary>
        </member>
        <member name="M:TTSDK.RecoveryUtils.GetSaveName(System.String)">
            <summary>
            和其他存档保存区分开，增加特殊前缀，方便后续统一管理
            </summary>
        </member>
        <member name="M:TTSDK.RecoveryUtils.GetFileSystemManager">
            <summary>
            目前只有Webgl需要使用，文件管理器直接用webgl版本
            </summary>
            <returns></returns>
        </member>
        <member name="T:TTSDK.WebGLCallBridge">
            <summary>
            WebGL 平台的 call bridge 实现
            </summary>
        </member>
        <member name="M:TTSDK.DBJsonUtil.SerializeServerDataJson(TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            转换服务端 返回的 json 数据, 主要处理 id 和 date 数据
            </summary>
            <param name="jsonData"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBQueryImpl.Field(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            指定要返回的字段
            Field 示例
            1. 指定返回doc中字段a,b,  projection设置为{a: true, b:true}
            2. 嵌套的字段 {a.b : true}
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:TTSDK.UNBridgeLib.BridgeCallBack">
            <summary>
            回调接口
            </summary>
        </member>
        <member name="P:TTSDK.UNBridgeLib.BridgeCallBack.AddTime">
            <summary>
            回调被添加的事件,ns
            </summary>
        </member>
        <member name="P:TTSDK.UNBridgeLib.BridgeCallBack.TimeoutTime">
            <summary>
            默认Call超时,默认使用通用的超时，10秒
            </summary>
        </member>
        <member name="T:TTSDK.UNBridgeLib.OnSuccessDelegate">
            <summary>
            回调成功
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:TTSDK.UNBridgeLib.OnFailedDelegate">
            <summary>
            回调失败
            </summary>
            <param name="code">失败码</param>
            <param name="failMsg">失败原因</param>
        </member>
        <member name="T:TTSDK.UNBridgeLib.OnTimeoutDelegate">
            <summary>
            超时
            </summary>
        </member>
        <member name="T:TTSDK.UNBridgeLib.FailedDelegate">
            <summary>
            失败回调，https://bytedance.larkoffice.com/docx/PPaodkE5docWC3xqYJuc5IPJnRe 新错误码规范
            </summary>
        </member>
        <member name="T:TTSDK.UNBridgeLib.IosUtils">
            <summary>
            iOS的通信接口
            </summary>
        </member>
        <member name="M:TTSDK.UNBridgeLib.IosUtils.Init">
            <summary>
            确保在主线程执行初始化。
            </summary>
        </member>
        <member name="M:TTSDK.UNBridgeLib.IosUtils.SendEventNative(System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            发送消息到Native
            </summary>
            <param name="target"></param>
            <param name="data"></param>
        </member>
        <member name="M:TTSDK.UNBridgeLib.IosUtils.CallNative(System.Int32,System.String,TTSDK.UNBridgeLib.LitJson.JsonData,System.String)">
            <summary>
             异步Call通讯
             </summary>
            <param name="type">消息类型0-call消息，1-listen消息,2-unlisten消息，3-event消息</param>
            <param name="target">目标接口</param>
            <param name="param">参数</param>
            
            
        </member>
        <member name="M:TTSDK.UNBridgeLib.IosUtils.CallNative(System.String)">
            <summary>
            异步Call通讯，确保调用在主线程执行
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:TTSDK.UNBridgeLib.IosUtils.CallNativeSync(System.Int32,System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
             <summary>
             同步Call通讯
             </summary>
            <param name="type">消息类型0-call消息，1-listen消息,2-unlisten消息，3-event消息</param>
            <param name="target">目标接口</param>
            <param name="param">参数</param>
            
        </member>
        <member name="M:TTSDK.UNBridgeLib.IosUtils.CallNativeSync(System.String)">
            <summary>
            同步Call通讯
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.UNBridgeLib.IosUtils.MixCall(System.String,TTSDK.UNBridgeLib.LitJson.JsonData,System.String)">
            <summary>
            混合Call通讯，调用直接返回一段String的数据，同时会有回调。
            </summary>
            <param name="target">目标API接口</param>
            <param name="param">参数</param>
            <param name="callbackId">回调ID</param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.UNBridgeLib.IosUtils.HasNativeAPI(System.String)">
            <summary>
            查询Native层是否支持某个API
            </summary>
            <param name="apiName">接口名</param>
            <returns></returns>
        </member>
        <member name="T:TTSDK.UNBridgeLib.MsgUtils">
            <summary>
            处理消息
            </summary>
        </member>
        <member name="M:TTSDK.UNBridgeLib.MsgUtils.PacketSuccessBackMsg(TTSDK.UNBridgeLib.BridgeMsg,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            打包成功的回包
            </summary>
            <param name="msg">请求的消息</param>
            <param name="data">回包的数据</param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.UNBridgeLib.MsgUtils.PacketFailedMsg(TTSDK.UNBridgeLib.BridgeMsg,System.Int32,System.String)">
            <summary>
            打包失败的回包
            </summary>
            <param name="msg">请求的消息</param>
            <param name="code">错误码</param>
            <param name="failMsg">错误信息</param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.UNBridgeLib.MsgUtils.PacketCallMsg(System.Int32,System.String,TTSDK.UNBridgeLib.LitJson.JsonData,System.String)">
            <summary>
            打包异步Call消息
            </summary>
            <param name="type">消息类型0-call消息，1-listen消息,2-unListen消息，3-event消息</param>
            <param name="target">目标接口</param>
            <param name="param">参数</param>
            <param name="callbackId">回调的id</param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.UNBridgeLib.MsgUtils.PacketCallSyncMsg(System.Int32,System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            打包同步Call消息
            </summary>
            <param name="type">消息类型0-call消息，1-listen消息,2-unListen消息，3-event消息</param>
            <param name="target">目标接口</param>
            <param name="param">参数</param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.UNBridgeLib.MsgUtils.PacketEventMsg(System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            打包事件的消息
            </summary>
            <param name="target">目标事件</param>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.UNBridgeLib.MsgUtils.ParseMsg(System.String)">
            <summary>
            解析消息
            </summary>
            <param name="json">JSON格式的消息</param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.UNBridgeLib.MsgUtils.ParseResult(System.String)">
            <summary>
            同步调用的结果转换
            </summary>
            <param name="json">JSON字符串</param>
            <returns></returns>
        </member>
        <member name="T:TTSDK.UNBridgeLib.Loom">
            <summary>
            线程调度
            </summary>
        </member>
        <member name="T:TTSDK.UNBridgeLib.AndroidUtils">
            <summary>
            处理Android通讯的工具类
            </summary>
        </member>
        <member name="M:TTSDK.UNBridgeLib.AndroidUtils.Init">
            <summary>
            确保在主线程执行初始化。
            </summary>
        </member>
        <member name="M:TTSDK.UNBridgeLib.AndroidUtils.SendEventNative(System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            发送消息到Native
            </summary>
            <param name="target"></param>
            <param name="data"></param>
        </member>
        <member name="M:TTSDK.UNBridgeLib.AndroidUtils.CallNative(System.Int32,System.String,TTSDK.UNBridgeLib.LitJson.JsonData,System.String)">
            <summary>
             异步Call通讯
             </summary>
            <param name="type">消息类型0-call消息，1-listen消息,2-unlisten消息，3-event消息</param>
            <param name="target">目标接口</param>
            <param name="param">参数</param>
            
            
        </member>
        <member name="M:TTSDK.UNBridgeLib.AndroidUtils.MixCall(System.String,TTSDK.UNBridgeLib.LitJson.JsonData,System.String)">
            <summary>
            混合Call通讯，调用直接返回一段String的数据，同时会有回调。
            </summary>
            <param name="target">目标API接口</param>
            <param name="param">参数</param>
            <param name="callbackId">回调ID</param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.UNBridgeLib.AndroidUtils.CallNative(System.String)">
            <summary>
            异步Call通讯
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:TTSDK.UNBridgeLib.AndroidUtils.CallNativeSync(System.Int32,System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
             <summary>
             同步Call通讯
             </summary>
            <param name="type">消息类型0-call消息，1-listen消息,2-unlisten消息，3-event消息</param>
            <param name="target">目标接口</param>
            <param name="param">参数</param>
            
        </member>
        <member name="M:TTSDK.UNBridgeLib.AndroidUtils.CallNativeSync(System.String)">
            <summary>
            同步Call通讯
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.UNBridgeLib.AndroidUtils.HasNativeAPI(System.String)">
            <summary>
            查询Native层是否支持某个API
            </summary>
            <param name="apiName">接口名</param>
            <returns></returns>
        </member>
        <member name="T:TTSDK.UNBridgeLib.BridgeVersion">
            <summary>
            SDK的版本信息
            </summary>
        </member>
        <member name="F:TTSDK.UNBridgeLib.BridgeVersion.VERSION_CODE">
            <summary>
            SDK版本号
            </summary>
        </member>
        <member name="T:TTSDK.UNBridgeLib.BridgeMsg">
            <summary>
            消息的封装
            </summary>
        </member>
        <member name="P:TTSDK.UNBridgeLib.BridgeMsg.Id">
            <summary>
            消息ID
            </summary>
        </member>
        <member name="P:TTSDK.UNBridgeLib.BridgeMsg.Type">
            <summary>
            消息类型，消息类型0-call消息，1-listen消息,2-unListen消息，3-event消息
            </summary>
        </member>
        <member name="P:TTSDK.UNBridgeLib.BridgeMsg.CallbackId">
            <summary>
            回调，唯一
            </summary>
        </member>
        <member name="P:TTSDK.UNBridgeLib.BridgeMsg.Code">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:TTSDK.UNBridgeLib.BridgeMsg.Source">
            <summary>
            消息来源
            </summary>
        </member>
        <member name="P:TTSDK.UNBridgeLib.BridgeMsg.Target">
            <summary>
            目标接口或者事件
            </summary>
        </member>
        <member name="P:TTSDK.UNBridgeLib.BridgeMsg.FailMsg">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:TTSDK.UNBridgeLib.BridgeMsg.ErrorType">
            <summary>
            错误类型
            </summary>
        </member>
        <member name="P:TTSDK.UNBridgeLib.BridgeMsg.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:TTSDK.UNBridgeLib.BridgeMsg.Param">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:TTSDK.UNBridgeLib.BridgeMsg.UnitySdkVer">
            <summary>
            Unity侧的SDK版本号
            </summary>
        </member>
        <member name="P:TTSDK.UNBridgeLib.BridgeMsg.NativeSdkVer">
            <summary>
            Native侧的SDK版本号
            </summary>
        </member>
        <member name="T:TTSDK.UNBridgeLib.WebGlUtils">
            <summary>
            webgl的通讯接口
            </summary>
        </member>
        <member name="M:TTSDK.UNBridgeLib.WebGlUtils.Init">
            <summary>
            确保在主线程执行初始化。
            </summary>
        </member>
        <member name="M:TTSDK.UNBridgeLib.WebGlUtils.SendEventNative(System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            发送消息到Native
            </summary>
            <param name="target"></param>
            <param name="data"></param>
        </member>
        <member name="M:TTSDK.UNBridgeLib.WebGlUtils.CallNative(System.Int32,System.String,TTSDK.UNBridgeLib.LitJson.JsonData,System.String)">
            <summary>
             异步Call通讯
             </summary>
            <param name="type">消息类型0-call消息，1-listen消息,2-unlisten消息，3-event消息</param>
            <param name="target">目标接口</param>
            <param name="param">参数</param>
            
            
        </member>
        <member name="M:TTSDK.UNBridgeLib.WebGlUtils.CallNative(System.String)">
            <summary>
            异步Call通讯，确保调用在主线程执行
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:TTSDK.UNBridgeLib.WebGlUtils.CallNativeSync(System.Int32,System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
             <summary>
             同步Call通讯
             </summary>
            <param name="type">消息类型0-call消息，1-listen消息,2-unlisten消息，3-event消息</param>
            <param name="target">目标接口</param>
            <param name="param">参数</param>
            
        </member>
        <member name="M:TTSDK.UNBridgeLib.WebGlUtils.CallNativeSync(System.String)">
            <summary>
            同步Call通讯
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.UNBridgeLib.WebGlUtils.NativeHasAPI(System.String)">
            <summary>
            查询h5是否支持某个接口
            </summary>
            <param name="apiName"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.UNBridgeLib.WebGlUtils.MixCall(System.String,TTSDK.UNBridgeLib.LitJson.JsonData,System.String)">
            <summary>
            混合Call通讯，确保调用在主线程执行
            </summary>
            <param name="target">目标API接口</param>
            <param name="param">参数</param>
            <param name="callbackId">回调ID</param>
        </member>
        <member name="T:TTSDK.UNBridgeLib.UNBridgeContext">
            <summary>
            Bridge的上下文
            </summary>
        </member>
        <member name="M:TTSDK.UNBridgeLib.UNBridgeContext.CallBackResult(TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            回调成功
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:TTSDK.UNBridgeLib.UNBridgeContext.CallBackFailed(System.Int32,System.String)">
            <summary>
            回调失败
            </summary>
            <param name="code">错误码</param>
            <param name="failMsg">错误信息</param>
        </member>
        <member name="T:TTSDK.UNBridgeLib.IBridgeAPI">
            <summary>
            Bridge接口
            </summary>
        </member>
        <member name="T:TTSDK.UNBridgeLib.BridgeAPI">
            <summary>
            BridgeAPI的包装类
            </summary>
        </member>
        <member name="T:TTSDK.UNBridgeLib.OnCallBridgeAPI">
            <summary>
            BridgeAPI的委托
            </summary>
            <param name="context"></param>
            <param name="para"></param>
        </member>
        <member name="T:TTSDK.UNBridgeLib.LogUtils">
            <summary>
            日志辅助类
            </summary>
        </member>
        <member name="T:TTSDK.UNBridgeLib.AndroidCallJsUtils">
            <summary>
            AndroidCallJs的通讯接口
            </summary>
        </member>
        <member name="M:TTSDK.UNBridgeLib.AndroidCallJsUtils.Init">
            <summary>
            确保在主线程执行初始化。
            </summary>
        </member>
        <member name="M:TTSDK.UNBridgeLib.AndroidCallJsUtils.SendEventNative(System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            发送消息到Native
            </summary>
            <param name="target"></param>
            <param name="data"></param>
        </member>
        <member name="M:TTSDK.UNBridgeLib.AndroidCallJsUtils.CallNative(System.Int32,System.String,TTSDK.UNBridgeLib.LitJson.JsonData,System.String)">
            <summary>
             异步Call通讯
             </summary>
            <param name="type">消息类型0-call消息，1-listen消息,2-unlisten消息，3-event消息</param>
            <param name="target">目标接口</param>
            <param name="param">参数</param>
            
            
        </member>
        <member name="M:TTSDK.UNBridgeLib.AndroidCallJsUtils.CallNative(System.String)">
            <summary>
            异步Call通讯，确保调用在主线程执行
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:TTSDK.UNBridgeLib.AndroidCallJsUtils.CallNativeSync(System.Int32,System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
             <summary>
             同步Call通讯
             </summary>
            <param name="type">消息类型0-call消息，1-listen消息,2-unlisten消息，3-event消息</param>
            <param name="target">目标接口</param>
            <param name="param">参数</param>
            
        </member>
        <member name="M:TTSDK.UNBridgeLib.AndroidCallJsUtils.CallNativeSync(System.String)">
            <summary>
            同步Call通讯
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.UNBridgeLib.AndroidCallJsUtils.NativeHasAPI(System.String)">
            <summary>
            查询h5是否支持某个接口
            </summary>
            <param name="apiName"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.UNBridgeLib.AndroidCallJsUtils.MixCall(System.String,TTSDK.UNBridgeLib.LitJson.JsonData,System.String)">
            <summary>
            混合Call通讯，确保调用在主线程执行
            </summary>
            <param name="target">目标API接口</param>
            <param name="param">参数</param>
            <param name="callbackId">回调ID</param>
        </member>
        <member name="T:TTSDK.UNBridgeLib.DataUtils">
            <summary>
             从JsonData中安全的读取数据的帮助类
            </summary>
        </member>
        <member name="M:TTSDK.UNBridgeLib.DataUtils.GetInt(TTSDK.UNBridgeLib.LitJson.JsonData,System.String)">
            <summary>
            读取int
            </summary>
            <param name="data"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.UNBridgeLib.DataUtils.GetString(TTSDK.UNBridgeLib.LitJson.JsonData,System.String)">
            <summary>
            读取string
            </summary>
            <param name="data"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.UNBridgeLib.DataUtils.GetData(TTSDK.UNBridgeLib.LitJson.JsonData,System.String)">
            <summary>
            读取JsonData
            </summary>
            <param name="data"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.UNBridgeLib.DataUtils.GetObject(TTSDK.UNBridgeLib.LitJson.JsonData,System.String)">
            <summary>
            读取Object
            </summary>
            <param name="map"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:TTSDK.UNBridgeLib.BridgeCore">
            <summary>
            UBridge的内部实现
            </summary>
        </member>
        <member name="F:TTSDK.UNBridgeLib.BridgeCore.TIMEOUT_TIME">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="F:TTSDK.UNBridgeLib.BridgeCore.SUCCESS">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:TTSDK.UNBridgeLib.BridgeCore.ERROR_UNSUPPORT">
            <summary>
            接口未支持
            </summary>
        </member>
        <member name="F:TTSDK.UNBridgeLib.BridgeCore.ERROR_NOT_SUPPORT_SYNC">
            <summary>
            接口不支持异步调用
            </summary>
        </member>
        <member name="F:TTSDK.UNBridgeLib.BridgeCore.ERROR_LACK_PARAM">
            <summary>
            缺少参数
            </summary>
        </member>
        <member name="F:TTSDK.UNBridgeLib.BridgeCore.ERROR_NOT_SUPPORT_ASYN">
            <summary>
            接口不支持同步调用
            </summary>
        </member>
        <member name="F:TTSDK.UNBridgeLib.BridgeCore.CallbackMap">
            <summary>
            以callback_id为key维护回调。
            </summary>
        </member>
        <member name="F:TTSDK.UNBridgeLib.BridgeCore.EventMap">
            <summary>
            以接口名为key，维护回调
            </summary>
        </member>
        <member name="F:TTSDK.UNBridgeLib.BridgeCore.ApiMap">
            <summary>
             Unity侧以接口的形式实现的API,比委托优先
            </summary>
        </member>
        <member name="F:TTSDK.UNBridgeLib.BridgeCore.BridgeDelegateMap">
            <summary>
            Unity侧以委托的形式实现的API
            </summary>
        </member>
        <member name="F:TTSDK.UNBridgeLib.BridgeCore.LocalEventList">
            <summary>
            本地注册的事件列表
            </summary>
        </member>
        <member name="F:TTSDK.UNBridgeLib.BridgeCore.RemoteEventList">
            <summary>
            Native端注册的事件列表
            </summary>
        </member>
        <member name="F:TTSDK.UNBridgeLib.BridgeCore.Timer">
            <summary>
            超时定时器
            </summary>
        </member>
        <member name="F:TTSDK.UNBridgeLib.BridgeCore.IsTimerStarted">
            <summary>
            定时器是否已经启动，避免重复启动；
            </summary>
        </member>
        <member name="F:TTSDK.UNBridgeLib.BridgeCore.MaxTimeoutTime">
            <summary>
            超时时间，默认10秒
            </summary>
        </member>
        <member name="M:TTSDK.UNBridgeLib.BridgeCore.StartTimer">
            <summary>
            启动超时定时器
            </summary>
        </member>
        <member name="M:TTSDK.UNBridgeLib.BridgeCore.StopTimer">
            <summary>
            停止超时定时器
            </summary>
        </member>
        <member name="M:TTSDK.UNBridgeLib.BridgeCore.setCallBackTimeout(System.Int64)">
            <summary>
            重新设置Call的超时时间
            </summary>
            <param name="time">单位ms</param>
        </member>
        <member name="M:TTSDK.UNBridgeLib.BridgeCore.RegisterAPI(System.String,TTSDK.UNBridgeLib.IBridgeAPI)">
            <summary>
            Unity注册接口形式的API接口
            </summary>
            <param name="name">接口名</param>
            <param name="api">接口实现</param>
        </member>
        <member name="M:TTSDK.UNBridgeLib.BridgeCore.RegisterAPI(System.String,TTSDK.UNBridgeLib.BridgeAPI)">
            <summary>
            Unity注册委托形式的API
            </summary>
            <param name="name">接口名</param>
            <param name="api">接口实现</param>
        </member>
        <member name="M:TTSDK.UNBridgeLib.BridgeCore.UnRegisterAPI(System.String)">
            <summary>
            Unity注销接口形式的API接口
            </summary>
            <param name="name">接口名</param>
        </member>
        <member name="M:TTSDK.UNBridgeLib.BridgeCore.RegisterEvent(System.String)">
            <summary>
            Unity注册事件
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:TTSDK.UNBridgeLib.BridgeCore.SendEvent(System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
             Unity发送事件消息
            </summary>
            <param name="target">目标事件</param>
            <param name="data">数据</param>
        </member>
        <member name="M:TTSDK.UNBridgeLib.BridgeCore.Call(System.String,TTSDK.UNBridgeLib.LitJson.JsonData,TTSDK.UNBridgeLib.BridgeCallBack)">
            <summary>
            异步调用native的方法
            </summary>
            <param name="target">目标接口</param>
            <param name="param">参数数据</param>
            <param name="callBack">回调</param>
            
        </member>
        <member name="M:TTSDK.UNBridgeLib.BridgeCore.Call(System.String,TTSDK.UNBridgeLib.LitJson.JsonData,TTSDK.UNBridgeLib.BridgeCallBack,System.Int64)">
            <summary>
            异步调用native的方法
            </summary>
            <param name="target">目标接口</param>
            <param name="param">参数数据</param>
            <param name="callBack">回调</param>
            
        </member>
        <member name="M:TTSDK.UNBridgeLib.BridgeCore.Listen(System.String,System.Boolean,TTSDK.UNBridgeLib.BridgeCallBack)">
            <summary>
            监听事件
            </summary>
            <param name="target">目标接口</param>
            <param name="overOld">新的监听是否覆盖旧的</param>
            <param name="callBack">回调</param> 
            
        </member>
        <member name="M:TTSDK.UNBridgeLib.BridgeCore.UnListen(System.String)">
            <summary>
            关闭监听事件
            </summary>
            
            <param name="target">目标接口</param>
            
        </member>
        <member name="M:TTSDK.UNBridgeLib.BridgeCore.HandleMsgFromNative(System.String)">
            <summary>
            处理Native调用过来的消息
            </summary>
            <param name="json">消息数据，JSON格式</param>
        </member>
        <member name="M:TTSDK.UNBridgeLib.BridgeCore.HandleNativeCall(TTSDK.UNBridgeLib.BridgeMsg)">
            <summary>
            处理Native的调用消息。
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:TTSDK.UNBridgeLib.BridgeCore.HandleNativeCallBack(TTSDK.UNBridgeLib.BridgeMsg)">
            <summary>
            处理Unity调用Native回来的回包。
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:TTSDK.TTInputImpl">
            <summary>
            输入模块
            </summary>
        </member>
        <member name="F:TTSDK.TTInputImpl._touchHandlers">
            <summary>
            触摸事件回调
            </summary>
        </member>
        <member name="F:TTSDK.TTInputImpl._isJSTouchEventListening">
            <summary>
            是否注册了 JS 层的 Touch 事件
            只有注册后，上层才能收到监听
            </summary>
        </member>
        <member name="M:TTSDK.TTInputImpl.SetHandlersDirty">
            <summary>
            设定触摸事件监听有变更
            </summary>
        </member>
        <member name="M:TTSDK.TTInputImpl.StartTouchEventsListening">
            <summary>
            开始监听 JS 层触摸事件
            </summary>
        </member>
        <member name="M:TTSDK.TTInputImpl.StopTouchEventsListening">
            <summary>
            停止监听 JS 层触摸事件
            </summary>
        </member>
        <member name="M:TTSDK.TTInputImpl.InvokeTouchEvent(System.String,TTSDK.TTTouchEvent)">
            <summary>
            分发 JS 层触摸事件到注册的 Handler
            </summary>
            <param name="name"></param>
            <param name="touchEvent"></param>
        </member>
        <member name="T:TTSDK.TTInputImpl.TouchEventHandler">
            监听 JS 层触摸事件
        </member>
        <member name="M:TTSDK.TTInputImpl.TouchEventHandler.Create(System.String,System.Action{System.String,TTSDK.TTTouchEvent})">
            <summary>
            创建事件 Handler 实例
            </summary>
            <param name="name"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTInputImpl.TouchEventHandler.OnCall(TTSDK.UNBridgeLib.UNBridgeContext,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            响应 UNBridge 回调
            </summary>
            <param name="context"></param>
            <param name="jsonData"></param>
        </member>
        <member name="T:TTSDK.LoginState">
            <summary>
            当前的登录状态
            </summary>
        </member>
        <member name="T:TTSDK.TTUserInfo">
            <summary>
            登录后获取登录的用户信息
            </summary>
        </member>
        <member name="T:TTSDK.AuthorizeScope">
            <summary>
            https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/open-capacity/user-information/authorization/authorization/
            </summary>
        </member>
        <member name="F:TTSDK.AuthorizeScope.UserInfo">
            <summary>
            是否授权用户信息
            对应接口：tt.getUserInfo
            </summary>
        </member>
        <member name="F:TTSDK.AuthorizeScope.UserLocation">
            <summary>
            是否授权地理位置
            对应接口：tt.getLocation
            </summary>
        </member>
        <member name="F:TTSDK.AuthorizeScope.Record">
            <summary>
            是否授权录音功能
            对应接口：tt.getRecorderManager.start
            </summary>
        </member>
        <member name="F:TTSDK.AuthorizeScope.Album">
            <summary>
            是否授权保存到相册
            对应接口：tt.saveImageToPhotosAlbum, tt.saveVideoToPhotosAlbum
            </summary>
        </member>
        <member name="F:TTSDK.AuthorizeScope.Camera">
            <summary>
            是否授权摄像头
            对应接口：tt.scanCode, tt.chooseImage, tt.chooseVideo
            </summary>
        </member>
        <member name="F:TTSDK.AuthorizeScope.ScreenRecord">
            <summary>
            是否授权录屏，默认为开。在 onError 里面报错到没有录屏权限时，可以尝试主动调用
            对应接口：tt.getGameRecorderManager
            </summary>
        </member>
        <member name="F:TTSDK.AuthorizeScope.Calendar">
            <summary>
            是否授权添加日历事件
            对应接口：tt.addPhoneCalendar
            </summary>
        </member>
        <member name="T:TTSDK.AuthSetting">
             <summary>
             用户权限授权结果
            
             代码示例 1：检查用户是否已授权指定权限：
             ```
               if (AuthSetting.UserInfo)
               {
                    Debug.Log($"用户已授权 UserInfo 权限。");
               }
               else
               {
                    Debug.Log($"用户未授权过或已拒绝 UserInfo 权限。");
               }
             ```
             
             代码示例 2：检查用户已授权、拒绝或未授权过指定权限：
             ```
               var scope = AuthorizeScope.UserInfo;
               if (AuthSetting.TryGetValue(scope, out var authorized))
               {
                   if (authorized)
                   {
                       Debug.Log($"用户已授权 {scope} 权限。");
                   }
                   else
                   {
                       Debug.Log($"用户已拒绝 {scope} 权限。");
                   }
               }
               else
               {
                    Debug.Log($"用户未授权过 {scope} 权限。");
               }
             ```
             </summary>
        </member>
        <member name="P:TTSDK.AuthSetting.UserInfo">
            <summary>
            是否授权用户信息
            对应接口：tt.getUserInfo
            </summary>
        </member>
        <member name="P:TTSDK.AuthSetting.UserLocation">
            <summary>
            是否授权地理位置
            对应接口：tt.getLocation
            </summary>
        </member>
        <member name="P:TTSDK.AuthSetting.Record">
            <summary>
            是否授权录音功能
            对应接口：tt.getRecorderManager.start
            </summary>
        </member>
        <member name="P:TTSDK.AuthSetting.Album">
            <summary>
            是否授权保存到相册
            对应接口：tt.saveImageToPhotosAlbum tt.saveVideoToPhotosAlbum
            </summary>
        </member>
        <member name="P:TTSDK.AuthSetting.Camera">
            <summary>
            是否授权摄像头
            对应接口：tt.scanCode tt.chooseImage tt.chooseVideo
            </summary>
        </member>
        <member name="P:TTSDK.AuthSetting.ScreenRecord">
            <summary>
            是否授权录屏，默认为开。在 onError 里面报错到没有录屏权限时，可以尝试主动调用
            对应接口：tt.getGameRecorderManager
            </summary>
        </member>
        <member name="P:TTSDK.AuthSetting.Calendar">
            <summary>
            是否授权添加日历事件
            对应接口：tt.addPhoneCalendar
            </summary>
        </member>
        <member name="T:TTSDK.DouyinPermissionScopeStatus">
            <summary>
            需获取的抖音权限在授权弹窗中的默认状态
            </summary>
        </member>
        <member name="F:TTSDK.DouyinPermissionScopeStatus.Required">
            <summary>
            必选项（用户无法取消）
            </summary>
        </member>
        <member name="F:TTSDK.DouyinPermissionScopeStatus.OptionalSelected">
            <summary>
            非必选，默认选中
            </summary>
        </member>
        <member name="F:TTSDK.DouyinPermissionScopeStatus.OptionalUnselected">
            <summary>
            非必选，默认不选中
            </summary>
        </member>
        <member name="T:TTSDK.TTAccount">
            <summary>
            账号系统
            </summary>
        </member>
        <member name="T:TTSDK.TTAccount.OnLoginSuccessCallback">
            <summary>
            登录成功
            </summary>
            <param name="code">临时登录凭证, 有效期 3 分钟。可以通过在服务器端调用 登录凭证校验接口 换取 openid 和 session_key 等信息。</param>
            <param name="anonymousCode">用于标识当前设备, 无论登录与否都会返回, 有效期 3 分钟</param>
            <param name="isLogin">判断在当前 APP(头条、抖音等)是否处于登录状态</param>
        </member>
        <member name="T:TTSDK.TTAccount.OnLoginFailedCallback">
            <summary>
            登录失败
            <param name="errMsg">错误消息</param>
            </summary>
        </member>
        <member name="T:TTSDK.TTAccount.OnCheckSessionFailedCallback">
            <summary>
            检查Session接口调用失败的回调函数
            </summary>
            <param name="errMsg">错误原因</param>
        </member>
        <member name="T:TTSDK.TTAccount.OnCheckSessionSuccessCallback">
            <summary>
            接口调用成功的回调函数
            </summary>
        </member>
        <member name="T:TTSDK.TTAccount.OnGetUserInfoFailedCallback">
            <summary>
            获取用户信息失败的回调
            </summary>
            <param name="errMsg">失败信息</param>
        </member>
        <member name="T:TTSDK.TTAccount.OnGetUserInfoSuccessCallback">
            <summary>
            获取用户信息成功的回调
            </summary>
            <param name="UserInfo">目标用户信息</param>
        </member>
        <member name="T:TTSDK.TTAccount.OnRealNameAuthentication">
            <summary>
            用户实名认证成功的回调
            </summary>
        </member>
        <member name="T:TTSDK.TTAccount.OnGetUserInfoAuthSuccess">
            <summary>
            判断当前用户是否已经授权给游戏读取自身的信息
            </summary>
            <param name="auth">是否授权</param>
        </member>
        <member name="T:TTSDK.TTAccount.OnGetUserInfoAuthFail">
            <summary>
            调用接口判断当前用户是否已经授权时失败或者发生内部错误
            </summary>
            <param name="errMsg"></param>
        </member>
        <member name="T:TTSDK.TTAccount.OnGetSettingSuccess">
            <summary>
            获取用户已经授权过的配置时，接口调用成功的回调函数。
            </summary>
            <param name="auth">授权结果</param>
        </member>
        <member name="T:TTSDK.TTAccount.OnGetSettingFail">
            <summary>
            获取用户已经授权过的配置时，接口调用失败的回调函数。
            </summary>
            <param name="errMsg"></param>
        </member>
        <member name="T:TTSDK.TTAccount.OnOpenSettingSuccess">
            <summary>
            打开设置页面，返回用户设置过的授权结果时，接口调用成功的回调函数。
            </summary>
            <param name="auth">授权结果</param>
        </member>
        <member name="T:TTSDK.TTAccount.OnOpenSettingFail">
            <summary>
            打开设置页面，返回用户设置过的授权结果时，接口调用失败的回调函数。
            </summary>
            <param name="errMsg"></param>
        </member>
        <member name="T:TTSDK.TTAccount.OnAuthenticateRealNameSuccessCallback">
            <summary>
            实名认证窗口拉起成功回调
            </summary>
            <param name="errMsg"></param>
        </member>
        <member name="T:TTSDK.TTAccount.OnAuthenticateRealNameFailedCallback">
            <summary>
            实名认证窗口拉起失败回调
            <param name="errMsg">"access:fail " + 详细错误信息</param>
            </summary>
        </member>
        <member name="T:TTSDK.TTAccount.OnShowDouyinOpenAuthSuccessCallback">
            <summary>
            展示抖音权限授权弹窗成功回调
            <param name="errMsg">回调信息</param>
            <param name="ticket">请求授权返回的票据，此处对标开放平台的 authCode</param>
            <param name="grantPermissions">用户授权的权限</param>
            </summary>
        </member>
        <member name="T:TTSDK.TTAccount.OnShowDouyinOpenAuthFailedCallback">
            <summary>
            展示抖音权限授权弹窗失败回调
            <param name="errNo">错误码</param>
            <param name="errMsg">错误信息</param>
            </summary>
        </member>
        <member name="M:TTSDK.TTAccount.Login(TTSDK.TTAccount.OnLoginSuccessCallback,TTSDK.TTAccount.OnLoginFailedCallback,System.Boolean)">
            <summary>
            登录-获取临时登录凭证
            强制登录默认为true，即若当前未登录宿主，则会调起宿主的登录窗口, 如果用户点击取消则会调用 fail
            如果当前登录宿主，则直接返回success，获取到 code 和 anonymousCode
            若强制登录为false，当前登录了宿主则会返回success，可以获取到获取到 code 和 anonymousCode
            当前未登录宿主，则只有 anonymousCode
            code 可以换取 openid, openid 是用户的唯一标识
            anonymousCode 可以换取 anonymous_openid, 同一台手机 anonymous_openid 是相同的
            </summary>
            <param name="forceLogin">未登录时, 是否强制调起登录框</param>
            <param name="successCallback">登录成功的回调</param>
            <param name="failedCallback">登陆失败的回调</param>
        </member>
        <member name="M:TTSDK.TTAccount.CheckSession(TTSDK.TTAccount.OnCheckSessionSuccessCallback,TTSDK.TTAccount.OnCheckSessionFailedCallback)">
            <summary>
            检查用户当前的 session 状态是否有效
            只有成功调用 login 才会生成 session，checkSession 才会进入 success 回调，当用户退出登录会清除 session
            session_key 会随着login接口的调用被刷新。可以通过checkSession方法验证当前 session 是否有效，从而避免频繁登录。
            目前实际测试若使用匿名登录（forceLogin = false），则checkSession会一直返回 fail
            只有登录了宿主（forceLogin = true），checkSession才会返回success，下次不用login checkSession也可以返回true
            </summary>
            <param name="successCallback">验证有效的回调</param>
            <param name="failedCallback">验证无效或者验证失败的回调</param>
        </member>
        <member name="M:TTSDK.TTAccount.GetUserInfo(TTSDK.TTAccount.OnGetUserInfoSuccessCallback,TTSDK.TTAccount.OnGetUserInfoFailedCallback)">
            <summary>
            获取已登录用户的基本信息或特殊信息
            若匿名登录后 userinfo里面字段全部为默认值
            登录了宿主后可以获取账号数据，下次不用login GetUserInfo 也可以返回正确数据
            </summary>
            <param name="successCallback">获取用户信息成功的回调</param>
            <param name="failedCallback">获取用户信息失败的回调</param>
        </member>
        <member name="M:TTSDK.TTAccount.GetUserInfoAuth(TTSDK.TTAccount.OnGetUserInfoAuthSuccess,TTSDK.TTAccount.OnGetUserInfoAuthFail)">
            <summary>
            判断用户是否已经授权给当前游戏读取个人信息
            该API会调用宿主的代码，如果调用宿主代码成功则会调用onGetUserInfoAuth，并返回是否已经授权
            如果调用宿主代码失败则会调用onGetUserInfoAuthFail
            </summary>
            <param name="onGetUserInfoAuth">调用宿主代码成功，并返回是否已经授权读取用户信息</param>
            <param name="onGetUserInfoAuthFail">调用宿主代码时发生错误</param>
        </member>
        <member name="M:TTSDK.TTAccount.OpenSettingsPanel(TTSDK.TTAccount.OnGetUserInfoAuthSuccess,TTSDK.TTAccount.OnGetUserInfoAuthFail)">
            <summary>
            主动打开获取用户信息的授权界面，在Setting界面关闭后返回最新的授权状态，该方法没有超时时间
            该API会调用宿主的代码，如果调用宿主代码成功则会调用onGetUserInfoAuth，并返回最新的授权状态
            如果调用宿主代码失败则会调用onGetUserInfoAuthFail
            </summary>
        </member>
        <member name="M:TTSDK.TTAccount.GetSetting(TTSDK.TTAccount.OnGetSettingSuccess,TTSDK.TTAccount.OnGetSettingFail)">
            <summary>
            获取用户已经授权过的配置。
            结果中只会包含向用户请求过的权限。
            与 OpenSetting 的区别是 GetSetting 只会获取配置，而不会打开配置页面。
            </summary>
            <param name="onGetSettingSuccess">接口调用成功的回调函数</param>
            <param name="onGetSettingFail">接口调用失败的回调函数</param>
        </member>
        <member name="M:TTSDK.TTAccount.OpenSetting(TTSDK.TTAccount.OnOpenSettingSuccess,TTSDK.TTAccount.OnOpenSettingFail)">
            <summary>
            打开设置页面，返回用户设置过的授权结果。
            结果中只会包含用户请求过的权限。
            与 GetSetting 的区别是，OpenSetting 会打开设置页面，而 GetSetting 只会返回用户授权的设置信息。
            <param name="onOpenSettingSuccess">接口调用成功的回调函数</param>
            <param name="onOpenSettingFail">接口调用失败的回调函数</param>
            </summary>
        </member>
        <member name="M:TTSDK.TTAccount.SetRealNameAuthenticationCallback(TTSDK.TTAccount.OnRealNameAuthentication)">
            <summary>
            用户在实名认证弹窗完成实名认证后回调
            需要在初始化时设置，回调时机为：游戏中弹出实名认证，用户完成了实名认证时触发
            </summary>
        </member>
        <member name="M:TTSDK.TTAccount.GetUserInfo(System.Boolean,TTSDK.TTAccount.OnGetUserInfoSuccessCallback,TTSDK.TTAccount.OnGetUserInfoFailedCallback)">
            <summary>
            获取已登录用户的基本信息或特殊信息
            若匿名登录后 userinfo里面字段全部为默认值
            登录了宿主后可以获取账号数据，下次不用login GetUserInfo 也可以返回正确数据
            </summary>
            <param name="withCredentials">是否获取加密信息以及 CloudId</param>
            <param name="successCallback">验证有效的回调</param>
            <param name="failedCallback">验证无效或者验证失败的回调</param>
            
        </member>
        <member name="M:TTSDK.TTAccount.GetUserInfo(System.Boolean,System.Boolean,TTSDK.TTAccount.OnGetUserInfoSuccessCallback,TTSDK.TTAccount.OnGetUserInfoFailedCallback)">
            <summary>
            获取已登录用户的基本信息或特殊信息
            若匿名登录后 userinfo里面字段全部为默认值
            登录了宿主后可以获取账号数据，下次不用login GetScUserInfo也可以返回正确数据
            </summary>
            <param name="withCredentials">是否获取加密信息以及 CloudId</param>
            <param name="withRealNameAuthenticationInfo">是否需要返回用户实名认证状态，如果是则在成功回调参数中额外返回 `realNameAuthenticationStatus` 字段 </param>
            <param name="successCallback">验证有效的回调</param>
            <param name="failedCallback">验证无效或者验证失败的回调</param>
            
        </member>
        <member name="M:TTSDK.TTAccount.AuthenticateRealName(TTSDK.TTAccount.OnAuthenticateRealNameSuccessCallback,TTSDK.TTAccount.OnAuthenticateRealNameFailedCallback)">
            <summary>
            拉起实名认证窗口。
            注意：调用该接口前请确保用户已登录。
            </summary>
            <param name="successCallback">实名认证窗口拉起成功回调</param>
            <param name="failedCallback">实名认证窗口拉起失败回调</param>
        </member>
        <member name="M:TTSDK.TTAccount.ShowDouyinOpenAuth(System.Collections.Generic.Dictionary{System.String,TTSDK.DouyinPermissionScopeStatus},TTSDK.TTAccount.OnShowDouyinOpenAuthSuccessCallback,TTSDK.TTAccount.OnShowDouyinOpenAuthFailedCallback)">
            <summary>
            提供小游戏获取抖音权限的能力，展示出抖音权限授权弹窗。
            在使用在接口前，需要小游戏拥有者登录抖音开发平台申请开通小游戏需要的权限。
            </summary>
            <param name="scopes">需要获取权限的信息，其中 key 值是申请权限的 scope，value 值必须是 0，1，2（此处申请的权限在抖音开放平台必须是已开通状态） </param>
            <param name="successCallback">展示抖音权限授权弹窗成功回调</param>
            <param name="failedCallback">展示抖音权限授权弹窗失败回调</param>
        </member>
        <member name="M:TTSDK.TTSideBar.CheckScene(TTSDK.TTSideBar.SceneEnum,System.Action{System.Boolean},System.Action,System.Action{System.Int32,System.String})">
            <summary>
            确认当前宿主版本是否支持跳转某个小游戏入口场景。
            </summary>
            <param name="scene">需要确认的入口场景（目前仅支持的入参为'sidebar'）</param>
            <param name="success">接口调用成功的回调函数, bool为true说明支持，false表示不支持</param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
            <param name="error">接口调用失败的回调函数</param>
        </member>
        <member name="M:TTSDK.TTSideBar.NavigateToScene(TTSDK.TTSideBar.SceneEnum,System.Action,System.Action,System.Action{System.Int32,System.String})">
            <summary>
            调用该API可以跳转到某个小游戏入口场景。
            </summary>
            <param name="scene">需要确认的入口场景（目前仅支持的入参为'sidebar'）</param>
            <param name="success">接口调用成功的回调函数, bool为true说明支持，false表示不支持</param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
            <param name="error">接口调用失败的回调函数</param>
        </member>
        <member name="M:TTSDK.TTSideBar.NavigateToSceneV2(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action,System.Action,System.Action{System.Int32,System.String})">
            <summary>
            调用该API可以跳转到某个小游戏入口场景。支持福利信息透传
            </summary>
            <param name="data">参数例子{"scene":"sidebar","activityId":"7368350593716338729"}</param>
            <param name="success">接口调用成功的回调函数, bool为true说明支持，false表示不支持</param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
            <param name="error">接口调用失败的回调函数</param>
        </member>
        <member name="M:TTSDK.TTSideBar.RequestPromotionActivity(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData},System.Action,System.Action{System.Int32,System.String})">
            <summary>
            注册用户参与复访营销活动。当前只支持侧边栏复访活动
            </summary>
            <param name="data">指定用户参与的营销活动id，通过OpenAPI申请得到。未填写时，会由平台选择可用活动,可选，例如{"activityId":"111111"}</param>
            <param name="success">接口调用成功的回调函数, </param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
            <param name="error">接口调用失败的回调函数</param>
        </member>
        <member name="M:TTSDK.TTSideBar.ReceiveCoupon(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData},System.Action,System.Action{System.Int32,System.String})">
            <summary>
            领取营销活动中完成任务后的奖励。当前只支持侧边栏复访活动
            </summary>
            <param name="data">用户参与的营销活动id，通过OpenAPI申请得到。未填写时，会由平台选择可发放的奖励，可选，例如{"activityId":"7368350593716338729"}</param>
            <param name="success">接口调用成功的回调函数, </param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
            <param name="error">接口调用失败的回调函数</param>
        </member>
        <member name="T:TTSDK.TTShare">
            <summary>
            分享模块
            </summary>
        </member>
        <member name="T:TTSDK.TTShare.OnShareSuccessCallback">
            <summary>
            分享成功
            </summary>
        </member>
        <member name="T:TTSDK.TTShare.OnShareFailedCallback">
            <summary>
            分享失败
            <param name="errMsg">错误消息</param>
            </summary>
        </member>
        <member name="T:TTSDK.TTShare.OnShareCancelledCallback">
            <summary>
            分享取消
            </summary>
        </member>
        <member name="M:TTSDK.TTShare.ShareAppMessage(TTSDK.TTShare.OnShareSuccessCallback,TTSDK.TTShare.OnShareFailedCallback,TTSDK.TTShare.OnShareCancelledCallback,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            通用分享
            </summary>
            <param name="successCallback">分享成功回调</param>
            <param name="failedCallback">分享失败回调</param>
            <param name="cancelledCallback">分享取消回调</param>
            <param name="shareJson">可填的字段信息参考：https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/retweet/tt-share-app-message/ </param>
        </member>
        <member name="M:TTSDK.TTShare.OnShareAppMessage(TTSDK.TTShare.OnshareAppMessageCallback)">
            <summary>
            监听用户点击右上角菜单中的“转发”，"拍抖音"按钮时触发的事件 https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/retweet/tt-on-share-app-message
            需要返回一个ShareParam 对象，用于分享  https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/retweet/share-param
            </summary>
            <param name="callback"> callback 接收一个 object 类型的参数，属性为：string: channel</param>
        </member>
        <member name="M:TTSDK.TTShare.OffShareAppMessage(TTSDK.TTShare.OnshareAppMessageCallback)">
            <summary>
            取消监听用户点击右上角菜单的“转发”按钮时触发的事件。 https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/retweet/tt-off-share-app-message
            </summary>
        </member>
        <member name="M:TTSDK.TTShare.ShareMessageToFriend(TTSDK.UNBridgeLib.LitJson.JsonData,TTSDK.TTShare.OnShareSuccessCallback,TTSDK.TTShare.OnShareFailedCallback,TTSDK.TTShare.OnShareCancelledCallback)">
            <summary>
            通用分享
            </summary>
            <param name="options">可填的字段信息参考：https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/retweet/tt-share-message-to-friend/
             openId     string  是   发送对象的 openId
             templateId string  是   分享素材模板 id，指定通过平台审核的 templateId 来选择分享内容，需在平台设置且通过审核
             query      string  否   查询字符串，必须是 key1=val1&amp;key2=val2 的格式。从这条转发消息进入后，可通过 tt.getLaunchOptionsSync 或 tt.onShow 获取启动参数中的 query用来实现信息透传
            </param>
            <param name="successCallback">分享成功回调</param>
            <param name="failedCallback">分享失败回调</param>
            <param name="cancelledCallback">分享取消回调</param>
        </member>
        <member name="T:TTSDK.TTShare.OnShowShareMenuSuccessCallback">
            <summary>
            ShowShareMenu 接口调用成功回调
            </summary>
        </member>
        <member name="T:TTSDK.TTShare.OnShowShareMenuFailCallback">
            <summary>
            ShowShareMenu 接口调用失败回调
            </summary>
        </member>
        <member name="T:TTSDK.TTShare.OnShowShareMenuCompleteCallback">
            <summary>
            ShowShareMenu 接口调用结束回调（调用成功、失败都会执行）
            </summary>
        </member>
        <member name="M:TTSDK.TTShare.ShowShareMenu(TTSDK.TTShare.OnShowShareMenuSuccessCallback,TTSDK.TTShare.OnShowShareMenuFailCallback,TTSDK.TTShare.OnShowShareMenuCompleteCallback)">
            <summary>
            设置小游戏转发按钮为显示状态。
            转发按钮位于小游戏页面右上角的“更多”中。
            详细信息：https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/retweet/tt-show-share-menu
            </summary>
            <param name="successCallback">接口调用成功的回调函数</param>
            <param name="failCallback">接口调用失败的回调函数</param>
            <param name="completeCallback">接口调用结束的回调函数</param>
        </member>
        <member name="T:TTSDK.TTShare.OnHideShareMenuSuccessCallback">
            <summary>
            HideShareMenu 接口调用成功回调
            </summary>
        </member>
        <member name="T:TTSDK.TTShare.OnHideShareMenuFailCallback">
            <summary>
            HideShareMenu 接口调用失败回调
            </summary>
        </member>
        <member name="T:TTSDK.TTShare.OnHideShareMenuCompleteCallback">
            <summary>
            HideShareMenu 接口调用结束回调（调用成功、失败都会执行）
            </summary>
        </member>
        <member name="M:TTSDK.TTShare.HideShareMenu(TTSDK.TTShare.OnHideShareMenuSuccessCallback,TTSDK.TTShare.OnHideShareMenuFailCallback,TTSDK.TTShare.OnHideShareMenuCompleteCallback)">
            <summary>
            设置小游戏转发按钮为隐藏状态。
            转发按钮位于小游戏页面右上角的“更多”中。
            详细信息：https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/retweet/tt-hide-share-menu
            </summary>
            <param name="successCallback">接口调用成功的回调函数</param>
            <param name="failCallback">接口调用失败的回调函数</param>
            <param name="completeCallback">接口调用结束的回调函数</param>
        </member>
        <member name="F:TTSDK.OperateLogType.Config">
            <summary>
            初始化
            </summary>
        </member>
        <member name="F:TTSDK.OperateLogType.Send">
            <summary>
            发送日志
            </summary>
        </member>
        <member name="F:TTSDK.Method.Debug">
            <summary>
            Debug方法
            </summary>
        </member>
        <member name="F:TTSDK.Method.Info">
            <summary>
            Info方法
            </summary>
        </member>
        <member name="F:TTSDK.Method.Log">
            <summary>
            Log方法
            </summary>
        </member>
        <member name="F:TTSDK.Method.Warn">
            <summary>
            Warn方法
            </summary>
        </member>
        <member name="F:TTSDK.Method.Error">
            <summary>
            Error方法
            </summary>
        </member>
        <member name="T:TTSDK.TTFeedbackLogManagerImpl.FeedbackLogBridge">
            <summary>
            代理BridgeCall，把调用的方法，写入日志中
            </summary>
        </member>
        <member name="M:TTSDK.TTClipboard.SetClipboardData(System.String,System.Action{System.Boolean,System.String})">
            <summary>
            设置剪切板信息
            </summary>
            <param name="data">设置的内容</param>
            <param name="action">bool = true设置成功，反则关注错误信息</param>
        </member>
        <member name="M:TTSDK.TTClipboard.GetClipboardData(System.Action{System.Boolean,System.String})">
            <summary>
            获取剪切板信息
            </summary>
            <param name="action">bool = true获取成功，value为内容，反则关注错误信息</param>
        </member>
        <member name="T:TTSDK.Mock.Ad.MockAdView">
            <summary>
            假的 Mock 广告表现，用于模拟三种广告的展示
            </summary>
        </member>
        <member name="M:TTSDK.Mock.Ad.MockAdView.WaitClose">
            <summary>
            等待广告关闭，激励广告区分是否已观看结束
            </summary>
        </member>
        <member name="M:TTSDK.HttpUtility.htmlEncode(System.String,System.Boolean)">
            <summary>
            Converts the specified string to an HTML-encoded string.
            </summary>
            <remarks>
              <para>
              This method starts encoding with a NCR from the character code 160
              but does not stop at the character code 255.
              </para>
              <para>
              One reason is the unicode characters &#65308; and &#65310; that
              look like &lt; and &gt;.
              </para>
            </remarks>
            <returns>
            A <see cref="T:System.String"/> that represents an encoded string.
            </returns>
            <param name="s">
            A <see cref="T:System.String"/> to encode.
            </param>
            <param name="minimal">
            A <see cref="T:System.Boolean"/>: <c>true</c> if encodes without a NCR;
            otherwise, <c>false</c>.
            </param>
        </member>
        <member name="M:TTSDK.HttpUtility.initEntities">
            <summary>
            Initializes the _entities field.
            </summary>
            <remarks>
            This method builds a dictionary of HTML character entity references.
            This dictionary comes from the HTML 4.01 W3C recommendation.
            </remarks>
        </member>
        <member name="M:TTSDK.AndroidCache.CheckAndSetMaxStorageSpace">
            <summary>
            Make sure the UnityCache folder disk occupation is under the limit
            Will be checked consquently since the Addressable or the developer might overwrite it.
            </summary> 
        </member>
        <member name="T:TTSDK.AndroidUIManager">
            <summary>
            Android UI管理器
            调用Android原生UI界面
            </summary>
        </member>
        <member name="M:TTSDK.AndroidUIManager.ShowToast(System.String)">
            <summary>
            Android Toast提示
            类似于直接调用Toast.makeText(context, message, Toast.LENGTH_SHORT).show()
            </summary>
            <param name="message">提示信息</param>
        </member>
        <member name="M:TTSDK.AndroidUIManager.ShowToastLong(System.String)">
            <summary>
            Android Toast提示
            类似于直接调用Toast.makeText(context, message, Toast.LENGTH_LONG).show()
            </summary>
            <param name="message">提示信息</param>
        </member>
        <member name="M:TTSDK.AndroidUIManager.ShowDialogPopup(System.String,System.String,System.String,System.String,System.Boolean,System.Action,System.Action)">
            <summary>
            Android 弹出式对话框
            </summary>
            <param name="title">标题</param>
            <param name="message">内容</param>
            <param name="positiveBtnText">确认按钮文本</param>
            <param name="negativeBtnText">取消按钮文本</param>
            <param name="cancelable">对话框是否取消（点击空白区域关闭界面）</param>
            <param name="onPositiveClickCallback">点击确认按钮回调</param>
            <param name="onNegativeClickCallback">点击取消按钮回调</param>
        </member>
        <member name="M:TTSDK.AndroidUIManager.ShowProgressPopup(System.String,System.Boolean,System.Action)">
            <summary>
            Android 进度加载弹窗
            </summary>
            <param name="message">提示信息</param>
            <param name="cancelable">Loading弹窗是否取消（点击空白区域关闭界面）</param>
            <param name="onDismissCallback">Loading弹窗关闭回调</param>
        </member>
        <member name="M:TTSDK.AndroidUIManager.HideProgressPopup">
            <summary>
            隐藏进度加载弹窗
            </summary>
        </member>
        <member name="M:TTSDK.AndroidUIManager.SyncHideProgressPopup">
            <summary>
            以同步的隐藏一个弹框
            </summary>
        </member>
        <member name="M:TTSDK.TTNavigateGameImpl.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:TTSDK.TTNavigateGameImpl.GetLastNavigateMsg(TTSDK.TTNavigateGame.OnNavigateGameReturn)">
            <summary>
            获取上一次的拉起信息
            </summary>
            <param name="onNavigateGameReturn"></param>
        </member>
        <member name="M:TTSDK.TTNavigateGameImpl.IsNavigateFromOtherGame(System.String@,System.String@)">
            <summary>
            判断自己本身是否被其他游戏拉起
            </summary>
            <param name="appId"></param>
            <param name="extraData"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTNavigateGameImpl.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:TTSDK.TTNavigateGameImpl.NavigateToGame(TTSDK.NavigateGameInfo,TTSDK.TTNavigateGame.OnNavigateGameReturn,System.String)">
            <summary>
            跳转至某个游戏
            </summary>
            <param name="appId"></param>
            <param name="onNavigateGameReturn"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTNavigateGameImpl.SaveNavigateMsg">
            <summary>
            保存导航信息
            </summary>
        </member>
        <member name="M:TTSDK.TTNavigateGameImpl.InvokeNavigateGameReturnEvent(System.String,System.Int32,System.String)">
            <summary>
            调用从互调返回时的回调函数
            </summary>
            <param name="appId">游戏id</param>
            <param name="time">游玩时间</param>
            <param name="data">额外数据</param>
        </member>
        <member name="M:TTSDK.TTNavigateGameImpl.GetRecommendNavigateItems">
            <summary>
            从服务器拉取互跳信息
            </summary>
        </member>
        <member name="M:TTSDK.TTNavigateGameImpl.SetNavigateGameInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.String,System.String,TTSDK.NavigateGameType)">
            <summary>
            保存一个互跳信息
            </summary>
            <param name="appid">游戏id</param>
            <param name="query">自定义的query值</param>
            <param name="extraData">额外数据</param>
            <param name="url">视频链接</param>
            <param name="navigateGameType">这条互跳信息的来源</param>
        </member>
        <member name="M:TTSDK.TTNavigateGameImpl.SetNavigateMsg(System.String)">
            <summary>
            保存自定义信息，用于传递给上一个拉起自己的游戏
            </summary>
            <param name="cpCustomizeMsg"></param>
        </member>
        <member name="M:TTSDK.TTNavigateGameImpl.SetOnLaunchFromOtherGameCallback(TTSDK.TTNavigateGame.OnLaunchFromOtherGame)">
            <summary>
            监听自己本身是否被其他游戏拉起
            </summary>
            <param name="onLaunchFromOtherGame"></param>
        </member>
        <member name="T:TTSDK.DicExtension">
            <summary>
            Dic的扩展方法
            </summary>
        </member>
        <member name="T:TTSDK.OnGameResumeEvent">
            <summary>
            当游戏Activity#OnResume的方法被调用时调用该C#方法
            </summary>
        </member>
        <member name="T:TTSDK.HostEnum">
            <summary>
            宿主枚举
            </summary>
        </member>
        <member name="T:TTSDK.LaunchFromEnum">
            <summary>
            入口枚举
            </summary>
        </member>
        <member name="F:TTSDK.LaunchFromEnum.IDE">
            <summary>
            IDE扫码
            </summary>
        </member>
        <member name="T:TTSDK.ContainerRuntime">
            <summary>
            Container 的运行环境
            </summary>
        </member>
        <member name="T:TTSDK.VersionType">
            <summary>
            Apk的版本环境
            </summary>
        </member>
        <member name="T:TTSDK.ContainerEnv">
            <summary>
            保存宿主环境变量
            </summary>
        </member>
        <member name="M:TTSDK.ContainerEnv.GetQueryFromScheme">
            <summary>
            获取query字段，即小程序的启动参数，可能为空，使用时需判空
            </summary>
        </member>
        <member name="M:TTSDK.ContainerEnv.GetLocation">
            <summary>
            启动场景（该字段目前只有在「侧边栏」启动场景才会返回，返回的属性值为：homepage）
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.ContainerEnv.GetLaunchFrom">
            <summary>
            启动场景（该字段目前只有在「侧边栏」启动场景才会返回，返回的属性值为：homepage）
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.ContainerEnv.GetLaunchOptionsSync">
            <summary>
            获取小程序启动时的参数，里面的参数可能为空，使用时需判空; 可以在TTSDK.init()之后调用，确保得到非空值
            </summary>
        </member>
        <member name="T:TTSDK.OnAccelerometerChanged">
            <summary>
            加速器数据回调
            </summary>
        </member>
        <member name="T:TTSDK.ITTAPI">
            <summary>
            接入头条抖音能力的接口，在非宿主环境下，会对一些回调进行模拟
            如果调用的函数在宿主版本不被支持，则会抛出异常
            </summary>
        </member>
        <member name="P:TTSDK.ITTAPI.SDKVersion">
            <summary>
            SDK版本号
            </summary>
        </member>
        <member name="P:TTSDK.ITTAPI.GameVersion">
            <summary>
            游戏版本号，通过该接口替换Application.version获得正确的版本号信息
            </summary>
        </member>
        <member name="P:TTSDK.ITTAPI.GamePublishVersion">
            <summary>
            游戏发布版本号，发布版本时发布工具中指定的版本号
            </summary>
        </member>
        <member name="M:TTSDK.ITTAPI.GetTTGameRecorder">
            <summary>
            获取录屏相关接口
            </summary>
            <returns>TTGameRecorder</returns>
        </member>
        <member name="M:TTSDK.ITTAPI.Authorize(System.String,System.Action{System.String,TTSDK.UNBridgeLib.LitJson.JsonData},System.Action{System.String,System.String})">
            <summary>
            提前向用户发出授权请求。该方法不会调用对应接口，只会弹框咨询用户是否授权或者获取用户信息。如果用户之前有授权，该接口直接返回成功，不会跟用户产生交互。
            </summary>
            <param name="scope">需要预授权的 scope，详见 https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/open-capacity/user-information/authorization/authorization/</param>
            <param name="success">接口调用成功的回调函数</param>
            <param name="fail">接口调用失败的回调函数 </param>
        </member>
        <member name="M:TTSDK.ITTAPI.GetRTCEngineManager">
            <summary>
            需要白名单
            获取 RtcEngine 实例（包含音视频应用程序调用的主要方法的接口类实例），应当只调用一次。第二次调用getRtcEngine 时，实际获取的还是上次那个
            </summary>
            <returns>RTCEngineManager</returns>
        </member>
        <member name="M:TTSDK.ITTAPI.GetTTAdManager">
            <summary>
            广告相关接口
            </summary>
            <returns>TTAdManager</returns>
        </member>
        <member name="M:TTSDK.ITTAPI.GetTTRequest">
            <summary>
            网络请求接口
            </summary>
            <returns>TTRequest</returns>
        </member>
        <member name="M:TTSDK.ITTAPI.GetTTSDKLog">
            <summary>
            控制sdk中的Log级别
            </summary>
        </member>
        <member name="M:TTSDK.ITTAPI.GetLaunchOptionsSync">
            <summary>
            获取小程序启动时的参数，里面的参数可能为空，使用时需判空; 可以在TTSDK.init()之后调用，确保得到非空值
            </summary>
        </member>
        <member name="M:TTSDK.ITTAPI.GetAccountManager">
            <summary>
            账号模块
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.ITTAPI.FollowDouYinUserProfile(System.Action,System.Action{System.Int32,System.String},System.Boolean)">
            <summary>
            关注抖音号
            需要在开发者平台-设置中绑定抖音号
            </summary>
            <param name="followCallback">完成打开抖音号的回调。涉及用户信息，无法获取用户是否关注了抖音号的状态</param>
            <param name="errCallback">打开抖音号失败的回调。errCode:
            <param name="showToastTipsIfFailed"> 当关注抖音号失败，是否显示Toast弹窗提示，默认显示 </param>
            CODE_ERROR = -1
            CODE_NOT_SUPPORT = -2
            CODE_NOT_LOGIN = -3
            CODE_NO_ACTIVITY = -4
            CODE_UID_ERROR = -5
            </param>
        </member>
        <member name="M:TTSDK.ITTAPI.CreateShortcut(System.Action{System.Boolean},System.Boolean)">
            <summary>
            创建快捷方式
            </summary>
            <param name="csCallback"> 创建快捷方式回调，参数为是否成功，true表示成功，false表示失败 </param>
            <param name="showToastTipsIfFailed"> 当创建失败，是否显示Toast弹窗提示，默认显示 </param>
        </member>
        <member name="M:TTSDK.ITTAPI.IsShortcutExist(System.Action{System.Boolean})">
            <summary>
            快捷方式是否已经创建
            </summary>
            <param name="isExistCallback"> 是否存在的回调，参数表示是否已创建，true表示已创建，false表示未创建 </param>
        </member>
        <member name="M:TTSDK.ITTAPI.Vibrate(System.Int64[],System.Int32)">
            <summary>
            可以配置震动周期的手机震动接口，单位ms
            </summary>
            <param name="pattern"> 震动周期 like long[] pattern = {0, 100, 1000, 300}; 传入null则取消震动  </param>
            <param name="repeat"> 重复次数，为-1则不重复  </param>
            <remarks>
            注意：WebGL平台下，只有两种震动：长和短。
                 pattern数组参数只能传入一个数值，传入小于1000则为短震动，否则为长震动。
                 不支持取消和重复。即repeat参数无效。
            </remarks>>
        </member>
        <member name="M:TTSDK.ITTAPI.GetTTShare">
            <summary>
            获取分享相关接口
            </summary>
        </member>
        <member name="M:TTSDK.ITTAPI.IsFollowDouyin(System.Action{System.Boolean})">
            <summary>
            是否已关注抖音号
            </summary>
            <param name="callback"> 是否关注的回调，参数表示是否已关注，true表示已关注，false表示未关注 </param>
        </member>
        <member name="M:TTSDK.ITTAPI.HasBoundDouyin(System.Action{System.Boolean})">
            <summary>
            是否在小程序开发者后台绑定了抖音号
            </summary>
            <param name="callback"> 是否绑定的回调，参数表示是否已绑定，true表示已绑定，false表示未绑定 </param>
        </member>
        <member name="M:TTSDK.ITTAPI.GetTTFavorite">
            <summary>
            获取收藏引导接口
            </summary>
        </member>
        <member name="M:TTSDK.ITTAPI.RegisterCommandEvent(System.Action{System.String,System.Collections.Generic.IList{System.String}})">
            <summary>
            接入sdk的debugpanel面板，注册一些debug命令的回调函数
            </summary>
        </member>
        <member name="M:TTSDK.ITTAPI.GetTTPayService">
            <summary>
            支付服务接口
            </summary>
        </member>
        <member name="M:TTSDK.ITTAPI.ReportAnalytics``1(System.String,System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            自定义分析数据上报接口，调用后，会将数据上报到小程序开发者平台，开发者可以在小程序开发者平台中查看上报数据。使用前，需要在小程序管理后台事件中新建事件，配置好事件名与字段。
            可参考文档 https://microapp.bytedance.com/docs/zh-CN/mini-app/data/advanced-analysis/events
            </summary>
            <param name="eventName"> 事件名 </param>
            <param name="param"> 上报的数据，默认为null key	: 配置中的字段名.  value(number|string|boolean) : 上报的数据</param>
        </member>
        <member name="M:TTSDK.ITTAPI.Save``1(``0,System.String)">
            <summary>
            保存游戏数据接口，所有游戏数据保存上限50M
            </summary>
            <param name="saveName"> 数据名 </param>
            <param name="serializableObject"> 可序列化的数据(存档类需标记为Serializable)[见以下的例子]</param>
            <returns>保存成功返回true，否则返回false</returns>
            <example>
            <code>
            [Serializable]
            class SaveData
            {
               public int IntValue = 99;
               private float FloatValue = 1.0f;
               public string StrValue = "My String";
               public Dictionary&lt;String,bool&gt; map;
               public List&lt;String&gt; listStr;
            }
            SaveData sd = new SaveData();
            sd.xx = yyy;
            bool ret = TTSDKInner.API.Save&lt;SaveData&gt;(sd);
            </code>
            </example>
        </member>
        <member name="M:TTSDK.ITTAPI.LoadSaving``1(System.String)">
             <summary>
             加载游戏数据接口，返回数据类型需为Serializable
             </summary>
             <param name="saveName"> 数据名 </param>
            
             <example>
             SaveData loaded = TTSDKInner.API.LoadSaving&lt;SaveData&gt;();
             </example>
        </member>
        <member name="M:TTSDK.ITTAPI.DeleteSaving``1(System.String)">
            <summary>
            删除游戏数据接口
            </summary>
            <param name="saveName"> 数据名 </param>
            
            <example>
            TTSDKInner.API.DeleteSaving&lt;SaveData&gt;();
            </example>
        </member>
        <member name="M:TTSDK.ITTAPI.ClearAllSavings">
            <summary>
            删除所有游戏数据
            </summary>
        </member>
        <member name="M:TTSDK.ITTAPI.GetSavingDiskSize">
            <summary>
            获取游戏数据磁盘总大小
            </summary>
            <param name="saveName"> 数据名 </param>
        </member>
        <member name="M:TTSDK.ITTAPI.GetNavigateGameModule">
            <summary>
            获取游戏跳转模块
            </summary>
        </member>
        <member name="M:TTSDK.ITTAPI.OpenCustomerServicePage(System.Action{System.Boolean})">
            <summary>
            打开客服聊天页
            </summary>
            <param name="csCallback"> 打开客服聊天页回调，参数为是否成功，true表示成功，false表示失败 </param>
        </member>
        <member name="M:TTSDK.ITTAPI.OpenCustomerServiceConversation(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{System.Boolean})">
            <summary>
            是平台提供的小游戏客服能力
            </summary>
            <param name="param">type:(1 ：小 6 客服 2 :  抖音IM 客服（仅支持抖音）)sessionFrom:(保留字段，暂时可以不填),例如{"type":1,"sessionFrom":"xxx"}</param>
            <param name="callback">打开客服页面成功或者失败回调</param>
        </member>
        <member name="M:TTSDK.ITTAPI.OpenAwemeCustomerService(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action,System.Action{System.Int32,System.String})">
            <summary>
            通过客服页面发起支付
            接口说明：https://bytedance.feishu.cn/docx/doxcnUkE86LjFTFdTJREIEGT9bb
            </summary>
            <param name="options"> JsonData内容如下 
            buyQuantity     number  必填（道具直购场景除外）金币购买数量，金币数量必须满足：金币数量*金币单价 = 限定价格等级（详见下方 buyQuantity 限制说明。开发者可以在字节小游戏平台的“支付”tab 设置游戏币单价）
            customId        string  必填   游戏开发者自定义的唯一订单号，订单支付成功后通过服务端支付结果回调回传
            currencyType    string  非必填 币种, 目前仅为"CNY"
            zoneId	        string  非必填 游戏服务区 id，默认值为1，开发者自定义。游戏不分大区则默认填写"1"。如果应用支持多角色，则角色 ID 接在分区 ID 后，用"_"连接
            extraInfo	    string  非必填 游戏开发者自定义的其他信息，订单支付成功后通过服务端支付结果回调回传。字符串长度最大不能超过 256。（强烈建议传入）
            goodType        number  非必填（道具直购场景必填） 默认游戏币。 游戏币：0 | 1，道具直购：2。若goodType为道具直购场景，不可传buyQuantity
            orderAmount     number  非必填（道具直购场景必填） 道具价格，人民币，单位分
            goodName        string  非必填 道具名称
            </param>
            <param name="success"> 打开客服页成功 </param>
            <param name="failed"> 打开客服聊天页回调，参数为是否成功，true表示成功，false表示失败 </param>
        </member>
        <member name="M:TTSDK.ITTAPI.NavigateToVideoView(System.String,System.Action{System.Boolean})">
            <summary>
            跳转到抖音视频
            </summary>
            <param name="videoId"> 抖音视频videoId，复制抖音视频链接到浏览器即可得到 </param>
            <param name="jumpCallback"> 跳转结果，参数为是否成功，true表示成功，false表示失败 </param>
        </member>
        <member name="M:TTSDK.ITTAPI.ExitApp(System.Boolean,System.Action{System.Boolean})">
            <summary>
            退出程序
            </summary>
            <param name="showDialog">是否显示退出提示对话框，true为在退出前显示二次提示对话框架，false则不显示对话框而直接退出程序</param>
            <param name="callback">接口调用成功状态回调，true表示成功，false表示失败</param>
        </member>
        <member name="M:TTSDK.ITTAPI.RestartMiniProgramSync">
            <summary>
            重启小游戏
            </summary>
            <param name="failCallback">接口调用失败时的回调</param>
        </member>
        <member name="M:TTSDK.ITTAPI.GetSystemInfo">
            <summary>
             获取系统信息。类似小程序开发平台 tt.getSystemInfoSync 接口返回值。
             https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/api/device/system-information/tt-get-system-info-sync/
            </summary>
            <returns>TTSystemInfo 当前系统相关信息</returns>
        </member>
        <member name="M:TTSDK.ITTAPI.StartAccelerometer(TTSDK.OnAccelerometerChanged,System.Action{System.Boolean,System.String})">
            <summary>
            开始监听加速度数据
            </summary>
            <param name="onAccelerometerChanged">加速度数据回调事件监听</param>
            <param name="statusCallback">接口调用状态回调，(bool success, string errMsg) => {}</param>
        </member>
        <member name="M:TTSDK.ITTAPI.StopAccelerometer(System.Action{System.Boolean,System.String})">
            <summary>
            停止监听加速度数据
            </summary>
            <param name="statusCallback">接口调用状态回调，(bool success, string errMsg) => {}</param>
        </member>
        <member name="M:TTSDK.ITTAPI.GetTTGyroscope">
            <summary>
            获取陀螺仪接口
            </summary>
        </member>
        <member name="M:TTSDK.ITTAPI.ReplaceSensitiveWords(System.String,System.Action{System.Int32,System.String,TTSDK.UNBridgeLib.LitJson.JsonData})">
            <summary>
            替换敏感词
            </summary>
            <param name="word">要检查和替换的词语</param>
            <param name="callback">回调
            int: 返回状态码，0为成功，否则为失败
            string: 错误信息
            JsonData：
            audit_result    int     1: 有敏感内容；2: 无敏感内容
            audit_content   string  被替换的内容（无敏感内容则返回值与传入的word相同）
            </param>
        </member>
        <member name="M:TTSDK.ITTAPI.GetTTKeyboard">
            <summary>
            获取键盘管理器（仅WebGL支持）
            </summary>
            <returns> TTKeyboard </returns>
        </member>
        <member name="M:TTSDK.ITTAPI.GetTTInput">
            <summary>
            获取输入模块（仅 WebGL 支持）
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.ITTAPI.GetTTHostEvent">
            <summary>
            宿主事件监听
            </summary>
        </member>
        <member name="M:TTSDK.ITTAPI.CreateUDPSocket">
            <summary>
            创建一个 UDP Socket 实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.ITTAPI.GetTTClipboard">
            <summary>
             操作剪切板
            </summary>
        </member>
        <member name="M:TTSDK.ITTAPI.GetTTGroup">
            <summary>
            群聊相关操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.ITTAPI.GetTTDeviceMotion">
            <summary>
            方向监听
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.ITTAPI.GetTTScreenManager">
            <summary>
            屏幕相关操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.ITTAPI.TTSendToTAQ(TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            小程序/小游戏转化上报api
            </summary>
        </member>
        <member name="M:TTSDK.ITTAPI.GetTTDouyinCloudManager">
            <summary>
            抖音云功能相关接口
            可以参考 小游戏抖音云相关文档 https://developer.open-douyin.com/docs/resource/zh-CN/developer/tools/cloud/develop-guide/invoke-sever/cloud-sdk
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.ITTAPI.GetTTSideBarManager">
            <summary>
            侧边栏跳转相关接口
            https://bytedance.feishu.cn/docx/NkzOdcUPXo02bdxl6zqcemGinzb
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.ITTAPI.RequestSubscribeMessage(System.Collections.Generic.List{System.String},System.Action{System.Collections.Generic.Dictionary{System.String,System.String}},System.Action,System.Action{System.Int32,System.String})">
            <summary>
            请求订阅消息
            可以参考 小游戏相关文档 https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/open-capacity/subscribe-message/tt-request-subscribe-message/
            </summary>
            <param name="tmplIds">需要订阅的消息模板的 id 的集合，最多支持传入三个 tmplId</param>
            <param name="success">接口调用成功的回调函数</param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
            <param name="failed">接口调用结束的回调函数（调用成功、失败都会执行）</param>
        </member>
        <member name="M:TTSDK.ITTAPI.GetMenuButtonLayout">
            <summary>
            获取菜单按钮（右上角胶囊按钮）的布局位置信息。坐标信息以屏幕左上角为原点。
            https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/interface/menu/tt-get-menu-button-layout/
            </summary>
            <returns>
            JsonData
            width	number	宽度，单位：px
            height	number	高度，单位：px
            top	    number	上边界坐标，单位：px
            right	number	右边界坐标，单位：px
            bottom	number	下边界坐标，单位：px
            left	number	左边界坐标，单位：px
            </returns>
        </member>
        <member name="M:TTSDK.ITTAPI.ReportScene(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData},System.Action{System.Int32,System.String},System.Action)">
            <summary>
            自定义场景数据上报接口
            </summary>
            <param name="sceneId">场景ID，int或long类型登录抖音开放平台，进入「数据」-「性能分析」-「启动监控」-「启动场景配置」模块，进入添加事件场景，新建游戏的自定义启动场景。 游戏每次启动只可以上报一次</param>
            <param name="costTime">场景耗时，单位ms long类型</param>
            <param name="dimension">自定义维度数据，key在抖音开放平台获取。且序列化后长度不超过1024个字符 </param>
            <param name="metric">自定义指标数据，key在抖音开放平台获取。且序列化后长度不超过1024个字符 </param>
            <param name="param">以上参数使用json格式传入，例如"{"sceneId":0,"costTime":10,"dimension":{},"metric":{}}"</param>
            <param name="success">接口调用成功的回调函数</param>
            <param name="failed">接口调用失败的回调函数</param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
        </member>
        <member name="M:TTSDK.ITTAPI.GetSystemFont(System.Action{UnityEngine.Font})">
            <summary>
            获取系统字体,仅支持WebGL,AndroidNative方案无需调用此接口，使用默认字体时，便会自动使用系统自动字体。
            </summary>
            <param name="callback">字体资源回调，可为null，开发者需要做好兜底</param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.ITTAPI.GetLiveManager">
            <summary>
            获取直播间管理器对象
            </summary>
        </member>
        <member name="M:TTSDK.ITTAPI.GetUpdateManager">
            <summary>
            获取小游戏管理更新对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:TTSDK.TTInvite.OnInviteStateChanged">
            <summary>
            抖音好友邀请状态变化
            <param name="state">状态值, 参考@InviteState</param>
            <param name="msg">状态对应的信息</param>
            </summary>
        </member>
        <member name="F:TTSDK.TTInvite.onInviteStateChanged">
            <summary>
            监听邀请状态变化事件
            </summary>
        </member>
        <member name="M:TTSDK.TTInvite.CreateInvitePanel(System.String,TTSDK.UNBridgeLib.LitJson.JsonData,TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{System.Boolean,System.String})">
            <summary>
            抖音好友邀请
            </summary>
            <param name="roomId">房间id</param>
            <param name="query">用于放在schema 里面的信息，Key-Value形式。</param>
            <param name="extra">额外扩展信息, Key-Value形式。</param>
            <param name="callback">调用结果回调： (isSuccess, errMsg) => {}</param>
            <code> Example
            TTSDKInner.API.GetTTInvite().onInviteStateChanged = (state, msg) =>
                {
                    Debug.Log($"onInviteStateChanged - state: {state}, msg: {msg}");
                };
            var roomId = "12345";
            var query = new JsonData {["test"] = "query"};
            JsonData extra = null;
            TTSDKInner.API.GetTTInvite().CreateInvitePanel(roomId, query, extra, (isSuccess, errorMsg) =>
            {
                if (isSuccess)
                {
                    Debug.Log("CreateInvitePanel success");
                }
                else
                {
                    Debug.Log($"CreateInvitePanel failed, {errorMsg}");
                }
            });
            </code>
        </member>
        <member name="T:TTSDK.Modules.Impl.Ad.AndroidBannerAd">
            <summary>
            Android Native 下的 Banner 广告。
            </summary>
        </member>
        <member name="F:TTSDK.Modules.Impl.Ad.AndroidBannerAdState.State">
            <summary>
            resize
            close
            </summary>
        </member>
        <member name="T:TTSDK.Modules.Impl.Ad.InterstitialAd">
            <summary>
            插屏广告父类，load, show, destroy 操作封装为一个方法供子类实现。
            </summary>
        </member>
        <member name="F:TTSDK.Modules.Impl.Ad.CreateExcitingVideoAdJson.AdUnitId">
            <summary>
            广告aid
            </summary>
        </member>
        <member name="F:TTSDK.Modules.Impl.Ad.CreateExcitingVideoAdJson.Multiton">
            <summary>
            是否开启再得广告模式（只支持安卓系统的抖音和抖音极速版）
            </summary>
        </member>
        <member name="F:TTSDK.Modules.Impl.Ad.CreateExcitingVideoAdJson.MultitonRewardMsg">
            <summary>
            再得广告的奖励文案，玩家每看完一个广告都会展示，如【再看1个获得xx】xx就multitonRewardMsg中的文案，按顺序依次展示，单个文案最大长度为 7,multiton为true时必填
            </summary>
        </member>
        <member name="F:TTSDK.Modules.Impl.Ad.CreateExcitingVideoAdJson.MultitonRewardTimes">
            <summary>
            额外观看广告的次数，合法的数据范围为1-4，multiton为true时必填
            </summary>
        </member>
        <member name="F:TTSDK.Modules.Impl.Ad.CreateExcitingVideoAdJson.ProgressTip">
            <summary>
            是否开启进度提醒，开启时广告文案为【再看N个获得xx】，关闭时为【 再看1个获得xx】。N表示玩家当前还需额外观看广告的次数。
            </summary>
        </member>
        <member name="M:TTSDK.Modules.Impl.Ad.CreateExcitingVideoAdJson.BeforeWrite">
            <summary>
            Js 中用 adUnitId, 而 Android 中用 VideoAdId。
            这里干脆两者都传
            </summary>
        </member>
        <member name="F:TTSDK.Modules.Impl.Ad.JsBannerAdStateChange.State">
            <summary>
            resize
            loaded
            close
            error
            </summary>
        </member>
        <member name="P:TTSDK.Modules.Impl.Ad.JsBannerAdStateChange.Size">
            <summary>
            State == "resize"
            </summary>
        </member>
        <member name="P:TTSDK.Modules.Impl.Ad.JsBannerAdStateChange.Error">
            <summary>
            state == "error"
            </summary>
        </member>
        <member name="T:TTSDK.Modules.Impl.Ad.AndroidInterstitialAd">
            <summary>
            Android Native 下的插屏广告
            </summary>
        </member>
        <member name="M:TTSDK.Modules.Impl.Ad.AndroidInterstitialAd.OnAdStateChanged(TTSDK.Modules.Impl.Ad.AdStateChangeEvent)">
            <summary>
            Android 侧代码实现的有点奇怪:
            "loaded"、"close" 走 event onAdStateChanged 公共事件。
            "show"、"destroy" 走 OperateInterstitialAd(...) 调用结果，参考 state 标识。
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:TTSDK.Modules.Impl.Ad.AbstractVideoAd.Token">
            <summary>
            生命周期令牌，当 Destroy() 时取消
            </summary>
        </member>
        <member name="M:TTSDK.Modules.Impl.Ad.AbstractVideoAd.ResetShowHideToken">
            <summary>
            Show() / Hide() 相互取消操作
            </summary>
            <returns></returns>
        </member>
        <member name="T:TTSDK.Modules.Impl.Ad.BannerAd">
            <summary>
            Banner 广告父类，show, hide, destroy 操作封装为方法供子类实现
            </summary>
        </member>
        <member name="T:TTSDK.TTKeyboard.OnKeyboardInputEvent">
            <summary>
            键盘输入事件
            <param name="value">键盘输入的当前值</param>
            </summary>
        </member>
        <member name="T:TTSDK.TTKeyboard.OnKeyboardConfirmEvent">
            <summary>
            用户点击键盘确定按钮时的事件
            <param name="value">键盘输入的当前值</param>
            </summary>
        </member>
        <member name="T:TTSDK.TTKeyboard.OnKeyboardCompleteEvent">
            <summary>
            键盘收起事件
            <param name="value">键盘输入的当前值</param>
            </summary>
        </member>
        <member name="F:TTSDK.TTKeyboard.onKeyboardInputEvent">
            <summary>
            监听键盘输入事件
            </summary>
        </member>
        <member name="F:TTSDK.TTKeyboard.onKeyboardConfirmEvent">
            <summary>
            监听用户点击键盘确定按钮时的事件
            </summary>
        </member>
        <member name="F:TTSDK.TTKeyboard.onKeyboardCompleteEvent">
            <summary>
            监听键盘收起事件
            </summary>
        </member>
        <member name="M:TTSDK.TTKeyboard.ShowKeyboard(TTSDK.TTKeyboard.ShowKeyboardOptions,System.Action,System.Action{System.String})">
             <summary>
             显示软键盘（仅WebGL平台下支持）
             参考： https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/interface/keyboard/tt-show-keyboard/
             键盘输入监听请设置 onKeyboardInputEvent 和 onKeyboardConfirmEvent
             </summary>
             <param name="options">显示键盘的参数</param>
             <param name="onSuccess">显示软键盘成功回调: () => {}</param>
             <param name="onError">显示软键盘失败回调，(errMsg) => {}</param>
             <code> Example:
             using TTSDK;
             using UnityEngine;
             using UnityEngine.UI;
            
             public class KeyboardTest : MonoBehaviour
             {
                 public InputField input;
            
                 private void Start()
                 {
                     SetInputTexts();
                     RegisterKeyboardEvents();
                 }
            
                 private void SetInputTexts()
                 {
                     input.text = "done";
                     var comp = input.GetComponent&#60;ClickableInputField&#62;();
                     if (comp == null)
                     {
                         comp = input.gameObject.AddComponent&#60;ClickableInputField&#62;();
                     }
                     comp.multiple = false;
                     comp.confirmType = input.text;
                 }
            
                 private void OnDestroy()
                 {
                     UnregisterKeyboardEvents();
                 }
            
                 private void RegisterKeyboardEvents()
                 {
                     TTSDKInner.API.GetTTKeyboard().onKeyboardInputEvent += OnKeyboardInput;
                     TTSDKInner.API.GetTTKeyboard().onKeyboardConfirmEvent += OnKeyboardConfirm;
                     TTSDKInner.API.GetTTKeyboard().onKeyboardCompleteEvent += OnKeyboardComplete;
                 }
            
                 private void UnregisterKeyboardEvents()
                 {
                     TTSDKInner.API.GetTTKeyboard().onKeyboardInputEvent -= OnKeyboardInput;
                     TTSDKInner.API.GetTTKeyboard().onKeyboardConfirmEvent -= OnKeyboardConfirm;
                     TTSDKInner.API.GetTTKeyboard().onKeyboardCompleteEvent -= OnKeyboardComplete;
                 }
            
                 private void OnKeyboardInput(string value)
                 {
                     Debug.Log($"OnKeyboardInput: {value}");
                     if (input.isFocused)
                     {
                         input.text = value;
                     }
                 }
            
                 private void OnKeyboardConfirm(string value)
                 {
                     Debug.Log($"OnKeyboardConfirm: {value}");
                 }
            
                 private void OnKeyboardComplete(string value)
                 {
                     Debug.Log($"OnKeyboardComplete: {value}");
                 }
             }
             public class ClickableInputField : EventTrigger
             {
                 public string confirmType = "done"; // 可选值有: "done", "next", "search", "go", "send"
                 public int maxInputLength = 100; // 最大输入长度
                 public bool multiple = false; // 是否多行输入
                 private InputField _inputField;
                 private void Start()
                 {
                     _inputField = GetComponent&#60;InputField&#62;();
                 }
                 public override void OnPointerClick(PointerEventData eventData)
                 {
                     if (_inputField != null)
                     {
                         if (_inputField.isFocused)
                         {
                             TTT.ShowKeyboard(new TTKeyboard.ShowKeyboardOptions()
                             {
                                 maxLength = maxInputLength,
                                 multiple = multiple,
                                 defaultValue = _inputField.text,
                                 confirmType = confirmType
                             });
                         }
                     }
                 }
             }
             </code>
        </member>
        <member name="M:TTSDK.TTKeyboard.HideKeyboard(System.Action,System.Action{System.String})">
            <summary>
            收起软键盘（仅WebGL平台下支持）
            参考： https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/interface/keyboard/tt-hide-keyboard/
            </summary>
            <param name="onSuccess">隐藏软键盘成功回调: () => {}</param>
            <param name="onError">隐藏软键盘失败回调，(errMsg) => {}</param>
        </member>
        <member name="M:TTSDK.TTKeyboard.UpdateKeyboard(System.String,System.Action,System.Action{System.String})">
            <summary>
            更新键盘，只有当键盘处于拉起状态时才会产生效果。
            参考： https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/interface/keyboard/tt-show-keyboard/
            键盘输入监听请设置 onKeyboardInputEvent 和 onKeyboardConfirmEvent
            </summary>
            <param name="value">键盘输入框的当前值</param>
            <param name="onSuccess">更新软键盘成功回调: () => {}</param>
            <param name="onError">更新软键盘失败回调，(errMsg) => {}</param>
        </member>
        <member name="T:TTSDK.TTAppLifeCycle.OnAppShowEvent">
            <summary>
            游戏切到前台事件
            </summary>
        </member>
        <member name="T:TTSDK.TTAppLifeCycle.OnAppHideEvent">
            <summary>
            游戏切到后台事件
            </summary>
        </member>
        <member name="E:TTSDK.TTAppLifeCycle.OnHide">
            <summary>
            监听游戏切到后台，统一所有平台
            </summary>
        </member>
        <member name="E:TTSDK.TTAppLifeCycle.OnShow">
            <summary>
            监听游戏到前台，统一所有平台，携带参数的格式为字典，可以根据指定key获取指定数据
            https://bytedance.feishu.cn/docx/NkzOdcUPXo02bdxl6zqcemGinzb
            </summary>
        </member>
        <member name="M:TTSDK.TTAppLifeCycle.SetOnBeforeExitAppListener(System.Func{System.Boolean})">
            <summary>
            监听游戏退出
            </summary>
            <param name="onBeforeExitApp">返回值为true，则表示由开发者自行处理退出逻辑，可以调用 TTSDK.API.ExitApp来手动退出游戏。返回值为false，则默认退出游戏。</param>
        </member>
        <member name="T:TTSDK.TTInputOverrideBypass">
             <summary>
             触控事件适配
             挂载到 EventSystem 对象上以解决 WebGL 方案下多点触控时，部分触点 PointerUp 等事件丢失的问题。
             </summary>
             <remarks>
             当前脚本会通过重载 StandaloneInputModule，将全局鼠标/触控事件映射到 TTSDK。
             如果需要进一步重载 UnityEngine.Input，请参考 UnityInputOverride.cs。
             如果不需要全局重载，可使用 TT.GetTTInput() 手动挂载触控监听。
            
             勾选 DebugTraceEnabled，可以打印更多调试日志。
             仅在 WebGL 方案下生效；Native 和 Unity Editor 环境中不会有任何作用。
             </remarks>
        </member>
        <member name="F:TTSDK.TTInputOverrideBypass.DebugTraceEnabled">
            <summary>
            是否启用 DebugMode
            开启时，在 Touch 事件触发时会输出调试日志。
            </summary>
        </member>
        <member name="F:TTSDK.TTInputOverrideBypass.EditorMockEnabled">
            <summary>
            是否启用 Mock
            开启时，允许在 Unity Editor 环境下使用 Mock 实现调试，Mock 效果不代表真机情况。
            </summary>
        </member>
        <member name="F:TTSDK.TTInputOverrideBypass._activeTouches">
            <summary>
            当前激活的触控点
            </summary>
        </member>
        <member name="F:TTSDK.TTInputOverrideBypass._standaloneInputModule">
            <summary>
            要重载的 StandaloneInputModule 对象
            </summary>
        </member>
        <member name="F:TTSDK.TTInputOverrideBypass._isInputOverride">
            <summary>
            当前是否已重载
            </summary>
        </member>
        <member name="P:TTSDK.TTInputOverrideBypass.IsInputOverrideActive">
            <summary>
            重载是否处于已激活状态
            </summary>
        </member>
        <member name="M:TTSDK.TTInputOverrideBypass.Awake">
            <summary>
            获取 InputModule 对象
            </summary>
        </member>
        <member name="M:TTSDK.TTInputOverrideBypass.OnEnable">
            <summary>
            启用时注册事件并设置 InputOverride
            </summary>
        </member>
        <member name="M:TTSDK.TTInputOverrideBypass.OnDisable">
            <summary>
            禁用时移除事件并还原 InputOverride
            </summary>
        </member>
        <member name="M:TTSDK.TTInputOverrideBypass.RegisterTTTouchEvents">
            <summary>
            注册触控事件
            </summary>
        </member>
        <member name="M:TTSDK.TTInputOverrideBypass.UnregisterTTTouchEvents">
            <summary>
            移除触控事件监听
            </summary>
        </member>
        <member name="M:TTSDK.TTInputOverrideBypass.OnTTTouchStart(TTSDK.TTTouchEvent)">
            <summary>
            响应触控开始
            </summary>
            <param name="touchEvent"></param>
        </member>
        <member name="M:TTSDK.TTInputOverrideBypass.OnTTTouchMove(TTSDK.TTTouchEvent)">
            <summary>
            响应触控移动
            </summary>
            <param name="touchEvent"></param>
        </member>
        <member name="M:TTSDK.TTInputOverrideBypass.OnTTTouchEnd(TTSDK.TTTouchEvent)">
            <summary>
            响应触控结束
            </summary>
            <param name="touchEvent"></param>
        </member>
        <member name="M:TTSDK.TTInputOverrideBypass.OnTTTouchCancel(TTSDK.TTTouchEvent)">
            <summary>
            响应触控取消
            </summary>
            <param name="touchEvent"></param>
        </member>
        <member name="M:TTSDK.TTInputOverrideBypass.LateUpdate">
            <summary>
            每帧结束后，设置 Began 触控点为按住状态，并清理已结束的触控点
            </summary>
        </member>
        <member name="M:TTSDK.TTInputOverrideBypass.GetTouchData(System.Int32)">
            <summary>
            获取已存在的 TouchData
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTInputOverrideBypass.CreateTouchData(System.Int32)">
            <summary>
            创建一个新的 TouchData
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTInputOverrideBypass.GetOrCreateTouchData(System.Int32)">
            <summary>
            获取 TouchData 找不到则创建
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTInputOverrideBypass.UpdateTouchData(TTSDK.TTInputOverrideBypass.BypassTouchData,UnityEngine.Vector2,System.Int64,UnityEngine.TouchPhase)">
            <summary>
            更新指定 TouchData
            </summary>
            <param name="data"></param>
            <param name="pos"></param>
            <param name="timestamp"></param>
            <param name="phase"></param>
        </member>
        <member name="M:TTSDK.TTInputOverrideBypass.RemoveEndedOrCanceledTouches">
            <summary>
            移除所有已经结束的触控点
            </summary>
        </member>
        <member name="F:TTSDK.SuccessResult.ErrMsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="F:TTSDK.RequestGamePaymentSuccessResult.ErrMsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="F:TTSDK.RequestGamePaymentSuccessResult.PayTime">
            <summary>
            支付时间
            </summary>
        </member>
        <member name="F:TTSDK.RequestGamePaymentSuccessResult.Gift">
            <summary>
            礼包详情（若为礼包购买）
            </summary>
        </member>
        <member name="F:TTSDK.RequestGamePaymentParam.Mode">
            <summary>
            必填  支付的类型, 目前仅为"game"
            </summary>
        </member>
        <member name="F:TTSDK.RequestGamePaymentParam.Env">
            <summary>
            必填  环境配置，目前合法值仅为"0"
            </summary>
        </member>
        <member name="F:TTSDK.RequestGamePaymentParam.CurrencyType">
            <summary>
            必填  币种, 目前仅为"CNY"
            </summary>
        </member>
        <member name="F:TTSDK.RequestGamePaymentParam.Platform">
            <summary>
            必填  申请接入时的平台，目前仅为"android"
            </summary>
        </member>
        <member name="F:TTSDK.RequestGamePaymentParam.BuyQuantity">
            <summary>
            必填（道具直购场景除外）金币购买数量
            </summary>
        </member>
        <member name="F:TTSDK.RequestGamePaymentParam.ZoneId">
            <summary>
            非必填 游戏服务区 id，
            </summary>
        </member>
        <member name="F:TTSDK.RequestGamePaymentParam.CustomId">
            <summary>
            必填  游戏开发者自定义的唯一订单号，订单支付成功后通过服务端支付结果回调回传
            </summary>
        </member>
        <member name="F:TTSDK.RequestGamePaymentParam.ExtraInfo">
            <summary>
            非必填 游戏开发者自定义的其他信息，订单支付成功后通过服务端支付结果回调回传。字符串长度最大不能超过 256
            </summary>
        </member>
        <member name="F:TTSDK.RequestGamePaymentParam.GoodType">
            <summary>
            非必填（道具直购场景必填）默认游戏币。goodType 与 buyQuantity 任一传递即，可游戏币：0 或 1，道具直购：2
            </summary>
        </member>
        <member name="F:TTSDK.RequestGamePaymentParam.OrderAmount">
            <summary>
            非必填（道具直购场景必填）道具价格，人民币，单位分
            </summary>
        </member>
        <member name="F:TTSDK.RequestGamePaymentParam.GoodName">
            <summary>
            非必填（道具直购场景必填）道具名称
            </summary>
        </member>
        <member name="F:TTSDK.RequestGamePaymentParam.GoodsId">
            <summary>
            非必填 （礼包场景必填）礼包Id
            </summary>
        </member>
        <member name="F:TTSDK.RequestGamePaymentParam.Success">
            <summary>
            支付成功回调
            </summary>
        </member>
        <member name="F:TTSDK.RequestGamePaymentParam.Fail">
            <summary>
            支付失败回调
            </summary>
        </member>
        <member name="F:TTSDK.RequestGamePaymentParam.Complete">
            <summary>
            接口调用完成回调
            </summary>
        </member>
        <member name="F:TTSDK.BuyGiftResult.GiftId">
            <summary>
            礼包 id
            </summary>
        </member>
        <member name="F:TTSDK.BuyGiftResult.Name">
            <summary>
            礼包名称
            </summary>
        </member>
        <member name="F:TTSDK.BuyGiftResult.OrderAmount">
            <summary>
            礼包价格，单位是分
            </summary>
        </member>
        <member name="F:TTSDK.TTPayService.ERR_CODE_NOT_IN_UC_ENV">
            <summary>
            非uc环境下运行
            </summary>
        </member>
        <member name="F:TTSDK.TTPayService.ERR_CODE_PAY_NOT_SUPPORT">
            <summary>
            当前uc环境不支持支付功能
            </summary>
        </member>
        <member name="F:TTSDK.TTPayService.ERR_CODE_PAY_UNFINISHED">
            <summary>
            前一个支付未完成
            </summary>
        </member>
        <member name="F:TTSDK.TTPayService.ERR_CODE_INVALID_ORDER_INFO">
            <summary>
            orderInfo参数无效
            </summary>
        </member>
        <member name="F:TTSDK.TTPayService.ERR_CODE_PAY_FAILED">
            <summary>
            支付失败
            </summary>
        </member>
        <member name="F:TTSDK.TTPayService.ERR_CODE_WX_LAUNCH_FAILED">
            <summary>
            拉起微信支付失败
            </summary>
        </member>
        <member name="F:TTSDK.TTPayService.ERR_CODE_WX_NOT_INSTALLED">
            <summary>
            微信未安装
            </summary>
        </member>
        <member name="T:TTSDK.TTPayService.GetOrderStatusHandler">
            <summary>
            查询订单状态处理函数
            </summary>
            <param name="orderNo">订单号（从orderInfo中读取的order_info值）</param>
            <param name="tradeTime">交易时间（从orderInfo中读取的trade_time值）</param>
            <returns>PayStatus 订单支付状态</returns>
        </member>
        <member name="T:TTSDK.TTPayService.PayStatus">
            <summary>
            支付状态
            </summary>
        </member>
        <member name="F:TTSDK.TTPayService.PayStatus.PaySuccess">
            <summary>
            支付成功
            </summary>
        </member>
        <member name="F:TTSDK.TTPayService.PayStatus.PayTimeout">
            <summary>
            支付超时
            </summary>
        </member>
        <member name="F:TTSDK.TTPayService.PayStatus.PayFailed">
            <summary>
            支付失败
            </summary>
        </member>
        <member name="F:TTSDK.TTPayService.PayStatus.PayClosed">
            <summary>
            支付关闭
            </summary>
        </member>
        <member name="F:TTSDK.TTPayService.PayStatus.PayCancel">
            <summary>
            支付取消
            </summary>
        </member>
        <member name="F:TTSDK.TTPayService.PayStatus.PayUnknown">
            <summary>
            订单状态未知/未支付
            </summary>
        </member>
        <member name="T:TTSDK.TTPayService.PayServiceType">
            <summary>
            拉起支付服务类型
            </summary>
        </member>
        <member name="F:TTSDK.TTPayService.PayServiceType.Checkout">
            <summary>
            小程序收银台，从收银台选择支付渠道
            </summary>
        </member>
        <member name="F:TTSDK.TTPayService.PayServiceType.Wechat">
            <summary>
            调用微信 API 支付，不拉起小程序收银台
            </summary>
        </member>
        <member name="F:TTSDK.TTPayService.PayServiceType.Alipay">
            <summary>
            调用支付宝 API 支付，不拉起小程序收银台
            </summary>
        </member>
        <member name="T:TTSDK.TTPayService.PayChannel">
            <summary>
            支付渠道
            </summary>
        </member>
        <member name="F:TTSDK.TTPayService.PayChannel.Wechat">
            <summary>
            使用微信支付
            </summary>
        </member>
        <member name="F:TTSDK.TTPayService.PayChannel.Alipay">
            <summary>
            使用支付宝支付
            </summary>
        </member>
        <member name="M:TTSDK.TTPayService.PayModuleInit">
            <summary>
            初始化支付接口，减少支付时卡顿时间
            </summary>
        </member>
        <member name="M:TTSDK.TTPayService.RequestGamePayment(System.Collections.Generic.Dictionary{System.String,System.Object},System.Action,System.Action{System.Int32,System.String})">
            <summary>
            小游戏平台的支付接口
            接口文档 https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/payment/tt-request-game-payment
            mode            string  必填  支付的类型, 目前仅为"game"
            env             int     必填  环境配置，目前合法值仅为"0"
            currencyType    string  必填  币种, 目前仅为"CNY"
            platform        string  必填  申请接入时的平台，目前仅为"android"
            buyQuantity     int     必填（道具直购场景除外）金币购买数量
            zoneId          string  非必填 游戏服务区 id，
            customId        string  必填  游戏开发者自定义的唯一订单号，订单支付成功后通过服务端支付结果回调回传
            extraInfo       string  非必填 游戏开发者自定义的其他信息，订单支付成功后通过服务端支付结果回调回传。字符串长度最大不能超过 256
            goodType        int     非必填（道具直购场景必填）默认游戏币。goodType 与 buyQuantity 任一传递即，可游戏币：0 或 1，道具直购：2
            orderAmount     int     非必填（道具直购场景必填）道具价格，人民币，单位分
            goodName        string  非必填（道具直购场景必填）道具名称
            </summary>
        </member>
        <member name="T:TTSDK.TTShareImpl">
            分享模块
        </member>
        <member name="T:TTSDK.ICallBridge">
            <summary>
            UNBridge 调用的接口形式封装，方便分发各平台的独立实现
            </summary>
        </member>
        <member name="T:TTSDK.FavoriteMockMoudle">
            <summary>
            收藏模块的Mock层
            </summary>
        </member>
        <member name="T:TTSDK.TTAudioManager">
            <summary>
            本地音频播放管理器
            </summary>
        </member>
        <member name="M:TTSDK.TTAudioManager.CreateInnerAudioContext(TTSDK.TTAudioManager.InnerAudioContextOptions)">
            <summary>
            创建 InnerAudioContext
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="F:TTSDK.TTAudioManager.InnerAudioContextOptions.src">
            <summary>
            音频资源 url 地址，也支持相对路径的地址。只支持 mp3、wav、m4a、aac 格式。
            如果 url 地址是一个相对路径的地址，比如 Assets/Sound/music.mp3，
            那么会自动根据配置的 url 前缀拼接为完整的url：${url_prefix}/Assets/Sound/music.mp3
            有两种方法设置 url 前缀：
              1. 构建 WebGL 时填写【游戏资源CDN】url 前缀，运行时会自动拼接为完整 url。
              2. 通过调用 TTAudioManager.SetAudioUrlPrefix 函数设置 url 前缀。
            如果同时填写了【游戏资源CDN】和调用了 TTAudioManager.SetAudioUrlPrefix 函数，默认优先使用构建时填写的【游戏资源CDN】url前缀。
            </summary>
        </member>
        <member name="F:TTSDK.TTAudioManager.InnerAudioContextOptions.startTime">
            <summary>
            开始播放的位置（单位：s）
            </summary>
        </member>
        <member name="F:TTSDK.TTAudioManager.InnerAudioContextOptions.autoPlay">
            <summary>
            是否自动播放
            </summary>
        </member>
        <member name="F:TTSDK.TTAudioManager.InnerAudioContextOptions.loop">
            <summary>
            是否自动循环
            </summary>
        </member>
        <member name="F:TTSDK.TTAudioManager.InnerAudioContextOptions.volume">
            <summary>
            当前音量，范围 0 ～ 1
            </summary>
        </member>
        <member name="F:TTSDK.TTAudioManager.InnerAudioContextOptions.playbackRate">
            <summary>
            播放速度。范围 0.5 ～ 2.0，默认为 1
            </summary>
        </member>
        <member name="F:TTSDK.TTAudioManager.InnerAudioContextOptions.needDownload">
            <summary>
            是否需要下载，如果为true，则会完全下载后再触发OnCanplay
            </summary>
        </member>
        <member name="T:TTSDK.TTAudioManager.InnerAudioContext">
            <summary>
            音频实例上下文对象，完成对音频播放
            同时支持Android及WebGL平台，但如果是Android下播放mp3文件，Unity引擎需要为Unity2020.1.14f1及以上版本 
            </summary>
        </member>
        <member name="F:TTSDK.TTAudioManager.InnerAudioContext.onCanPlay">
            <summary>
            监听音频进入可以播放状态，但不保证后面可以流畅播放
            </summary>
        </member>
        <member name="F:TTSDK.TTAudioManager.InnerAudioContext.onPlay">
            <summary>
            监听音频播放事件
            </summary>
        </member>
        <member name="F:TTSDK.TTAudioManager.InnerAudioContext.onPause">
            <summary>
            监听音频暂停事件
            </summary>
        </member>
        <member name="F:TTSDK.TTAudioManager.InnerAudioContext.onStop">
            <summary>
            监听音频停止播放事件
            </summary>
        </member>
        <member name="F:TTSDK.TTAudioManager.InnerAudioContext.onEnded">
            监听自然播放结束事件
        </member>
        <member name="F:TTSDK.TTAudioManager.InnerAudioContext.onError">
            <summary>
            监听音频播放出错事件,
            (errMsg) => {}
            </summary>
        </member>
        <member name="F:TTSDK.TTAudioManager.InnerAudioContext.onWaiting">
            <summary>
            监听音频加载中事件，当音频因为数据不足，需要停下来加载时会触发
            </summary>
        </member>
        <member name="F:TTSDK.TTAudioManager.InnerAudioContext.onSeeking">
            <summary>
            监听音频开始进行 seek 操作的事件
            </summary>
        </member>
        <member name="F:TTSDK.TTAudioManager.InnerAudioContext.onSeeked">
            <summary>
            监听音频完成 seek 操作的事件
            </summary>
        </member>
        <member name="P:TTSDK.TTAudioManager.InnerAudioContext.AudioId">
            <summary>
            当前音频ID
            </summary>
        </member>
        <member name="P:TTSDK.TTAudioManager.InnerAudioContext.Duration">
            <summary>
            获取音频时长，单位 s
            </summary>
        </member>
        <member name="M:TTSDK.TTAudioManager.InnerAudioContext.GetCurrentTime(System.Action{System.Double})">
            <summary>
            获取当前播放时长，单位 s
            （由于WebGL底层实现方案的原因，只能将结果异步返回）
            </summary>
            <param name="callback">(currentTime) => {}</param>
            <example>
            audioContext.GetCurrentTime(value =>
            {
                Debug.Log($"audio currentTime: {value} s");
            });
            </example>
        </member>
        <member name="M:TTSDK.TTAudioManager.InnerAudioContext.GetPausedState(System.Action{System.Boolean})">
            <summary>
            获取当前音频是否是暂停状态
            （由于WebGL底层实现方案的原因，只能将结果异步返回）
            </summary>
            <param name="callback">(isPaused) => {}</param>
            <example>
            audioContext.GetBuffered(isPaused =>
            {
                Debug.Log($"audio isPaused: {isPaused}");
            });
            </example>
        </member>
        <member name="M:TTSDK.TTAudioManager.InnerAudioContext.GetBuffered(System.Action{System.Double})">
            <summary>
            获取当前已缓冲的音频长度，单位 s
            （由于WebGL底层实现方案的原因，只能将结果异步返回）
            </summary>
            <example>
            audioContext.GetBuffered(buffered =>
            {
                Debug.Log($"audio buffered: {buffered} s");
            });
            </example>
        </member>
        <member name="M:TTSDK.TTAudioManager.InnerAudioContext.OnInnerAudioStateChanged(System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            内部方法（请勿调用）
            </summary>
        </member>
        <member name="M:TTSDK.TTAudioManager.InnerAudioContext.Play">
            <summary>
            播放音频
            同时支持Android及WebGL平台，但如果是Android下播放mp3文件，Unity引擎需要为Unity2020.1.14f1及以上版本
            </summary>
        </member>
        <member name="M:TTSDK.TTAudioManager.InnerAudioContext.Pause">
            <summary>
            暂停播放
            </summary>
        </member>
        <member name="M:TTSDK.TTAudioManager.InnerAudioContext.Stop">
            <summary>
            停止播放
            </summary>
        </member>
        <member name="M:TTSDK.TTAudioManager.InnerAudioContext.Destroy">
            <summary>
            销毁当前实例。销毁后该实例将不存在，如需播放需要再次创建
            </summary>
        </member>
        <member name="M:TTSDK.TTAudioManager.InnerAudioContext.Seek(System.Double)">
            <summary>
            跳转到指定位置播放
            </summary>
            <param name="position"></param>
        </member>
        <member name="P:TTSDK.TTAudioManager.InnerAudioContext.Volume">
            <summary>
            音量。范围 0~1。默认为 1
            </summary>
        </member>
        <member name="P:TTSDK.TTAudioManager.InnerAudioContext.Mute">
            <summary>
            静音，静音时将音量设置为 0，取消静音则恢复原来的音量
            </summary>
        </member>
        <member name="P:TTSDK.TTAudioManager.InnerAudioContext.Loop">
            <summary>
            设置是否循环播放，默认为 false
            </summary>
        </member>
        <member name="M:TTSDK.TTPayServiceImpl.onBuyGiftCallback(TTSDK.BuyGiftResult)">
            <summary>
            接受重复的onBuyGift回调
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:TTSDK.SingletonBase`1">
            <summary>
            单例抽象类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:TTSDK.GetLogManagerParam._level">
            <summary>
            取值为0/1，取值为0表示会把一些基础库的运行时信息（内容见下方）写入日志，取值为1则不会。默认值是 0 
            </summary>
        </member>
        <member name="F:TTSDK.GetLogManagerParam.SyncToConsole">
            <summary>
            true表示 log 内容会在 vConsole 或 IDE 控制台上展示， false 表示不展示。默认值是 false, Native方案暂该参数无效
            </summary>
        </member>
        <member name="M:TTSDK.TTLogManagerServiceExtensions.IsFreqExceeded``1(TTSDK.TTLogManagerService,System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            日志频率限制
            </summary>
            <param name="logs">日志</param>
            <param name="loopDetectionThreshold">循环检测阈值</param>
            <param name="maxCallSpeed">最大调用频率</param>
            <returns></returns>
        </member>
        <member name="F:TTSDK.TTBridge.s_SupportMethed">
            <summary>
            记录已判断支持的函数
            </summary>
        </member>
        <member name="F:TTSDK.TTBridge.s_NotSupportMethed">
            <summary>
            记录已判断不被支持的函数
            </summary>
        </member>
        <member name="M:TTSDK.TTBridge.IsBridgeAvailable">
            <summary>
            Check if UNBridge android sdk is available
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTBridge.ValidateNativeMethod(TTSDK.TTNativeMethod)">
            <summary>
            Validate the native method before calling it
            非Container环境下，都返回 true
            </summary>
            <param name="nativeMethod"></param>
        </member>
        <member name="M:TTSDK.TTBridge.Call(TTSDK.TTNativeMethod)">
            <summary>
            Replacement for UNbridge.Call
            </summary>
            <param name="nativeMethod">native method object to be called</param>
        </member>
        <member name="M:TTSDK.TTBridge.Call(TTSDK.TTNativeMethod,TTSDK.UNBridgeLib.BridgeCallBack)">
            <summary>
            Replacement for UNBridge.Call with callback
            </summary>
            <param name="nativeMethod">native method object to be called</param>
            <param name="callback">callback object passed in</param>
        </member>
        <member name="M:TTSDK.TTBridge.CallDontUseLoom(System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            不使用Loom调用一个Android方法
            </summary>
            <param name="target">目标接口</param>
            <param name="param">参数数据</param>
        </member>
        <member name="M:TTSDK.TTBridge.CallNativeDontUseLoom(System.Int32,System.String,TTSDK.UNBridgeLib.LitJson.JsonData,System.String)">
            <summary>
            同步Call通讯接口
            </summary>
            <param name="type">消息类型0-call消息，1-listen消息,2-unlisten消息，3-event消息</param>
            <param name="target">目标接口</param>
            <param name="param">参数</param>
            <param name="callbackId"></param>
        </member>
        <member name="M:TTSDK.TTBridge.CallWithDefaultCallback(TTSDK.TTNativeMethod)">
            <summary>
            Replacement for UNBridge.Call with callback
            </summary>
            <param name="nativeMethod">native method object to be called</param>
        </member>
        <member name="M:TTSDK.TTBridge.Call(TTSDK.TTNativeMethod,TTSDK.UNBridgeLib.BridgeCallBack,System.Int64)">
            <summary>
            Replacement for UNBridge.Call with callback with timeout
            </summary>
            <param name="nativeMethod">native method object to be called</param>
            <param name="callback">callback object passed in</param>
            <param name="timeout">callback timeout</param>
        </member>
        <member name="M:TTSDK.TTBridge.CallSync``1(TTSDK.TTNativeMethod)">
             <summary>
             Replacement for UNBridge.CallSync, return primitive values;
             This API only support basic types: int, long, float, double, bool, string;
             Default(T) will return if return type not supported!
            
             Define Android code as following:
             
             @UNBridgeMethod(sync = true)
             public long testLong() { return 21474836470L; }
             
             </summary>
             <typeparam name="T">Only valide for basic types: int, long, float, double, bool, string</typeparam>
             <param name="nativeMethod">Native method object</param>
             <returns>return value </returns>
        </member>
        <member name="M:TTSDK.TTBridge.CallSyncList``1(TTSDK.TTNativeMethod)">
            <summary>
            Special CallSync for IList return values;
            
            Define Android code as following:
            <code>
            @UNBridgeMethod(sync = true)
            public List&lt;String&gt; testArrayString() { ... }
            </code>
            </summary>
            <typeparam name="T">Only valide for basic types: int, long, float, double, bool, string</typeparam>
            <param name="nativeMethod"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTBridge.CallSyncMap``1(TTSDK.TTNativeMethod)">
             <summary>
             Special CallSync for IList return values;
            
             Define Android code as following:
            
             <code>
             @UNBridgeMethod(sync = true)
             public Map&lt;string, Long&gt; testMapLong() { ... }
             </code>
             
             </summary>
             <typeparam name="T">Only valide for basic types: int, long, float, double, bool, string</typeparam>
             <param name="nativeMethod">Native method object</param>
             <returns>return value </returns>
        </member>
        <member name="M:TTSDK.TTBridge.RegisterAPI(System.String,TTSDK.UNBridgeLib.OnCallBridgeAPI)">
            <summary>
            Convenient method to register c# API for Android
            </summary>
            <param name="mehodID"></param>
            <param name="method"></param>
        </member>
        <member name="M:TTSDK.TTGyroscope.StartGyroscope(System.Double,System.Action{System.Boolean,System.String})">
            <summary>
            开始监听陀螺仪
            </summary>
            <param name="interval">获取陀螺仪数据的间隔时间，单位为毫秒（ms），默认大小为 50</param>
            <param name="statusCallback">接口调用状态回调，(bool success, string errMsg) => {}</param>
        </member>
        <member name="M:TTSDK.TTGyroscope.StopGyroscope(System.Action{System.Boolean,System.String})">
            <summary>
            停止监听陀螺仪
            </summary>
            <param name="statusCallback">接口调用状态回调，(bool success, string errMsg) => {}</param>
        </member>
        <member name="T:TTSDK.TTGyroscope.OnGyroscopeChanged">
            <summary>
            陀螺仪回调
            </summary>
            <param name="x">x 轴的角速度。</param>
            <param name="y">y 轴的角速度。</param>
            <param name="z">z 轴的角速度。</param>
            <param name="t">从设备启动到现在经过的时间戳，单位是 ms。</param>
            <param name="roll">姿态角值，围绕 Z 轴旋转，也叫翻滚角。</param>
            <param name="pitch">姿态角值，围绕 X 轴旋转，也叫做俯仰角。</param>
            <param name="yaw">姿态角值，围绕 Y 轴旋转，也叫偏航角。</param>
            <param name="result"></param>
        </member>
        <member name="T:TTSDK.TTInputMockHandler">
            <summary>
            为 TTInputMock 获取 Unity Input 输入
            </summary>
        </member>
        <member name="F:TTSDK.TTInputMockHandler.TouchHandlers">
            <summary>
            触摸事件回调
            </summary>
        </member>
        <member name="M:TTSDK.TTInputMockHandler.GetOrCreateTouch(System.Int32)">
            <summary>
            获取已存在触点
            </summary>
            <param name="fingerId"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTInputMockHandler.RemoveTouch(System.Int32)">
            <summary>
            移除触点
            </summary>
            <param name="fingerId"></param>
        </member>
        <member name="M:TTSDK.TTInputMockHandler.ScheduleDispatchEventNextFrame(System.Int32,UnityEngine.TouchPhase,TTSDK.TTTouchEvent)">
            <summary>
            分发 Touch 事件
            下一帧开始时分发
            </summary>
            <param name="fingerId"></param>
            <param name="phase"></param>
            <param name="touchEvent"></param>
            <returns></returns>
        </member>
        <member name="T:TTSDK.TTInputMock">
            <summary>
             触控事件 API Mock
            通过 Input 获取 Touch 或 Mouse 覆盖到 TT 事件，仅用于调试。
            </summary>
        </member>
        <member name="T:TTSDK.DouyinCloud">
            <summary>
            抖音云模块
            </summary>
        </member>
        <member name="T:TTSDK.DouyinCloud.Options">
            <summary>
            请求相关设置
            </summary>
        </member>
        <member name="F:TTSDK.DouyinCloud.Options.Method">
            <summary>网络请求方法，支持 GET/POST/OPTIONS/PUT/HEAD/DELETE</summary>
        </member>
        <member name="F:TTSDK.DouyinCloud.Options.Header">
            <summary>请求header</summary>
        </member>
        <member name="F:TTSDK.DouyinCloud.Options.Data">
            <summary>Post 请求的参数</summary>
        </member>
        <member name="F:TTSDK.DouyinCloud.Options.CloudIdMaps">
            <summary>CloudId key 开发自己定义, value 是cloudId 数据, 相关key value 数据会被自动加到post 请求的body 中</summary>
        </member>
        <member name="T:TTSDK.DouyinCloud.Response">
            <summary>
            请求响应
            </summary>
        </member>
        <member name="M:TTSDK.DouyinCloud.CallContainer(System.String,System.String,System.String,TTSDK.DouyinCloud.Options,System.Action{TTSDK.DouyinCloud.Response},System.Action{TTSDK.DouyinCloud.ErrorResponse})">
             <summary>
            
             请求抖音云服务端接口
             可以参考 小游戏抖音云相关文档 https://developer.open-douyin.com/docs/resource/zh-CN/developer/tools/cloud/develop-guide/invoke-sever/cloud-sdk
             </summary>
             <param name="eveId">抖音云平台环境id</param>
             <param name="serviceId">抖音云平台服务id</param>
             <param name="path">请求path</param>
             <param name="options">请求参数</param>
             <param name="success">成功回调</param>
             <param name="fail">失败回调</param>
        </member>
        <member name="M:TTSDK.DouyinCloud.GetTempFileUrl(System.String,System.Collections.Generic.List{System.String},System.Int32,System.Action{TTSDK.DouyinCloud.FileResponse},System.Action{TTSDK.DouyinCloud.ErrorResponse})">
            <summary>
            获取抖音云文件访问地址
            </summary>
            <param name="eveId">抖音云平台环境id</param>
            <param name="cloudPaths">云文件path</param>
            <param name="maxAge">最大有效期</param>
            <param name="success">成功回调</param>
            <param name="fail">失败回调</param>
        </member>
        <member name="M:TTSDK.DouyinCloud.DeleteFile(System.String,System.Collections.Generic.List{System.String},System.Action{TTSDK.DouyinCloud.FileResponse},System.Action{TTSDK.DouyinCloud.ErrorResponse})">
            <summary>
            抖音云文件删除
            </summary>
            <param name="eveId">抖音云平台环境id</param>
            <param name="cloudPaths">云文件path</param>
            <param name="success">成功回调</param>
            <param name="fail">失败回调</param>
        </member>
        <member name="M:TTSDK.DouyinCloud.UploadFile(System.String,System.String,System.String,System.Action{TTSDK.DouyinCloud.DownloadUploadProgressData},System.Action{TTSDK.DouyinCloud.UploadResponse},System.Action{TTSDK.DouyinCloud.ErrorResponse})">
            <summary>
            抖音云文件上传
            </summary>
            <param name="eveId">抖音云平台环境id</param>
            <param name="cloudPath">云文件path</param>
            <param name="filePath"> 需要传递绝对路径</param> 
            <param name="progress"> 上传进度回调</param>
            <param name="success"> 上传成功毁掉</param>
            <param name="fail"> 上传失败回调</param>
        </member>
        <member name="M:TTSDK.DouyinCloud.DownloadFile(System.String,System.String,System.String,System.Action{TTSDK.DouyinCloud.DownloadUploadProgressData},System.Action{TTSDK.DouyinCloud.DownloadResponse},System.Action{TTSDK.DouyinCloud.ErrorResponse})">
            <summary>
            下载抖音云文件 
            </summary>
            <param name="eveId">抖音云平台环境id</param>
            <param name="cloudPath">云文件path</param>
            <param name="filePath">需要传递绝对路径</param>
            <param name="progress">下载进度回调</param>
            <param name="success">下载成功毁掉</param>
            <param name="fail">下载成功毁掉</param>
        </member>
        <member name="M:TTSDK.DouyinCloud.CloudDb">
            <summary>
            返回抖音云操作数据库对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTUIManager.ShowToast(System.String)">
            <summary>
            Toast提示
            </summary>
            <param name="message">提示信息</param>
        </member>
        <member name="M:TTSDK.TTUIManager.ShowToastLong(System.String)">
            <summary>
            Toast提示
            </summary>
            <param name="message">提示信息</param>
        </member>
        <member name="T:TTSDK.OnAccelerometerListener.OnAccelerometerChangedDelegate">
            <summary>
            加速器数据回调
            </summary>
        </member>
        <member name="T:TTSDK.PeformanceInfo">
            <summary>
            性能数组实体
            </summary>
        </member>
        <member name="M:TTSDK.TTUtils.IsContainerRuntime">
            <summary>
            判断是否运行在UC环境
            </summary>
        </member>
        <member name="M:TTSDK.TTUtils.StaticsReport``1(System.String,System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            埋点上报到app_log
            TODO : 分离 StarkInnelAPI
            </summary>
        </member>
        <member name="M:TTSDK.TTUtils.StaticsReport(System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            埋点上报到app_log
            TODO : 分离 StarkInnelAPI
            </summary>
        </member>
        <member name="M:TTSDK.TTUtils.GetConfigCenterValueByKey``1(System.String,``0)">
            <summary>
            读取Java侧UnityContainerConfigCenter中的配置字段,目前返回的泛型数据只支持基本类型
            bool
            double
            float
            Int32
            Int64
            string
            </summary>
            <typeparam name="T">配置字段的类型</typeparam>
            <param name="key">配置字段的key</param>
            <param name="defaultValue">当该配置字段不存在时返回该值</param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTUtils.StaticsReportPerformance``1(System.String,System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            只埋点上报性能信息，由于性能信息一部分来自Java所以单独列出一个方法
            </summary>
        </member>
        <member name="M:TTSDK.TTUtils.CollectCPUInfo">
            <summary>
            告知Java侧这时候可以手机CPU信息了
            </summary>
        </member>
        <member name="M:TTSDK.TTUtils.PerformanceReport(System.Int32)">
            <summary>
            新的上报游戏性能信息的接口
            </summary>
            <param name="currnetFPS"></param>
        </member>
        <member name="M:TTSDK.TTUtils.RegisterCustomOnCommandEvent(System.Action{System.String,System.Collections.Generic.IList{System.String}})">
            <summary>
            Custo onCommand method register
            </summary>
            <param name="onCommand"></param>
        </member>
        <member name="M:TTSDK.TTUtils.RegisterDefaultOnCommandEvent">
            <summary>
            Default onCommand register
            </summary>
            <param name="onCommand"></param>
        </member>
        <member name="M:TTSDK.TTUtils.OnCommandCallback(TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            callback from onCommand panel
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:TTSDK.TTUtils.OnCommand(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Default onCommand
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:TTSDK.TTUtils.GetAndroidMemoryInfo(TTSDK.PeformanceInfo@)">
            <summary>
            获取到当前的性能数据
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:TTSDK.TTUtils.UpdateLastReportInfo(TTSDK.PeformanceInfo@)">
            <summary>
            更新需要上报的数据
            </summary>
            <param name="info">当前统计到的最新的数据</param>
        </member>
        <member name="M:TTSDK.TTUtils.GetAvgMemoryInfo(TTSDK.PeformanceInfo@)">
            <summary>
            计算平均表现
            </summary>
            <param name="avg">结果值</param>
        </member>
        <member name="M:TTSDK.TTUtils.GetUserdateDir">
            <summary>
            获取用户存档空间
            </summary>
        </member>
        <member name="M:TTSDK.TTUtils.CurrentVersionGreaterOrEqual(System.Int32,System.Int32)">
            <summary>
            判断当前 Container 版本是否大于等于给定的版本
            </summary>
            <param name="major">主版本号</param>
            <param name="middle">中间版本号</param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTUtils.GetAppSettings(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            获取小游戏Settings, 适用版本 >= 5.31.0
            </summary>
            <param name="fields">获取的数据key</param>
            <param name="useCache">是否使用缓存</param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTUtils.GetAppInfoSync(System.Boolean)">
            <summary>
            获取应用信息：schema、appid、接口黑白名单、应用版本、应用 pkg 类型、应用技术形态, 适用版本 > 5.32.0
            </summary>
            <param name="needSession">是否需要session字段</param>
            <returns></returns>
        </member>
        <member name="T:TTSDK.TTTouch">
            <summary>
            Touch 对象表示在触控设备上的触摸点。通常是指手指或者触控笔在触屏设备或者触摸板上的操作。
            </summary>
        </member>
        <member name="F:TTSDK.TTTouch.identifier">
            <summary>
            Touch 对象的唯一标识符，只读属性。一次触摸动作(指手指的触摸)在平面上移动的整个过程中, 该标识符不变。 可以根据它来判断跟踪的是否是同一次触摸过程。
            </summary>
        </member>
        <member name="F:TTSDK.TTTouch.screenX">
            <summary>
            触点相对于屏幕左边沿的 X 坐标。
            </summary>
        </member>
        <member name="F:TTSDK.TTTouch.screenY">
            <summary>
            触点相对于屏幕上边沿的 Y 坐标。
            </summary>
        </member>
        <member name="T:TTSDK.TTTouchEvent">
            <summary>
            触摸事件
            </summary>
        </member>
        <member name="F:TTSDK.TTTouchEvent.touches">
            <summary>
            当前所有触摸点的列表
            </summary>
        </member>
        <member name="F:TTSDK.TTTouchEvent.changedTouches">
            <summary>
            触发此次事件的触摸点列表
            </summary>
        </member>
        <member name="F:TTSDK.TTTouchEvent.timestamp">
            <summary>
            事件触发时的时间戳
            </summary>
        </member>
        <member name="T:TTSDK.TTInput.TouchEventCallback">
            <summary>
            触控事件回调
            </summary>
        </member>
        <member name="M:TTSDK.TTInput.OnTouchStart(TTSDK.TTInput.TouchEventCallback)">
            <summary>
            监听开始触摸事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TTInput.OnTouchMove(TTSDK.TTInput.TouchEventCallback)">
            <summary>
            监听触点移动事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TTInput.OnTouchEnd(TTSDK.TTInput.TouchEventCallback)">
            <summary>
            监听触摸结束事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TTInput.OnTouchCancel(TTSDK.TTInput.TouchEventCallback)">
            <summary>
            监听触点失效事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TTInput.OffTouchStart(TTSDK.TTInput.TouchEventCallback)">
            <summary>
            取消监听开始触摸事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TTInput.OffTouchMove(TTSDK.TTInput.TouchEventCallback)">
            <summary>
            取消监听触点移动事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TTInput.OffTouchEnd(TTSDK.TTInput.TouchEventCallback)">
            <summary>
            取消监听触摸结束事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TTInput.OffTouchCancel(TTSDK.TTInput.TouchEventCallback)">
            <summary>
            取消监听触点失效事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TTSDKInner.InitComplete">
            <summary>
            初始化整个链路完成后的异步回调
            <see cref="T:TTSDK.TTSDKInner.OnTTContainerEvent"/>
            </summary>
        </member>
        <member name="F:TTSDK.TTSDKInner._Inited">
            <summary>
            是否调用过 Init
            </summary>
        </member>
        <member name="F:TTSDK.TTSDKInner._initCompleted">
            <summary>
            是否已 InitComplete
            </summary>
        </member>
        <member name="F:TTSDK.TTSDKInner._initTsc">
            <summary>
            Init 异步任务结果，支持 Init 方法多次调用
            </summary>
        </member>
        <member name="P:TTSDK.TTSDKInner.s_IsInContainer">
            <summary>
            是否在 TTContainer真机环境下
            </summary>
        </member>
        <member name="P:TTSDK.TTSDKInner.EnableTTSDKDebugToast">
            <summary>
            是否显示调试Toast提示。当调用 TTSDK 相关接口后，获得函数执行状态（主要是失败状态）的反馈。
            设置为true则在调用 TTSDK 相关接口后，会自动弹出Toast提示。默认不显示。【建议只在调试状态下开启】
            </summary>
        </member>
        <member name="M:TTSDK.TTSDKInner.Init(TTSDK.OnTTContainerInitCallback)">
            <summary>
            TT_UnitySDK初始化函数
            </summary>
            <returns>error code :
            0 , 无错误
            1, tt unity sdk 版本不支持
            2，unity engine 版本不被支持</returns>
        </member>
        <member name="M:TTSDK.TTSDKInner.IsRunningInTTContainer">
            <summary>
            判断是否运行在 TTContainer
            </summary>
        </member>
        <member name="M:TTSDK.TTSDKInner.TTSDKRunInErrorEnvironment">
            <summary>
            TTSDK 运行在错误的环境中
            </summary>
        </member>
        <member name="M:TTSDK.TTSDKInner.ConvertLaunchEnum(TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            入口枚举 https://bytedance.feishu.cn/sheets/xChZZJiYfuC19iYtOv50yf#63rY26
            https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/framework/scene-value/
            </summary>
            <param name="sceneData"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTSDKInner.ConvertHostIdEnum(System.Int32)">
            <summary>
            Hostid 转换
            对应关系 https://bytedance.feishu.cn/sheets/shtcn959RKBOao1tFJAwEBTI1lf
            </summary>
            <returns>HostEnum</returns>
        </member>
        <member name="M:TTSDK.TTSDKInner.ConvertContainerRuntime(System.String)">
            <summary>
            从Java层传输来的数据和C#层的UC运行环境之间的转换
            </summary>
            <param name="ucRuntime"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTSDKInner.ConvertVersionType(System.String)">
            <summary>
            从Java层传输来的数据和C#层版本类型枚举做转换
            </summary>
            <param name="versionType"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTSDKInner.InvokeLaunchGameCallback(System.String,System.String)">
            <summary>
            当游戏第一次启动以及被其他游戏拉起，或者再次拉起时调用外部摄入的回调方法，并立即写入文件
            </summary>
            <param name="appId"></param>
            <param name="extraData"></param>
        </member>
        <member name="M:TTSDK.TTSDKInner.IsRecovery">
            <summary>
            本次启动是否由崩溃弹窗触发的重启，目前仅 IOS 可用
            </summary>
        </member>
        <member name="M:TTSDK.TTSDKInner.InitRecovery">
            <summary>
            StarkSDK初始化时更新本次容灾记录
            </summary>
        </member>
        <member name="T:TTSDK.TTSDKInner.RecoveryData">
            <summary>
            容灾时间戳文件。
            目前是为了解决容灾恢复后又发生正常重启时 schema 中仍带有容灾讯号的情况。
            </summary>
        </member>
        <member name="M:TTSDK.TTSDKInner.OnTTContainerEvent.UnPackNavigateInfo(System.String)">
            <summary>
            将Json解析成互跳信息对象
            </summary>
            <param name="jsonStr"></param>
            <returns></returns>
        </member>
        <member name="T:TTSDK.TTGroup">
            <summary>
            https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/open-capacity/im-group/groupchatintroduce
            </summary>
        </member>
        <member name="M:TTSDK.TTGroup.CheckGroupInfo(System.String,TTSDK.TTGroup.OnCheckGroupInfoSuccessCallback,TTSDK.TTGroup.OnCheckGroupInfoFailCallback,System.String,System.String)">
             <summary>
            查询用户通过小游戏平台创建的群的信息
             如游戏开发者在平台创建了群聊 ABC，那么游戏侧可以基于游戏开发者在这个游戏中的 openid，查询其在小游戏平台创建了哪些群，群的状态如何，做游戏内的加群逻辑优化
             </summary>
             <param name="openId">建群用户的 openid 必填</param>
             <param name="onCheckGroupInfoSuccessCallback">接口调用成功的回调函数 必填</param>
             <param name="onCheckGroupInfoFailCallback">接口调用失败的回调函数 必填</param>
             <param name="sessionFrom">会话来源 可空</param>
             <param name="extraInfo">附加信息 可空</param>
        </member>
        <member name="M:TTSDK.TTGroup.JoinGroup(System.String,System.Action{System.Boolean,System.String},System.String,System.String)">
            <summary>
            在平台创建群聊，获得 groupid 后，游戏内通过这个方法引导用户加入抖音群
            </summary>
            <param name="groupId">群 ID  必填</param>
            <param name="callback">接口调用成功/失败的回调函数  必填</param>
            <param name="sessionFrom">会话来源 可空</param>
            <param name="extraInfo">附加信息 可空</param>
        </member>
        <member name="T:TTSDK.RtcEngineManagerImpl">
            <summary>
            RTC模块
            </summary>
        </member>
        <member name="F:TTSDK.NetWorkType.NetworkWifi">
            <summary>
            wifi网络
            </summary>
        </member>
        <member name="F:TTSDK.NetWorkType.Network2G">
            <summary>
            2g网络
            </summary>
        </member>
        <member name="F:TTSDK.NetWorkType.Network3G">
            <summary>
            3g网络
            </summary>
        </member>
        <member name="F:TTSDK.NetWorkType.Network4G">
            <summary>
            4g网络
            </summary>
        </member>
        <member name="F:TTSDK.NetWorkType.None">
            <summary>
            无网络
            </summary>
        </member>
        <member name="F:TTSDK.NetWorkType.Unknown">
            <summary>
            不常见的网路类型
            </summary>
        </member>
        <member name="P:TTSDK.GetNetworkSuccessResult.NetworkType">
            <summary>
            网络类型
            </summary>
        </member>
        <member name="F:TTSDK.GetNetworkTypeParam.Success">
            <summary>
            接口调用成功的回调函数
            </summary>
        </member>
        <member name="F:TTSDK.GetNetworkTypeParam.Fail">
            <summary>
            接口调用失败的回调函数
            </summary>
        </member>
        <member name="F:TTSDK.GetNetworkTypeParam.Complete">
            <summary>
            接口调用结束的回调函数（调用成功、失败都会执行）
            </summary>
        </member>
        <member name="F:TTSDK.OnNetworkStatusChangeResult.IsConnected">
            <summary>
            当前是否有网络连接
            </summary>
        </member>
        <member name="P:TTSDK.OnNetworkStatusChangeResult.NetworkType">
            <summary>
            网络类型
            </summary>
        </member>
        <member name="F:TTSDK.OnNetworkWeakChangeResult.WeakNet">
            <summary>
            当前网络类型
            </summary>
        </member>
        <member name="P:TTSDK.OnNetworkWeakChangeResult.NetworkType">
            <summary>
            当前是否处于弱网状态
            </summary>
        </member>
        <member name="T:TTSDK.TTAdManagerImpl">
            <summary>
            广告管理模块，请求，播放激励视屏广告
            其他类型广告待实现
            </summary>
        </member>
        <member name="F:TTSDK.TTAdManagerImpl.s_AdIdNativeRewardDic">
            <summary>
            激励视频广告的暂存，for native 方式
            </summary>
        </member>
        <member name="M:TTSDK.TTAdManagerImpl.SetVideoAdCallBack(TTSDK.TTVideoAdCallback)">
            <summary>
            设置激励视频广告的回调。获取完整的回调信息，一般处理都可以通过ShowVideoAd完成，评估必要性
            </summary>
            <param name="callback">已播放时长.</param>
        </member>
        <member name="F:TTSDK.TTAdManagerImpl.m_VideoAdState">
            <summary>
            video ad state.  
            Usually only state of `VideoAdState.Loaded` means it is properly loaded.  
            </summary>
        </member>
        <member name="F:TTSDK.TTAdManagerImpl.m_VideoAdErrorCanBeAutoRetry">
            <summary>
            根据广告错误判断是否需要retry
            </summary>
        </member>
        <member name="F:TTSDK.TTAdManagerImpl.m_IsReady">
            <summary>
            广告是否加载完成
            </summary>
        </member>
        <member name="M:TTSDK.TTAdManagerImpl.InitVideoAd(System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:TTSDK.TTAdManagerImpl.StartLoadVideoAd">
            <summary>
            请求加载激励视频广告
            </summary>
        </member>
        <member name="M:TTSDK.TTAdManagerImpl.LoadVideoAdAsync">
            <summary>
            加载广告，并在某些错误情况下进行有限次重试
            </summary>
        </member>
        <member name="M:TTSDK.TTAdManagerImpl.LoadAndShowEcVideo">
            <summary>
            异步请求并显示广告
            </summary>
        </member>
        <member name="T:TTSDK.ShareMockMoudle">
            <summary>
            分享模块的mock层
            </summary>
        </member>
        <member name="T:TTSDK.RTCEngineManager">
            <summary>
            RTC连麦接口模块
            rtc 连麦 接口文档：https://bytedance.feishu.cn/docx/doxcnKNEvQGmLTwupIvWDSqh1nd
            </summary>
        </member>
        <member name="M:TTSDK.RTCEngineManager.GetRtcEngine(System.String)">
            <summary>
            需要白名单
            获取 RtcEngine 实例（包含音视频应用程序调用的主要方法的接口类实例），应当只调用一次, 重复调用返回上次创建的，destroy后则重新创建。
            </summary>
            <param name="appId">rtc服务使用的appId, 不是你的游戏的appid</param>        
        </member>
        <member name="M:TTSDK.RTCEngineManager.RtcEngine.Destroy(System.Action,System.Action{System.Int32,System.String})">
            <summary>
            销毁EtcEngine实例
            </summary>
            <param name="success">成功回调</param>
            <param name="fail">失败回调</param>
        </member>
        <member name="M:TTSDK.RTCEngineManager.RtcEngine.JoinChannel(System.String,System.String,System.String,System.Action,System.Action{System.Int32,System.String})">
            <summary>
            加入到通信房间
            </summary>
            <param name="channelId">加入语音频道的id</param>
            <param name="uid">加入语音频道用户的唯一标识，建议统一使用当前用户的 openId/匿名 openId</param>
            <param name="accessToken">加入房间的accessToken</param>
            <param name="success">成功回调</param>
            <param name="fail">失败回调</param>
        </member>
        <member name="M:TTSDK.RTCEngineManager.RtcEngine.LeaveChannel(System.Action,System.Action{System.Int32,System.String})">
            <summary>
            离开当前频道
            </summary>
            <param name="success">成功回调</param>
            <param name="fail">失败回调</param>
            <return>执行结果，true为成功，false为失败</return>
        </member>
        <member name="M:TTSDK.RTCEngineManager.RtcEngine.EnableLocalAudio(System.Action,System.Action{System.Int32,System.String})">
            <summary>
            开启内部音频采集。默认为关闭状态。
            </summary>
            <param name="success">成功回调</param>
            <param name="fail">失败回调</param>
            <return>执行结果，true为成功，false为失败</return>
        </member>
        <member name="M:TTSDK.RTCEngineManager.RtcEngine.DisableLocalAudio(System.Action,System.Action{System.Int32,System.String})">
            <summary>
            关闭本地麦克风推流
            </summary>
            <param name="success">成功回调</param>
            <param name="fail">失败回调</param>
            <return>执行结果，true为成功，false为失败</return>
        </member>
        <member name="M:TTSDK.RTCEngineManager.RtcEngine.MuteLocalAudioStream(System.Action,System.Action{System.Int32,System.String})">
            <summary>
            控制本地音频流的发送状态：不发送
            使用此方法后，房间中的其他用户会收到回调： OnUserMuteAudio
            </summary>
            <return>执行结果，true为成功，false为失败</return>
        </member>
        <member name="M:TTSDK.RTCEngineManager.RtcEngine.UnmuteLocalAudioStream(System.Action,System.Action{System.Int32,System.String})">
            <summary>
            控制本地音频流的发送状态：发送
            使用此方法后，房间中的其他用户会收到回调： OnUserMuteAudio
            </summary>
            <param name="success">成功回调</param>
            <param name="fail">失败回调</param>
            <return>执行结果，true为成功，false为失败</return>
        </member>
        <member name="M:TTSDK.RTCEngineManager.RtcEngine.MuteRemoteAudioStream(System.String,System.Action,System.Action{System.Int32,System.String})">
            <summary>
            针对当前设备，静音远端用户音频流
            </summary>
            <param name="uid">语音频道用户的唯一标识</param>
            <param name="success">成功回调</param>
            <param name="fail">失败回调</param>
            <return>执行结果，true为成功，false为失败</return>
        </member>
        <member name="M:TTSDK.RTCEngineManager.RtcEngine.UnmuteRemoteAudioStream(System.String,System.Action,System.Action{System.Int32,System.String})">
            <summary>
            针对当前设备，取消静音远端用户音频流
            </summary>
            <param name="uid">语音频道用户的唯一标识</param>
            <param name="success">成功回调</param>
            <param name="fail">失败回调</param>
            <return>执行结果，true为成功，false为失败</return>
        </member>
        <member name="M:TTSDK.RTCEngineManager.RtcEngine.MuteAllRemoteAudioStream(System.Action,System.Action{System.Int32,System.String})">
            <summary>
            针对当前设备，静音所有远端用户音频流
            </summary>
            <param name="success">成功回调</param>
            <param name="fail">失败回调</param>
            <return>执行结果，true为成功，false为失败</return>
        </member>
        <member name="M:TTSDK.RTCEngineManager.RtcEngine.UnmuteAllRemoteAudioStream(System.Action,System.Action{System.Int32,System.String})">
            <summary>
            针对当前设备，取消静音所有远端用户音频流
            </summary>
            <param name="success">成功回调</param>
            <param name="fail">失败回调</param>
            <return>执行结果，true为成功，false为失败</return>
        </member>
        <member name="M:TTSDK.RTCEngineManager.RtcEngine.AdjustPlaybackSignalVolume(System.Int32,System.Action,System.Action{System.Int32,System.String})">
            <summary>
            调节播放音量（该方法只能加入房间成功后调用才生效）
            </summary>
            <param name="volume">音量可在0~400范围内进行调节
             - 0   : 静音
            - 100 : 原始音量
            - 400 : 最大可为原始音量的 2 倍(自带溢出保护)</param>
            <param name="success">成功回调</param>
            <param name="fail">失败回调</param>
            <return>执行结果，true为成功，false为失败</return>
        </member>
        <member name="M:TTSDK.RTCEngineManager.RtcEngine.AdjustRecordingSignalVolume(System.Int32,System.Action,System.Action{System.Int32,System.String})">
            <summary>
            调节录音音量，采集麦克风的音量（该方法只能加入房间成功后调用才生效）
            </summary>
            <param name="volume">音量可在0~400范围内进行调节
             - 0   : 静音
            - 100 : 原始音量
            - 400 : 最大可为原始音量的 2 倍(自带溢出保护)</param>
            <param name="success">成功回调</param>
            <param name="fail">失败回调</param>
            <return>执行结果，true为成功，false为失败</return>
        </member>
        <member name="M:TTSDK.RTCEngineManager.RtcEngine.EnableAudioVolumeIndication(System.Int32,System.Action,System.Action{System.Int32,System.String})">
            <summary>
            该方法启用说话者音量提示。调用该方法后，将收到 audioVolumeIndication 事件回调。该方法只有在joinChannel之后才生效
            </summary>
            <param name="interval">收到音量提示回调的时间间隔
             + ≤ 0：禁用音量提示功能。
             + > 0：启用音量提示功能，并设置收到音量提示回调的时间间隔。单位为毫秒。
            建议设置为大于等于 200 毫秒；小于 10 毫秒时，行为未定义。</param>
            <param name="success">成功回调</param>
            <param name="fail">失败回调</param>
            <return>执行结果，true为成功，false为失败</return>
        </member>
        <member name="M:TTSDK.RTCEngineManager.RtcEngine.RemoveAllListeners">
            <summary>
            取消 RtcEngine,on 监听的所有event类型事件。
            </summary>
        </member>
        <member name="T:TTSDK.RTCEngineManager.RtcEngine.RtcEventMap">
            <summary>
            监听列表
            </summary>
        </member>
        <member name="F:TTSDK.RTCEngineManager.RtcEngine.RtcEventMap.JOIN_CHANNEL_SUCCESS">
            <summary>
            首次加入房间成功。用户手动调用 JoinRoom，收到加入成功。
            加入房间失败没有单独的事件，需要通过onerror 判断
            </summary>
        </member>
        <member name="F:TTSDK.RTCEngineManager.RtcEngine.RtcEventMap.REJOIN_CHANNEL_SUCCESS">
            <summary>
            重新加入房间。用户网络较差，失去与服务器的连接，进行重连时收到加入成功。
            </summary>
        </member>
        <member name="F:TTSDK.RTCEngineManager.RtcEngine.RtcEventMap.NETWORK_QUALITY">
            <summary>
            当收到网络质量报告时回调该事件
            </summary>
        </member>
        <member name="F:TTSDK.RTCEngineManager.RtcEngine.RtcEventMap.USER_JOINED">
            <summary>
            远端可见用户加入房间的回调。
             远端可见用户断网后重新连入房间时，房间内其他用户将收到该事件。
            新进房用户会收到进房前已在房内的可见用户的进房回调通知。
            </summary>
        </member>
        <member name="F:TTSDK.RTCEngineManager.RtcEngine.RtcEventMap.USER_OFFLINE">
            <summary>
            远端可见用户离开房间，包含断网情况
            </summary>
        </member>
        <member name="F:TTSDK.RTCEngineManager.RtcEngine.RtcEventMap.CONNECTION_INTERRUPTED">
            <summary>
             rtc连接断开。和connectionLost类似，不过该方法是断开后立即触发
            </summary>
        </member>
        <member name="F:TTSDK.RTCEngineManager.RtcEngine.RtcEventMap.CONNECTION_LOST">
            <summary>
             网络连接断开超过 10 秒，仍然会继续重连。该事件和上面事件在类似，不过是超过10s 后触发
            </summary>
        </member>
        <member name="F:TTSDK.RTCEngineManager.RtcEngine.RtcEventMap.FIRST_LOCAL_AUDIO_FRAME">
            <summary>
            当收到本地第一帧音频的时候上报该事件
            </summary>
        </member>
        <member name="F:TTSDK.RTCEngineManager.RtcEngine.RtcEventMap.FIRST_REMOTE_AUDIO_FRAME">
            <summary>
            接收到来自远端某音频流的第一帧时，收到该回调。 用户刚收到房间内每一个用户音频流时，都会收到该回调。
            </summary>
        </member>
        <member name="F:TTSDK.RTCEngineManager.RtcEngine.RtcEventMap.USER_MUTE_AUDIO">
            <summary>
            远端用户调用 muteLocalAudioStream
            改变本地音频推流状态时，房间内其他用户会收到此回调。
            @param muted 是否被静音
            true: 远端用户禁止推送音频数据；
            false: 远端用户开启推送音数据
            </summary>
        </member>
        <member name="F:TTSDK.RTCEngineManager.RtcEngine.RtcEventMap.USER_ENABLE_LOCAL_AUDIO">
            <summary>
            远端用户enableLocalAudio/disableLocalAudio 开启/关闭音频设备采集时，房间内其他人会收到这个回调。
            userMuteAudio 和 userEnableLocalAudio 分别代表开/关 本地麦克风采集 和开/关 推送本地数据。
            之所以有这样的区分，是因为 开/关 本地麦克风采集成本 的远大于 开/关 推送本地数据。因为麦克风采集需要调用系统接口，而 开/关推送数据只是标识位的改变。
            enabled  用户是否开启了音频设备采集
            true: 远端用户禁止推送音频数据；
            false: 远端用户开启推送音数据
            </summary>
        </member>
        <member name="F:TTSDK.RTCEngineManager.RtcEngine.RtcEventMap.AUDIO_VOLUME_INDICATION">
            <summary>
            当收到音量信息时回调该事件,需要调用 enableAudioVolumeIndication 后才可以
            对于本地用户：只要进行本地音频采集，回调内就会包含本地音频流的音量信息。
             对于远端用户：本地必须订阅某远端用户的音频流，回调内才会包含其发送的音频流的音量信息。
            </summary>
        </member>
        <member name="F:TTSDK.RTCEngineManager.RtcEngine.RtcEventMap.WARMING">
            <summary>
            当内部发生警告信息时回调该事件
            </summary>
        </member>
        <member name="F:TTSDK.RTCEngineManager.RtcEngine.RtcEventMap.ERROR">
            <summary>
            当内部发生不可逆转测错误时回调,比如加入房间失败
            </summary>
        </member>
        <member name="T:TTSDK.RTCEngineManager.RtcEngine.OnJoinChannelSuccessEventHandler">
            <summary>
            首次加入房间成功。用户手动调用 JoinRoom，收到加入成功。
            加入房间失败没有单独的事件，需要通过onerror 判断
            </summary>
            <param name="elapsed">从调用joinChannel开始到加入房间成功所经历的时间（毫秒单位）</param>
        </member>
        <member name="T:TTSDK.RTCEngineManager.RtcEngine.OnRejoinChannelSuccessEventHandler">
            <summary>
            重新加入房间。用户网络较差，失去与服务器的连接，进行重连时收到加入成功。
            </summary>
            <param name="elapsed">从用户掉线掉重新加入房间成功经历的时间（毫秒单位）</param>
        </member>
        <member name="T:TTSDK.RTCEngineManager.RtcEngine.OnNetworkQualityEventHandler">
            <summary>
            当收到网络质量报告时回调该事件
            </summary>
            <param name="uid">远端通话用户标识</param>
            <param name="txQuality">所属用户的媒体流上行网络质量</param>
             <param name="rxQuality">所属用户的媒体流下行网络质</param>
        </member>
        <member name="T:TTSDK.RTCEngineManager.RtcEngine.OnUserJoinedEventHandler">
            <summary>
            远端可见用户加入房间的回调。
            远端可见用户断网后重新连入房间时，房间内其他用户将收到该事件。
            新进房用户会收到进房前已在房内的可见用户的进房回调通知。
            </summary>
            <param name="uid">远端通话用户标识</param>
            <param name="elapsed">从加入房间到收到该事件经历的时间（毫秒单位）</param>
        </member>
        <member name="T:TTSDK.RTCEngineManager.RtcEngine.OnUserOfflineEventHandler">
            <summary>
            远端可见用户离开房间，包含断网情况。
            </summary>
            <param name="uid">离线用户的标识</param>
            <param name="reason">用户离线的原因 0, quit normal , 1, user lost</param>
        </member>
        <member name="T:TTSDK.RTCEngineManager.RtcEngine.OnConnectionInterruptedEventHandler">
            <summary>
             rtc连接断开。和connectionLost类似，不过该方法是断开后立即触发
            </summary>
        </member>
        <member name="T:TTSDK.RTCEngineManager.RtcEngine.OnConnectionLostEventHandler">
            <summary>
            网络连接断开超过 10 秒，仍然会继续重连。该事件和上面事件在类似，不过是超过10s 后触发
            </summary>
        </member>
        <member name="T:TTSDK.RTCEngineManager.RtcEngine.OnFirstLocalAudioFrameEventHandler">
            <summary>
            当收到本地第一帧音频的时候上报该事件
            </summary>
            <param name="elapsed">返回StreamIndex: 0-视频流；1-屏幕流</param>
        </member>
        <member name="T:TTSDK.RTCEngineManager.RtcEngine.OnFirstRemoteAudioFrameEventHandler">
            <summary>
            当收到本地第一帧音频的时候上报该事件
            </summary>
            <param name="uid">远端通话用户标识</param>
            <param name="elapsed">返回StreamIndex: 0-视频流；1-屏幕流</param>
        </member>
        <member name="T:TTSDK.RTCEngineManager.RtcEngine.OnUserMuteAudioEventHandler">
            <summary>
            远端用户调用 muteLocalAudioStream, 改变本地音频推流状态时，房间内其他用户会收到此回调。
            </summary>
            <param name="uid">远端通话用户标识</param>
            <param name="muted">是否被静音 true: 远端用户禁止推送音频数据  false: 远端用户开启推送音数据</param>
        </member>
        <member name="T:TTSDK.RTCEngineManager.RtcEngine.OnUserEnableLocalAudioEventHandler">
            <summary>
            远端用户enableLocalAudio/disableLocalAudio 开启/关闭音频设备采集时，房间内其他人会收到这个回调。
            userMuteAudio 和 userEnableLocalAudio 分别代表开/关 本地麦克风采集 和开/关 推送本地数据。
            之所以有这样的区分，是因为 开/关 本地麦克风采集成本 的远大于 开/关 推送本地数据。因为麦克风采集需要调用系统接口，而 开/关推送数据只是标识位的改变。
            </summary>
            <param name="uid">远端通话用户标识</param>
            <param name="enabled">用户是否开启了音频设备采集 true: 远端用户允许开启音频设备 false: 远端用户禁止开启音频设备</param>
        </member>
        <member name="T:TTSDK.RTCEngineManager.RtcEngine.OnAudioVolumeIndicationEventHandler">
            <summary>
            当收到音量信息时回调该事件,需要调用 enableAudioVolumeIndication 后才可以。
            对于本地用户：只要进行本地音频采集，回调内就会包含本地音频流的音量信息。
            对于远端用户：本地必须订阅某远端用户的音频流，回调内才会包含其发送的音频流的音量信息。
            </summary>
            <param name="uid">用户id</param>
            <param name="volume">音量大小，范围[0,255]</param>
            <param name="speakerNum">音频源数量</param>
        </member>
        <member name="T:TTSDK.RTCEngineManager.RtcEngine.OnWarningEventHandler">
            <summary>
            当内部发生警告信息时回调该事件
            </summary>
            <param name="warnCode">警告码，详情查看 https://bytedance.feishu.cn/docx/doxcnKNEvQGmLTwupIvWDSqh1nd </param>
        </member>
        <member name="T:TTSDK.RTCEngineManager.RtcEngine.OnErrorEventHandler">
            <summary>
            当内部发生不可逆转测错误时回调,比如加入房间失败
            </summary>
            <param name="errCode">错误码，详情查看 https://bytedance.feishu.cn/docx/doxcnKNEvQGmLTwupIvWDSqh1nd</param>
        </member>
        <member name="E:TTSDK.RTCEngineManager.RtcEngine.OnJoinChannelSuccessEvent">
            首次加入房间成功。用户手动调用 JoinRoom，收到加入成功。
        </member>
        <member name="E:TTSDK.RTCEngineManager.RtcEngine.OnRejoinChannelSuccessEvent">
            重新加入房间。用户网络较差，失去与服务器的连接，进行重连时收到加入成功。
        </member>
        <member name="E:TTSDK.RTCEngineManager.RtcEngine.OnFirstLocalAudioFrameEvent">
            当收到本地第一帧音频的时候上报该事件
        </member>
        <member name="E:TTSDK.RTCEngineManager.RtcEngine.OnFirstRemoteAudioFrameEvent">
            当收到本地第一帧音频的时候上报该事件
        </member>
        <member name="E:TTSDK.RTCEngineManager.RtcEngine.OnUserMuteAudioEvent">
            远端用户调用 muteLocalAudioStream, 改变本地音频推流状态时，房间内其他用户会收到此回调。
        </member>
        <member name="E:TTSDK.RTCEngineManager.RtcEngine.OnUserEnableLocalAudioEvent">
            远端用户enableLocalAudio/disableLocalAudio 开启/关闭音频设备采集时，房间内其他人会收到这个回调。
        </member>
        <member name="E:TTSDK.RTCEngineManager.RtcEngine.OnUserJoinedEvent">
            远端可见用户加入房间的回调
        </member>
        <member name="E:TTSDK.RTCEngineManager.RtcEngine.OnUserOfflineEvent">
            远端可见用户离开房间，包含断网情况。
        </member>
        <member name="E:TTSDK.RTCEngineManager.RtcEngine.OnAudioVolumeIndicationEvent">
            远端用户enableLocalAudio/disableLocalAudio 开启/关闭音频设备采集时，房间内其他人会收到这个回调。
        </member>
        <member name="E:TTSDK.RTCEngineManager.RtcEngine.OnConnectionInterruptedEvent">
             rtc连接断开。和connectionLost类似，不过该方法是断开后立即触发
        </member>
        <member name="E:TTSDK.RTCEngineManager.RtcEngine.OnConnectionLostEvent">
            网络连接断开超过 10 秒，仍然会继续重连。该事件和上面事件在类似，不过是超过10s 后触发
        </member>
        <member name="E:TTSDK.RTCEngineManager.RtcEngine.OnNetworkQualityEvent">
            当收到音量信息时回调该事件,需要调用 enableAudioVolumeIndication 后才可以。
        </member>
        <member name="E:TTSDK.RTCEngineManager.RtcEngine.OnWarningEvent">
            当内部发生警告信息时回调该事件
        </member>
        <member name="E:TTSDK.RTCEngineManager.RtcEngine.OnErrorEvent">
            当内部发生不可逆转测错误时回调,比如加入房间失败
        </member>
        <member name="M:TTSDK.CloudDBUtil.GenServerDateJson(System.Int32)">
            <summary>
            返回一个 ServerDate 对象, 用于表示服务端时间, 可以用于插入数据或者 查询的条件判断
            </summary>
            <param name="offsetTimeMil"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDB.GenDBCollection(System.String,System.String)">
            <summary>
            创建 DBCollection 对象
            </summary>
            <param name="evnId"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDB.GenDbCmd(System.String)">
             <summary>
            
             创建 DbCmd 对象
             </summary>
             <param name="name"></param>
             <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDB.GenDbLogicCmd">
            <summary>
            返回一个 逻辑 CMD  可以调用 AND OR NOR相关方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBCollection.Doc(System.String)">
            <summary>
            基于 docid 获取单个文档
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBCollection.Add(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.DouyinCloud.DBResponse},System.Action{TTSDK.DouyinCloud.DBResponse})">
            <summary>
            添加数据, 当前进支持单个添加
            </summary>
            <param name="dataMap"></param>
            <param name="success"></param>
            <param name="fail"></param>
            
        </member>
        <member name="M:TTSDK.CloudDBQuery.Where(System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
            
             where 条件查询, 录入 a=1,  a.b=1 
             </summary>
             <param name="query"></param>
             <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBQuery.AddWhereCmd(TTSDK.CloudDBCommand)">
            <summary>
            多种条件同时查询, 具体支持请看 CloudDBCommand
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBQuery.Field(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            设置查询结果返回的字段,  a=true  a.b=true
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBQuery.Limit(System.Int32)">
            <summary>
            设置查询数据量限制
            </summary>
            <param name="limitNum"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBQuery.Skip(System.Int32)">
            <summary>
            设置查询跳过的数量
            </summary>
            <param name="skipCount"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBQuery.OrderBy(System.String,TTSDK.OrderDirection)">
            <summary>
            设置查询的排序方式
            </summary>
            <param name="field"></param>
            <param name="orderDirection"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBQuery.Get(System.Action{TTSDK.DouyinCloud.DBResponse},System.Action{TTSDK.DouyinCloud.DBResponse})">
            <summary>
            获取查询结果
            </summary>
            <param name="success"></param>
            <param name="fail"></param>
        </member>
        <member name="M:TTSDK.CloudDBQuery.Count(System.Action{TTSDK.DouyinCloud.DBResponse},System.Action{TTSDK.DouyinCloud.DBResponse})">
            <summary>
            获取查询结果 使用 count 语句
            </summary>
            <param name="success"></param>
            <param name="fail"></param>
        </member>
        <member name="M:TTSDK.CloudDBQuery.Update(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.DouyinCloud.DBResponse},System.Action{TTSDK.DouyinCloud.DBResponse})">
             <summary>
            
             基于设置的条件 更新数据
             </summary>
             <param name="dataMap"></param>
             <param name="success"></param>
             <param name="fail"></param>
        </member>
        <member name="M:TTSDK.CloudDBQuery.Remove(System.Action{TTSDK.DouyinCloud.DBResponse},System.Action{TTSDK.DouyinCloud.DBResponse})">
            <summary>
            基于设置的条件 删除数据
            </summary>
            <param name="success"></param>
            <param name="fail"></param>
        </member>
        <member name="M:TTSDK.CloudDBCommand.And(System.Collections.Generic.List{TTSDK.CloudDBCommand})">
            <summary>
            数据库操作符 And
            </summary>
            <param name="listData"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBCommand.Or(System.Collections.Generic.List{TTSDK.CloudDBCommand})">
            <summary>
            数据库操作符 Or
            </summary>
            <param name="listData"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBCommand.Nor(System.Collections.Generic.List{TTSDK.CloudDBCommand})">
            <summary>
            数据库操作 Not or
            </summary>
            <param name="listData"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBCommand.Eq(System.Object)">
            <summary>
            数据库操作符 = 
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBCommand.Neq(System.Object)">
            <summary>
            数据库操作符 !=
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBCommand.Lt(System.Object)">
            <summary>
            数据库操作符 &lt;
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBCommand.Lte(System.Object)">
            <summary>
            数据库操作符 &lt;=
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBCommand.Gt(System.Object)">
            <summary>
            数据库操作符 >
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBCommand.Gte(System.Object)">
            <summary>
            数据库操作符 >= 
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBCommand.In(System.Collections.Generic.List{System.Object})">
            <summary>
            数据库操作符 in
            </summary>
            <param name="listData"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBCommand.NIn(System.Collections.Generic.List{System.Object})">
            <summary>
            数据库操作符 not in
            </summary>
            <param name="listData"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CloudDBDocument.Get(System.Action{TTSDK.DouyinCloud.DBResponse},System.Action{TTSDK.DouyinCloud.DBResponse})">
            <summary>
            获取抖音云数据单个文档数据
            </summary>
            <param name="success"></param>
            <param name="fail"></param>
        </member>
        <member name="M:TTSDK.CloudDBDocument.Update(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.DouyinCloud.DBResponse},System.Action{TTSDK.DouyinCloud.DBResponse})">
             <summary>
            
             更新单个云文档数据
             </summary>
             <param name="dataJson"></param>
             <param name="success"></param>
             <param name="fail"></param>
        </member>
        <member name="M:TTSDK.CloudDBDocument.Set(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.DouyinCloud.DBResponse},System.Action{TTSDK.DouyinCloud.DBResponse})">
            <summary>
            设置单个云文档数据, 仅会更新已有字段
            </summary>
            <param name="dataJson"></param>
            <param name="success"></param>
            <param name="fail"></param>
        </member>
        <member name="M:TTSDK.CloudDBDocument.Remove(System.Action{TTSDK.DouyinCloud.DBResponse},System.Action{TTSDK.DouyinCloud.DBResponse})">
             <summary>
            
             删除单个云文档数据
             </summary>
             <param name="success"></param>
             <param name="fail"></param>
        </member>
        <member name="T:TTSDK.TTRequestImpl">
            <summary>
            账号模块
            </summary>
        </member>
        <member name="F:TTSDK.TTLogConstConfig.LogConfig.DebounceTime">
            <summary>
            触发flush等待时间
            </summary>
        </member>
        <member name="F:TTSDK.TTLogConstConfig.LogConfig.MaxLen">
            <summary>
            单条日志最大长度
            </summary>
        </member>
        <member name="F:TTSDK.TTLogConstConfig.LogConfig.MaxTotalLen">
            <summary>
            总日志最大长度
            </summary>
        </member>
        <member name="F:TTSDK.TTLogConstConfig.LogConfig.MaxCallSpeed">
            <summary>
            最大调用频率，单位为次/秒
            </summary>
        </member>
        <member name="F:TTSDK.TTLogConstConfig.LogConfig.LoopDetectionThreshold">
            <summary>
            循环检测阈值
            </summary>
        </member>
        <member name="F:TTSDK.TTLogConstConfig.FeedbackLogConfig.FeedbackLogAvailable">
            <summary>
            需要记录的调用方法
            </summary>
        </member>
        <member name="F:TTSDK.TTLogConstConfig.RealtimeLogConfig.MaxTagCnt">
            <summary>
            最大tag数量
            </summary>
        </member>
        <member name="F:TTSDK.TTLogConstConfig.RealtimeLogConfig.MaxTagLen">
            <summary>
            单条tag最大长度
            </summary>
        </member>
        <member name="T:TTSDK.TTBannerAdMock">
            <summary>
            Banner广告的Mock模块
            </summary>
        </member>
        <member name="T:TTSDK.TTInterstitialAdMock">
            <summary>
            插屏广告的Mock模块
            </summary>
        </member>
        <member name="T:TTSDK.AdMockMoudle">
            <summary>
            广告模块的mock层
            </summary>
        </member>
        <member name="T:TTSDK.TTRPC">
            <summary>
            网络调用的封装
            </summary>
        </member>
        <member name="T:TTSDK.TTRPC.OnRPCSuccess">
            <summary>
            RPC调用成功时的回调，返回结果
            </summary>
            <param name="result">返回的结果</param>
        </member>
        <member name="T:TTSDK.TTRPC.OnRPCFail">
            <summary>
            RPC调用失败时的回调，返回错误码
            </summary>
            <param name="errorCode">错误码</param>
        </member>
        <member name="M:TTSDK.TTRPC.Post_NoAuth(System.String,System.String,System.String,TTSDK.TTRPC.OnRPCSuccess,TTSDK.TTRPC.OnRPCFail)">
            <summary>
            非鉴权的Post方法进行一次RPC
            </summary>
            <param name="host">域名</param>
            <param name="service">服务</param>
            <param name="data">数据</param>
            <param name="onRPCSuccess">成功回调</param>
            <param name="onRPCFail">失败回调</param>
        </member>
        <member name="P:TTSDK.TT.InContainerEnv">
            <summary>
            是否在 TT Container 真机环境下
            </summary>
        </member>
        <member name="M:TTSDK.TT.InitSDK(TTSDK.OnTTContainerInitCallback)">
            <summary>
            TT Unity SDK初始化函数
            </summary>
            <param name="callback">初始化完成的回调</param>
            <returns>error code :
            0 , 无错误
            1, TT unity sdk 版本不支持
            2，unity engine 版本不被支持</returns>
        </member>
        <member name="P:TTSDK.TT.TTSDKVersion">
            <summary>
            TTSDK 对外发布版本号
            </summary>
        </member>
        <member name="P:TTSDK.TT.GameVersion">
            <summary>
            游戏版本号，通过该接口替换Application.version获得正确的版本号信息
            </summary>
        </member>
        <member name="P:TTSDK.TT.GamePublishVersion">
            <summary>
            游戏发布版本号，发布版本时发布工具中指定的版本号
            </summary>
        </member>
        <member name="M:TTSDK.TT.GetContainerVersion">
            <summary>
            获取端上容器 container sdk 版本号 like "1.0.0"
            </summary>
        </member>
        <member name="M:TTSDK.TT.GetLaunchOptionsSync">
            <summary>
            获取小程序启动时的参数，里面的参数可能为空，使用时需判空; 可以在 TTSDKInner.init()之后调用，确保得到非空值
            </summary>
        </member>
        <member name="P:TTSDK.TT.EnableTTSDKDebugToast">
            <summary>
            是否显示调试Toast提示。当调用 TTSDK 相关接口后，获得函数执行状态（主要是失败状态）的反馈。
            设置为true则在调用 TTSDK 相关接口后，会自动弹出Toast提示。默认不显示。【建议只在调试状态下开启】
            </summary>
        </member>
        <member name="M:TTSDK.TT.RegisterCommandEvent(System.Action{System.String,System.Collections.Generic.IList{System.String}})">
            <summary>
            接入sdk的debugpanel面板，注册一些debug命令的回调函数
            </summary>
        </member>
        <member name="M:TTSDK.TT.OpenCustomerServicePage(System.Action{System.Boolean})">
            <summary>
            打开客服聊天页
            </summary>
            <param name="csCallback"> 打开客服聊天页回调，参数为是否成功，true表示成功，false表示失败 </param>
        </member>
        <member name="M:TTSDK.TT.OpenCustomerServiceConversation(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{System.Boolean})">
            <summary>
            是平台提供的小游戏客服能力
            </summary>
            <param name="param">type:(1 ：小 6 客服 2 :  抖音IM 客服（仅支持抖音）)sessionFrom:(保留字段，暂时可以不填),例如{"type":1,"sessionFrom":"xxx"}</param>
            <param name="callback">打开客服页面成功或者失败回调</param>
        </member>
        <member name="M:TTSDK.TT.OpenAwemeCustomerService(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action,System.Action{System.Int32,System.String})">
            <summary>
            通过客服页面发起支付
            接口说明：https://bytedance.feishu.cn/docx/doxcnUkE86LjFTFdTJREIEGT9bb
            </summary>
            <param name="options"> JsonData内容如下 
            buyQuantity     int  必填   金币购买数量，金币数量必须满足：金币数量*金币单价 = 限定价格等级（详见下方 buyQuantity 限制说明。开发者可以在字节小游戏平台的“支付”tab 设置游戏币单价）
            customId        string  必填   游戏开发者自定义的唯一订单号，订单支付成功后通过服务端支付结果回调回传
            currencyType    string  非必填 币种, 目前仅为"CNY"
            zoneId	        string  非必填 游戏服务区 id，默认值为1，开发者自定义。游戏不分大区则默认填写"1"。如果应用支持多角色，则角色 ID 接在分区 ID 后，用"_"连接
            extraInfo	    string  非必填 游戏开发者自定义的其他信息，订单支付成功后通过服务端支付结果回调回传。字符串长度最大不能超过 256。（强烈建议传入）
            goodType        int  非必填（道具直购场景必填） 默认游戏币。 游戏币：0 | 1，道具直购：2。若goodType为道具直购场景，不可传buyQuantity
            orderAmount     int  非必填（道具直购场景必填） 道具价格，人民币，单位分
            goodName        string  非必填 道具名称
            goodsId         string  非必填 （礼包场景必填）礼包Id
            </param>
            <param name="success"> 打开客服页成功 </param>
            <param name="failed"> 打开客服聊天页回调，参数为是否成功，true表示成功，false表示失败 </param>
        </member>
        <member name="M:TTSDK.TT.GetSystemInfo">
            <summary>
             获取系统信息。类似小程序开发平台 tt.getSystemInfoSync 接口返回值。
             https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/api/device/system-information/tt-get-system-info-sync/
            </summary>
            <returns>SystemInfo 当前系统相关信息</returns>
        </member>
        <member name="M:TTSDK.TT.ReportAnalytics``1(System.String,System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            自定义分析数据上报接口，调用后，会将数据上报到小程序开发者平台，开发者可以在小程序开发者平台中查看上报数据。使用前，需要在小程序管理后台事件中新建事件，配置好事件名与字段。
            可参考文档 https://microapp.bytedance.com/docs/zh-CN/mini-app/data/advanced-analysis/events
            </summary>
            <param name="eventName"> 事件名 </param>
            <param name="param"> 上报的数据，默认为null key	: 配置中的字段名.  value(number|string|boolean) : 上报的数据</param>
        </member>
        <member name="M:TTSDK.TT.SendToTAQ(TTSDK.UNBridgeLib.LitJson.JsonData)">
             <summary>
            
             </summary>
        </member>
        <member name="M:TTSDK.TT.CreateBannerAd(System.String,TTSDK.TTBannerStyle,System.Int32,System.Action{System.Int32,System.String},System.Action,System.Action{System.Int32,System.Int32},System.Action)">
            <summary>
            创建Banner广告，返回 BannerAd 实例。支持多实例，可以在一个页面下展示多个。也可以分页面展示
            竖屏情况下，Banner广告接受的宽度范围是 0.8*屏幕宽度，1.0*屏幕宽度。
            横屏情况下，Banner广告接受的最小宽度是 128，最大宽度是 208。
            开发者可以在这之间自由指定广告宽度。广告组件会自动等比例缩放素材。
            创建Banner示例后，要主动调用show来进行展示
            错误码由sdk传出，原因参考
            https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/ads/tt-create-banner-ad
            </summary>
            <param name="bannerAdId">	banner广告位的adid </param>
            <param name="style"> 样式："style":{"top":0, "left":0, "width":320}} width 在竖屏下会被限制在 [0.8*ScreenWidth,1.0*ScreenWidth]，横屏下会被限制在[128, 208]</param>
            <param name="adIntervals">	广告自动刷新的间隔时间，单位为秒，参数值必须大于等于 30（该参数不传入时 Banner 广告不会自动刷新）.</param>
            <param name="errCallback"> 广告错误回调，参数表明错误码和错误描述.</param>
            <param name="loadedCallback"> 广告加载回调.</param>
            <param name="resizeCallback"> 广告样式改变回调，第一个参数是width.第二个参数是height.</param>
            <param name="closeCallback">广告关闭回调，仅在WebGL有效</param>
        </member>
        <member name="M:TTSDK.TT.CreateBannerAd(TTSDK.CreateBannerAdParam)">
            <summary>
            创建Banner广告，返回 BannerAd 实例。支持多实例，可以在一个页面下展示多个。也可以分页面展示
            竖屏情况下，Banner广告接受的宽度范围是 0.8*屏幕宽度，1.0*屏幕宽度。
            横屏情况下，Banner广告接受的最小宽度是 128，最大宽度是 208。
            开发者可以在这之间自由指定广告宽度。广告组件会自动等比例缩放素材。
            创建Banner示例后，要主动调用show来进行展示
            错误码由sdk传出，原因参考
            https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/ads/tt-create-banner-ad
            </summary>
            <param name="param">创建Banner广告所需参数</param>
        </member>
        <member name="M:TTSDK.TT.CreateInterstitialAd(System.String,System.Action{System.Int32,System.String},System.Action,System.Action)">
            <summary>
            创建并播放插屏广告，在广告模块启动15s内不允许展示插屏广告，在任何地方调用API.GetTTAdManager，就会启动广告模块
            两个插屏广告展示间隔不能少于30s
            插屏广告支持多实例。简单回调设置，插屏广告完成和错误的回调函数
            插屏广告实例只支持展示一次，出现加载错误，或 展示成功，点击关闭按钮或视频广告外的其他地方，广告实例都会自动销毁。下一次需再次创建。
            提供接口可以手动销毁
            错误码由sdk传出，原因参考
            https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/ads/tt-create-interstitial-ad
            </summary>
            <param name="interstitialAdId">	插屏广告位的adid </param>
            <param name="errCallback">广告视频错误回调，参数含义 errCode, errMsg 表明错误码和错误描述.</param>
            <param name="closeCallback">广告视频关闭回调.</param>
            <param name="loadedCallback">广告加载回调.</param>
        </member>
        <member name="M:TTSDK.TT.CreateInterstitialAd(TTSDK.CreateInterstitialAdParam)">
            <summary>
            创建并播放插屏广告，在广告模块启动15s内不允许展示插屏广告
            两个插屏广告展示间隔不能少于30s
            插屏广告支持多实例。简单回调设置，插屏广告完成和错误的回调函数
            插屏广告实例只支持展示一次，出现加载错误，或 展示成功，点击关闭按钮或视频广告外的其他地方，广告实例都会自动销毁。下一次需再次创建。
            提供接口可以手动销毁
            错误码由sdk传出，原因参考
            https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/ads/tt-create-interstitial-ad
            </summary>
            <param name="param">创建放插屏广告所需参数</param>
        </member>
        <member name="M:TTSDK.TT.CreateRewardedVideoAd(System.String,System.Action{System.Boolean,System.Int32},System.Action{System.Int32,System.String},System.Boolean,System.String[],System.Int32,System.Boolean)">
            <summary>
            创建激励视频广告，在广告未加载时会发起异步请求，弱网情况下会进行重试。失败会调用errCallback
            激励视频广告只支持一个实例，申请多个激励视频广告位是无效的
            简单回调设置，激励视频完成和错误的回调函数
            错误码由sdk传出，原因参考
            https://bytedance.feishu.cn/docs/doccn1lAbZzMOqI5ueq1gCyPdcg#
            https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/open-capacity/ads/ads-error-code-description/
            https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/api/open-interface/ads/tt-create-interstitial-ad
            1004 可能是由于广告请求被限制了次数，需要跟广告投放沟通
            </summary>
            <param name="videoAdId">广告aid.</param>
            <param name="closeCallback">视频广告关闭回调，参数含义 IsComplete,表明广告是否播放完成.</param>
            <param name="errCallback">视频广告错误回调，参数含义 errCode, errMsg 表明错误码和错误描述.</param>
            再得添加 https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/open-capacity/ads/rewardagainintroduce
            <param name="multiton">是否开启再得广告模式（只支持安卓系统的抖音和抖音极速版）</param>
            <param name="multitonRewardMsg">再得广告的奖励文案，玩家每看完一个广告都会展示，如【再看1个获得xx】xx就multitonRewardMsg中的文案，按顺序依次展示，单个文案最大长度为 7,multiton为true时必填</param>
            <param name="multitonRewardTime">额外观看广告的次数，合法的数据范围为1-4，multiton为true时必填</param>
            <param name="progressTip">是否开启进度提醒，开启时广告文案为【再看N个获得xx】，关闭时为【 再看1个获得xx】。N表示玩家当前还需额外观看广告的次数。</param>
        </member>
        <member name="M:TTSDK.TT.CreateRewardedVideoAd(System.String,System.Action{System.Boolean,System.Int32},System.Action{System.Int32,System.String},TTSDK.TTVideoAdCallback,System.Boolean,System.String[],System.Int32,System.Boolean)">
            <summary>
            创建激励视频广告
            注意：此方法已经废弃，请使用无 videoAdLoadCallback 参数版本的 CreateRewardedVideoAd 方法
            </summary>
        </member>
        <member name="M:TTSDK.TT.CreateRewardedVideoAd(TTSDK.CreateRewardedVideoAdParam)">
            <summary>
            创建激励视频广告，在广告未加载时会发起异步请求，弱网情况下会进行重试。失败会调用errCallback
            激励视频广告只支持一个实例，申请多个激励视频广告位是无效的
            简单回调设置，激励视频完成和错误的回调函数
            错误码由sdk传出，原因参考
            https://bytedance.feishu.cn/docs/doccn1lAbZzMOqI5ueq1gCyPdcg#
            https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/open-capacity/ads/ads-error-code-description/
            https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/api/open-interface/ads/tt-create-interstitial-ad
            1004 可能是由于广告请求被限制了次数，需要跟广告投放沟通
            </summary>
            <param name="param">创建激励视频广告所需参数</param>
        </member>
        <member name="M:TTSDK.TT.SetVideoAdCallBack(TTSDK.TTVideoAdCallback)">
            <summary>
            设置激励视频广告的回调。获取完整的回调信息，一般处理都可以通过ShowVideoAdWithId完成，需要时使用
            </summary>
            <param name="callback">激励视频广告的回调.</param>
        </member>
        <member name="M:TTSDK.TT.Login(TTSDK.TTAccount.OnLoginSuccessCallback,TTSDK.TTAccount.OnLoginFailedCallback,System.Boolean)">
            <summary>
            登录-获取临时登录凭证
            强制登录默认为true，即若当前未登录宿主，则会调起宿主的登录窗口, 如果用户点击取消则会调用 fail
            如果当前登录宿主，则直接返回success，获取到 code 和 anonymousCode
            若强制登录为false，当前登录了宿主则会返回success，可以获取到获取到 code 和 anonymousCode
            当前未登录宿主，则只有 anonymousCode
            code 可以换取 openid, openid 是用户的唯一标识
            anonymousCode 可以换取 anonymous_openid, 同一台手机 anonymous_openid 是相同的
            </summary>
            <param name="forceLogin">未登录时, 是否强制调起登录框</param>
            <param name="successCallback">登录成功的回调</param>
            <param name="failedCallback">登陆失败的回调</param>
        </member>
        <member name="M:TTSDK.TT.CheckSession(TTSDK.TTAccount.OnCheckSessionSuccessCallback,TTSDK.TTAccount.OnCheckSessionFailedCallback)">
            <summary>
            检查用户当前的 session 状态是否有效
            只有成功调用 login 才会生成 session，checkSession 才会进入 success 回调，当用户退出登录会清除 session
            session_key 会随着login接口的调用被刷新。可以通过checkSession方法验证当前 session 是否有效，从而避免频繁登录。
            目前实际测试若使用匿名登录（forceLogin = false），则checkSession会一直返回 fail
            只有登录了宿主（forceLogin = true），checkSession才会返回success，下次不用login checkSession也可以返回true
            </summary>
            <param name="successCallback">验证有效的回调</param>
            <param name="failedCallback">验证无效或者验证失败的回调</param>
        </member>
        <member name="M:TTSDK.TT.GetUserInfo(TTSDK.TTAccount.OnGetUserInfoSuccessCallback,TTSDK.TTAccount.OnGetUserInfoFailedCallback)">
            <summary>
            获取已登录用户的基本信息或特殊信息
            若匿名登录后 userinfo里面字段全部为默认值
            登录了宿主后可以获取账号数据，下次不用login GetUserInfo也可以返回正确数据
            </summary>
            <param name="successCallback">获取用户信息成功的回调</param>
            <param name="failedCallback">获取用户信息失败的回调</param>
        </member>
        <member name="M:TTSDK.TT.GetUserInfoAuth(TTSDK.TTAccount.OnGetUserInfoAuthSuccess,TTSDK.TTAccount.OnGetUserInfoAuthFail)">
            <summary>
            判断用户是否已经授权给当前游戏读取个人信息
            该API会调用宿主的代码，如果调用宿主代码成功则会调用onGetUserInfoAuth，并返回是否已经授权
            如果调用宿主代码失败则会调用onGetUserInfoAuthFail
            </summary>
            <param name="onGetUserInfoAuth">调用宿主代码成功，并返回是否已经授权读取用户信息</param>
            <param name="onGetUserInfoAuthFail">调用宿主代码时发生错误</param>
        </member>
        <member name="M:TTSDK.TT.OpenSettingsPanel(TTSDK.TTAccount.OnGetUserInfoAuthSuccess,TTSDK.TTAccount.OnGetUserInfoAuthFail)">
            <summary>
            主动打开获取用户信息的授权界面，在Setting界面关闭后返回最新的授权状态，该方法没有超时时间
            该API会调用宿主的代码，如果调用宿主代码成功则会调用onGetUserInfoAuth，并返回最新的授权状态
            如果调用宿主代码失败则会调用onGetUserInfoAuthFail
            </summary>
        </member>
        <member name="M:TTSDK.TT.GetSetting(TTSDK.TTAccount.OnGetSettingSuccess,TTSDK.TTAccount.OnGetSettingFail)">
            <summary>
            获取用户已经授权过的配置。
            结果中只会包含向用户请求过的权限。
            与 OpenSetting 的区别是 GetSetting 只会获取配置，而不会打开配置页面。
            </summary>
            <param name="onGetSettingSuccess">接口调用成功的回调函数</param>
            <param name="onGetSettingFail">接口调用失败的回调函数</param>
        </member>
        <member name="M:TTSDK.TT.OpenSetting(TTSDK.TTAccount.OnOpenSettingSuccess,TTSDK.TTAccount.OnOpenSettingFail)">
            <summary>
            打开设置页面，返回用户设置过的授权结果。
            结果中只会包含用户请求过的权限。
            与 GetSetting 的区别是，OpenSetting 会打开设置页面，而 GetSetting 只会返回用户授权的设置信息。
            <param name="onOpenSettingSuccess">接口调用成功的回调函数</param>
            <param name="onOpenSettingFail">接口调用失败的回调函数</param>
            </summary>
        </member>
        <member name="M:TTSDK.TT.SetRealNameAuthenticationCallback(TTSDK.TTAccount.OnRealNameAuthentication)">
            <summary>
            用户在实名认证弹窗完成实名认证后回调
            需要在初始化时设置，回调时机为：游戏中弹出实名认证，用户完成了实名认证时触发
            </summary>
        </member>
        <member name="M:TTSDK.TT.GetUserInfo(System.Boolean,TTSDK.TTAccount.OnGetUserInfoSuccessCallback,TTSDK.TTAccount.OnGetUserInfoFailedCallback)">
            <summary>
            获取已登录用户的基本信息或特殊信息
            若匿名登录后 userinfo里面字段全部为默认值
            登录了宿主后可以获取账号数据，下次不用login GetUserInfo也可以返回正确数据
            </summary>
            <param name="withCredentials">是否获取加密信息以及 CloudId</param>
            <param name="successCallback">验证有效的回调</param>
            <param name="failedCallback">验证无效或者验证失败的回调</param>
            
        </member>
        <member name="M:TTSDK.TT.GetUserInfo(System.Boolean,System.Boolean,TTSDK.TTAccount.OnGetUserInfoSuccessCallback,TTSDK.TTAccount.OnGetUserInfoFailedCallback)">
            <summary>
            获取已登录用户的基本信息或特殊信息
            若匿名登录后 userinfo里面字段全部为默认值
            登录了宿主后可以获取账号数据，下次不用login GetUserInfo也可以返回正确数据
            </summary>
            <param name="withCredentials">是否获取加密信息以及 CloudId</param>
            <param name="successCallback">验证有效的回调</param>
            <param name="failedCallback">验证无效或者验证失败的回调</param>
            
        </member>
        <member name="M:TTSDK.TT.AuthenticateRealName(TTSDK.TTAccount.OnAuthenticateRealNameSuccessCallback,TTSDK.TTAccount.OnAuthenticateRealNameFailedCallback)">
            <summary>
            拉起实名认证窗口。
            注意：调用该接口前请确保用户已登录。
            </summary>
            <param name="successCallback">实名认证窗口拉起成功回调</param>
            <param name="failedCallback">实名认证窗口拉起失败回调</param>
        </member>
        <member name="M:TTSDK.TT.ShowDouyinOpenAuth(System.Collections.Generic.Dictionary{System.String,TTSDK.DouyinPermissionScopeStatus},TTSDK.TTAccount.OnShowDouyinOpenAuthSuccessCallback,TTSDK.TTAccount.OnShowDouyinOpenAuthFailedCallback)">
            <summary>
            提供小游戏获取抖音权限的能力，展示出抖音权限授权弹窗。
            在使用在接口前，需要小游戏拥有者登录抖音开发平台申请开通小游戏需要的权限。
            </summary>
            <param name="scopes">需要获取权限的信息，其中 key 值是申请权限的 scope，value 值必须是 0，1，2（此处申请的权限在抖音开放平台必须是已开通状态） </param>
            <param name="successCallback">展示抖音权限授权弹窗成功回调</param>
            <param name="failedCallback">展示抖音权限授权弹窗失败回调</param>
        </member>
        <member name="M:TTSDK.TT.GetGameRecorder">
            <summary>
            获取录屏相关接口
            </summary>
            <returns> TTGameRecorder </returns>
        </member>
        <member name="M:TTSDK.TT.GetRTCEngineManager">
            <summary>
            需要白名单
            获取 RtcEngine 实例（包含音视频应用程序调用的主要方法的接口类实例），应当只调用一次。第二次调用getRtcEngine 时，实际获取的还是上次那个
            </summary>
            <returns> RTCEngineManager </returns>
        </member>
        <member name="M:TTSDK.TT.Request(System.String,TTSDK.TTRequest.InnerOptions,System.Action{TTSDK.TTRequest.Response},System.Action{TTSDK.TTRequest.Response})">
            <summary>
            发起一个网络请求。网络相关的 API 在使用前需要配置域名白名单。
            请参考 https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/guide/basic-ability/network/
            </summary>
            <param name="url">请求地址</param>
            <param name="options">相关设置</param>
            <param name="success">请求'成功'的回调</param>
            <param name="fail">请求失败的回调</param>
        </member>
        <member name="M:TTSDK.TT.ShareAppMessage(TTSDK.UNBridgeLib.LitJson.JsonData,TTSDK.TTShare.OnShareSuccessCallback,TTSDK.TTShare.OnShareFailedCallback,TTSDK.TTShare.OnShareCancelledCallback)">
            <summary>
            通用分享
            </summary>
            <param name="successCallback">分享成功回调</param>
            <param name="failedCallback">分享失败回调</param>
            <param name="cancelledCallback">分享取消回调</param>
            <param name="shareJson">可填的字段信息参考：https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/retweet/tt-share-app-message/ </param>
        </member>
        <member name="M:TTSDK.TT.OnShareAppMessage(TTSDK.TTShare.OnshareAppMessageCallback)">
            <summary>
            监听用户点击右上角菜单中的“转发”，"拍抖音"按钮时触发的事件 https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/retweet/tt-on-share-app-message
            需要返回一个ShareParam 对象，用于分享  https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/retweet/share-param
            </summary>
            <param name="callback"> callback 接收一个 object 类型的参数，属性为：string: channel</param>
        </member>
        <member name="M:TTSDK.TT.OffShareAppMessage(TTSDK.TTShare.OnshareAppMessageCallback)">
            <summary>
            取消监听用户点击右上角菜单的“转发”按钮时触发的事件。 https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/retweet/tt-off-share-app-message
            </summary>
        </member>
        <member name="M:TTSDK.TT.ShareMessageToFriend(TTSDK.UNBridgeLib.LitJson.JsonData,TTSDK.TTShare.OnShareSuccessCallback,TTSDK.TTShare.OnShareFailedCallback,TTSDK.TTShare.OnShareCancelledCallback)">
            <summary>
            通用分享
            </summary>
            <param name="options">可填的字段信息参考：https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/retweet/tt-share-message-to-friend/
             openId     string  是   发送对象的 openId
             templateId string  是   分享素材模板 id，指定通过平台审核的 templateId 来选择分享内容，需在平台设置且通过审核
             query      string  否   查询字符串，必须是 key1=val1&amp;key2=val2 的格式。从这条转发消息进入后，可通过 tt.getLaunchOptionsSync 或 tt.onShow 获取启动参数中的 query用来实现信息透传
            </param>
            <param name="successCallback">分享成功回调</param>
            <param name="failedCallback">分享失败回调</param>
            <param name="cancelledCallback">分享取消回调</param>
        </member>
        <member name="M:TTSDK.TT.ShowShareMenu(TTSDK.TTShare.OnShowShareMenuSuccessCallback,TTSDK.TTShare.OnShowShareMenuFailCallback,TTSDK.TTShare.OnShowShareMenuCompleteCallback)">
            <summary>
            设置小游戏转发按钮为显示状态。
            转发按钮位于小游戏页面右上角的“更多”中。
            详细信息：https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/retweet/tt-show-share-menu
            </summary>
            <param name="successCallback">接口调用成功的回调函数</param>
            <param name="failCallback">接口调用失败的回调函数</param>
            <param name="completeCallback">接口调用结束的回调函数</param>
        </member>
        <member name="M:TTSDK.TT.HideShareMenu(TTSDK.TTShare.OnHideShareMenuSuccessCallback,TTSDK.TTShare.OnHideShareMenuFailCallback,TTSDK.TTShare.OnHideShareMenuCompleteCallback)">
            <summary>
            设置小游戏转发按钮为隐藏状态。
            转发按钮位于小游戏页面右上角的“更多”中。
            详细信息：https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/retweet/tt-hide-share-menu
            </summary>
            <param name="successCallback">接口调用成功的回调函数</param>
            <param name="failCallback">接口调用失败的回调函数</param>
            <param name="completeCallback">接口调用结束的回调函数</param>
        </member>
        <member name="M:TTSDK.TT.RequestGamePayment(System.Collections.Generic.Dictionary{System.String,System.Object},System.Action,System.Action{System.Int32,System.String})">
            <summary>
            小游戏平台的支付接口
            接口文档 https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/payment/tt-request-game-payment
            mode            string  必填  支付的类型, 目前仅为"game"
            env             int     必填  环境配置，目前合法值仅为"0"
            currencyType    string  必填  币种, 目前仅为"CNY"
            platform        string  必填  申请接入时的平台，目前仅为"android"
            buyQuantity     number  必填（道具直购场景除外）金币购买数量
            zoneId          string  非必填 游戏服务区 id，
            customId        string  必填  游戏开发者自定义的唯一订单号，订单支付成功后通过服务端支付结果回调回传
            extraInfo       string  非必填 游戏开发者自定义的其他信息，订单支付成功后通过服务端支付结果回调回传。字符串长度最大不能超过 256
            goodType        number  非必填（道具直购场景必填）默认游戏币。goodType 与 buyQuantity 任一传递即，可游戏币：0 或 1，道具直购：2
            orderAmount     number  非必填（道具直购场景必填）道具价格，人民币，单位分
            goodName        string  非必填（道具直购场景必填）道具名称
            goodsId          string  非必填 （礼包场景必填）礼包Id
            </summary>
        </member>
        <member name="M:TTSDK.TT.RequestGamePayment(TTSDK.RequestGamePaymentParam)">
            <summary>
            小游戏平台的支付接口
            接口文档 https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/payment/tt-request-game-payment
            </summary>
        </member>
        <member name="M:TTSDK.TT.OnBuyGift(TTSDK.BuyGiftCallback)">
            <summary>
            监听到用户打开推送的付费礼包并点击购买时触发事件回调。
            </summary>
        </member>
        <member name="M:TTSDK.TT.OpenAwemeUserProfile(System.Action,System.Action{System.Int32,System.String},System.Boolean)">
            <summary>
            关注抖音号
            需要在开发者平台-设置中绑定抖音号
            </summary>
            <param name="followCallback">完成打开抖音号的回调。涉及用户信息，无法获取用户是否关注了抖音号的状态</param>
            <param name="errCallback">打开抖音号失败的回调。errCode:
            <param name="showToastTipsIfFailed"> 当关注抖音号失败，是否显示Toast弹窗提示，默认显示 </param>
            CODE_ERROR = -1
            CODE_NOT_SUPPORT = -2
            CODE_NOT_LOGIN = -3
            CODE_NO_ACTIVITY = -4
            CODE_UID_ERROR = -5
            </param>
        </member>
        <member name="M:TTSDK.TT.CheckFollowAwemeState(System.Action{System.Boolean})">
            <summary>
            是否已关注抖音号
            </summary>
            <param name="callback"> 是否关注的回调，参数表示是否已关注，true表示已关注，false表示未关注 </param>
        </member>
        <member name="M:TTSDK.TT.CheckBoundAweme(System.Action{System.Boolean})">
            <summary>
            是否在小程序开发者后台绑定了抖音号
            </summary>
            <param name="callback"> 是否绑定的回调，参数表示是否已绑定，true表示已绑定，false表示未绑定 </param>
        </member>
        <member name="M:TTSDK.TT.AddShortcut(System.Action{System.Boolean},System.Boolean)">
            <summary>
            创建快捷方式
            </summary>
            <param name="csCallback"> 创建快捷方式回调，参数为是否成功，true表示成功，false表示失败 </param>
            <param name="showToastTipsIfFailed"> 当创建失败，是否显示Toast弹窗提示，默认显示 </param>
        </member>
        <member name="M:TTSDK.TT.CheckShortcut(System.Action{System.Boolean})">
            <summary>
            快捷方式是否已经创建
            </summary>
            <param name="isExistCallback"> 是否存在的回调，参数表示是否已创建，true表示已创建，false表示未创建 </param>
        </member>
        <member name="M:TTSDK.TT.NavigateToVideoView(System.String,System.Action{System.Boolean})">
            <summary>
            跳转到抖音视频
            </summary>
            <param name="videoId"> 抖音视频videoId，复制抖音视频链接到浏览器即可得到 </param>
            <param name="jumpCallback"> 跳转结果，参数为是否成功，true表示成功，false表示失败 </param>
        </member>
        <member name="M:TTSDK.TT.RequestSubscribeMessage(System.Collections.Generic.List{System.String},System.Action{System.Collections.Generic.Dictionary{System.String,System.String}},System.Action,System.Action{System.Int32,System.String})">
            <summary>
            请求订阅消息
            可以参考 小游戏相关文档 https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/open-capacity/subscribe-message/tt-request-subscribe-message/
            </summary>
            <param name="tmplIds">需要订阅的消息模板的 id 的集合，最多支持传入三个 tmplId</param>
            <param name="success">接口调用成功的回调函数</param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
            <param name="failed">接口调用结束的回调函数（调用成功、失败都会执行）</param>
        </member>
        <member name="M:TTSDK.TT.GetMenuButtonLayout">
            <summary>
            获取菜单按钮（右上角胶囊按钮）的布局位置信息。坐标信息以屏幕左上角为原点。
            https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/interface/menu/tt-get-menu-button-layout/
            </summary>
            <returns>
            JsonData
            width	number	宽度，单位：px
            height	number	高度，单位：px
            top	    number	上边界坐标，单位：px
            right	number	右边界坐标，单位：px
            bottom	number	下边界坐标，单位：px
            left	number	左边界坐标，单位：px
            </returns>
        </member>
        <member name="M:TTSDK.TT.Authorize(System.String,System.Action{System.String,TTSDK.UNBridgeLib.LitJson.JsonData},System.Action{System.String,System.String})">
            <summary>
            提前向用户发出授权请求。该方法不会调用对应接口，只会弹框咨询用户是否授权或者获取用户信息。如果用户之前有授权，该接口直接返回成功，不会跟用户产生交互。
            </summary>
            <param name="scope">需要预授权的 scope，详见 https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/open-capacity/user-information/authorization/authorization/</param>
            <param name="success">接口调用成功的回调函数</param>
            <param name="fail">接口调用失败的回调函数 </param>
        </member>
        <member name="M:TTSDK.TT.CreateGridGamePanel(TTSDK.TTGridGamePanelManager.GridGamePanelCount,TTSDK.UNBridgeLib.LitJson.JsonData,TTSDK.TTGridGamePanelManager.GridGamePanelSize,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            游戏互推组件能力
            </summary>
            <param name="gridCount">GridGamePanelCount，表示游戏推荐组件的格子数量</param>
            <param name="query">从组件内打开游戏时附带的query信息</param>
            <param name="size">GridGamePanelSize，表示组件大小，large：100%，medium：90%，small：80%。仅 gridCount = one | four 时有效。</param>
            <param name="position">控制游戏推荐组件的展示位置，不传入时默认展示在屏幕右下角。仅 gridCount = one 时有效。</param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TT.AddHostEventListener(System.String,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData})">
            <summary>
            添加宿主事件监听
            </summary>
            <param name="eventName">事件名</param>
            <param name="callback">回调函数，(result) => {}，宿主事件触发后自动调用</param>
        </member>
        <member name="M:TTSDK.TT.RemoveHostEventListener(System.String)">
            <summary>
            移除宿主事件监听
            </summary>
            <param name="eventName">事件名</param>
        </member>
        <member name="M:TTSDK.TT.SetOnBeforeExitAppListener(System.Func{System.Boolean})">
            <summary>
            监听游戏退出
            </summary>
            <param name="onBeforeExitApp">返回值为true，则表示由开发者自行处理退出逻辑，可以调用 TT.ExitMiniProgram 来手动退出游戏。返回值为false，则默认退出游戏。</param>
        </member>
        <member name="M:TTSDK.TT.SetImRankData(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{System.Boolean,System.String})">
            https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/open-capacity/game-rank/setImRankData
            <summary>
            在关键的游戏场景，设置写入用户的排行榜数据（游戏成绩信息），该数据会上传到服务端
            </summary>
            <param name="dataType">0：数字类型、1：枚举类型;数字类型（0）往往适用于游戏的通关分数（103分、105分），枚举类型（1）适用于段位信息（青铜、白银）；--(Require)</param>
            <param name="value">展示出来的数值，dataType == 0 时只能传正数的字符串，否则会报错。value为具体的值，若dataType为0，请传入数字（eg：103、105）；若dataType为1，则传入字符串（eg：青铜、白银）--(Require)</param>
            <param name="priority">dataType 为 1 时，需要传入这个值判断权重，dataType 为 0 时，不填即可--(Require)</param>
            <param name="extra">预留字段--(Nullable)</param>
            <param name="zoneId">排行榜分区标识--(Nullable)</param>
            <param name="paramJson">以上参数使用json格式传入，例如"{"dataType":0,"value":"100","priority":0,"zoneId":"default"}"</param>
            <param name="action">回调函数</param>
        </member>
        <member name="M:TTSDK.TT.GetImRankList(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{System.Boolean,System.String})">
             <summary>
            获取排行榜列表，调用 API 后， 根据参数自动绘制游戏好友排行榜
             </summary>
             <param name="rankType">代表数据排序周期，day为当日写入的数据做排序；week为自然周，month为自然月，all为半年--(Require)</param>
             <param name="dataType">由于数字类型的数据与枚举类型的数据无法同时排序，因此需要选择排序哪些类型的数据--(Require)</param>
             <param name="relationType">选择榜单展示范围。default: 好友及总榜都展示，all：仅总榜单--(Nullable)</param>
             <param name="suffix">数据后缀，最后展示样式为 value + suffix，若suffix传“分”，则展示 103分、104分--(Nullable)</param>
             <param name="rankTitle">排行榜标题的文案--(Nullable)</param>
             <param name="zoneId">排行榜分区标识--(Nullable)</param>
             <param name="paramJson">以上参数使用json格式传入，例如"{"rankType":"week","dataType":0,"relationType":"all","suffix":"分","rankTitle":"","zoneId":"default"}"</param>
             <param name="action">回调函数</param>
        </member>
        <member name="M:TTSDK.TT.GetImRankData(TTSDK.UNBridgeLib.LitJson.JsonData,TTSDK.TTRank.OnGetRankDataSuccessCallback,TTSDK.TTRank.OnGetRankDataFailCallback)">
            <summary>
            获取排序好的「好友/总榜」数据源，开发者基于数据源自行渲染返回的数据
            </summary>
            <param name="rankType">day、week、month、all--(Require)</param>
            <param name="dataType">0：数字类型 、 1：枚举类型--(Require)</param>
            <param name="relationType">friend：当前登录用户的好友的游戏数据排行，default：全部写入数据的排行 ，all: 总榜--(Require)</param>
            <param name="pageNum">页码，从1开始--(Require)</param>
            <param name="pageSize">每页长度，大于 0 小于 40--(Require)</param>
            <param name="zoneId">排行榜分区标识--(Nullable)</param>
            <param name="paramJson">以上参数使用Json格式传入,</param>
            <param name="onGetRankDataSuccessCallback">获取成功回调</param>
            <param name="onGetRankDataFailCallback">获取失败回调</param>
        </member>
        <member name="M:TTSDK.TT.CreateCloud">
            <summary>
            抖音云功能相关接口
            可以参考 小游戏抖音云相关文档 https://developer.open-douyin.com/docs/resource/zh-CN/developer/tools/cloud/develop-guide/invoke-sever/cloud-sdk
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TT.CheckScene(TTSDK.TTSideBar.SceneEnum,System.Action{System.Boolean},System.Action,System.Action{System.Int32,System.String})">
            <summary>
            确认当前宿主版本是否支持跳转某个小游戏入口场景。
            </summary>
            <param name="scene">需要确认的入口场景（目前仅支持的入参为'sidebar'）</param>
            <param name="success">接口调用成功的回调函数, bool为true说明支持，false表示不支持</param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
            <param name="error">接口调用失败的回调函数</param>
        </member>
        <member name="M:TTSDK.TT.NavigateToScene(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action,System.Action,System.Action{System.Int32,System.String})">
            <summary>
            调用该API可以跳转到某个小游戏入口场景。支持福利信息透传
            </summary>
            <param name="data">参数例子{"scene":"sidebar"[,"activityId":"一般跳转不用这个字段、忽略就好"]}</param>
            <param name="success">接口调用成功的回调函数, bool为true说明支持，false表示不支持</param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
            <param name="error">接口调用失败的回调函数</param>
        </member>
        <member name="M:TTSDK.TT.RequestPromotionActivity(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData},System.Action,System.Action{System.Int32,System.String})">
            <summary>
            注册用户参与复访营销活动。当前只支持侧边栏复访活动
            </summary>
            <param name="data">指定用户参与的营销活动id，通过OpenAPI申请得到。未填写时，会由平台选择可用活动,可选，例如{"activityId":"111111"}</param>
            <param name="success">接口调用成功的回调函数, </param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
            <param name="error">接口调用失败的回调函数</param>
        </member>
        <member name="M:TTSDK.TT.ReceiveCoupon(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData},System.Action,System.Action{System.Int32,System.String})">
            <summary>
            领取营销活动中完成任务后的奖励。当前只支持侧边栏复访活动
            </summary>
            <param name="data">用户参与的营销活动id，通过OpenAPI申请得到。未填写时，会由平台选择可发放的奖励，可选，例如{"activityId":"7368350593716338729"}</param>
            <param name="success">接口调用成功的回调函数, </param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
            <param name="error">接口调用失败的回调函数</param>
        </member>
        <member name="M:TTSDK.TT.ReplaceSensitiveWords(System.String,System.Action{System.Int32,System.String,TTSDK.UNBridgeLib.LitJson.JsonData})">
            <summary>
            替换敏感词
            </summary>
            <param name="word">要检查和替换的词语</param>
            <param name="callback">回调
            int: 返回状态码，0为成功，否则为失败
            string: 错误信息
            JsonData：
            audit_result    int     1: 有敏感内容；0: 无敏感内容
            audit_content   string  被替换的内容（无敏感内容则返回值与传入的word相同）
            </param>
        </member>
        <member name="E:TTSDK.TT.OnKeyboardInput">
            <summary>
            监听键盘输入事件
            </summary>
        </member>
        <member name="E:TTSDK.TT.OnKeyboardConfirm">
            <summary>
            监听用户点击键盘确定按钮时的事件
            </summary>
        </member>
        <member name="E:TTSDK.TT.OnKeyboardComplete">
            <summary>
            监听键盘收起事件
            </summary>
        </member>
        <member name="M:TTSDK.TT.ShowKeyboard(TTSDK.TTKeyboard.ShowKeyboardOptions,System.Action,System.Action{System.String})">
            <summary>
            显示软键盘（仅WebGL平台下支持）
            参考： https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/interface/keyboard/tt-show-keyboard/
            键盘输入监听请设置 onKeyboardInputEvent 和 onKeyboardConfirmEvent
            </summary>
            <param name="options">显示键盘的参数</param>
            <param name="onSuccess">显示软键盘成功回调: () => {}</param>
            <param name="onError">显示软键盘失败回调，(errMsg) => {}</param>
        </member>
        <member name="M:TTSDK.TT.HideKeyboard(System.Action,System.Action{System.String})">
            <summary>
            收起软键盘（仅WebGL平台下支持）
            参考： https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/interface/keyboard/tt-hide-keyboard/
            </summary>
            <param name="onSuccess">隐藏软键盘成功回调: () => {}</param>
            <param name="onError">隐藏软键盘失败回调，(errMsg) => {}</param>
        </member>
        <member name="M:TTSDK.TT.UpdateKeyboard(System.String,System.Action,System.Action{System.String})">
            <summary>
            更新键盘，只有当键盘处于拉起状态时才会产生效果。
            参考： https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/interface/keyboard/tt-show-keyboard/
            键盘输入监听请设置 onKeyboardInputEvent 和 onKeyboardConfirmEvent
            </summary>
            <param name="value">键盘输入框的当前值</param>
            <param name="onSuccess">更新软键盘成功回调: () => {}</param>
            <param name="onError">更新软键盘失败回调，(errMsg) => {}</param>
        </member>
        <member name="M:TTSDK.TT.OnTouchStart(TTSDK.TTInput.TouchEventCallback)">
            <summary>
            监听开始触摸事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TT.OnTouchMove(TTSDK.TTInput.TouchEventCallback)">
            <summary>
            监听触点移动事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TT.OnTouchEnd(TTSDK.TTInput.TouchEventCallback)">
            <summary>
            监听触摸结束事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TT.OnTouchCancel(TTSDK.TTInput.TouchEventCallback)">
            <summary>
            监听触点失效事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TT.OffTouchStart(TTSDK.TTInput.TouchEventCallback)">
            <summary>
            取消监听开始触摸事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TT.OffTouchMove(TTSDK.TTInput.TouchEventCallback)">
            <summary>
            取消监听触点移动事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TT.OffTouchEnd(TTSDK.TTInput.TouchEventCallback)">
            <summary>
            取消监听触摸结束事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TT.OffTouchCancel(TTSDK.TTInput.TouchEventCallback)">
            <summary>
            取消监听触点失效事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TT.CreateInvitePanel(System.String,TTSDK.UNBridgeLib.LitJson.JsonData,TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{System.Boolean,System.String})">
            <summary>
            抖音好友邀请
            </summary>
            <param name="roomId">房间id</param>
            <param name="query">用于放在schema 里面的信息，Key-Value形式。</param>
            <param name="extra">额外扩展信息, Key-Value形式。</param>
            <param name="callback">调用结果回调： (isSuccess, errMsg) => {}</param>
            <code> Example
            TT.onInviteStateChanged = (state, msg) =>
                {
                    Debug.Log($"onInviteStateChanged - state: {state}, msg: {msg}");
                };
            var roomId = "12345";
            var query = new JsonData {["test"] = "query"};
            JsonData extra = null;
            TT.CreateInvitePanel(roomId, query, extra, (isSuccess, errorMsg) =>
            {
                if (isSuccess)
                {
                    Debug.Log("CreateInvitePanel success");
                }
                else
                {
                    Debug.Log($"CreateInvitePanel failed, {errorMsg}");
                }
            });
            </code>
        </member>
        <member name="E:TTSDK.TT.OnInviteStateChanged">
            <summary>
            监听邀请状态变化事件
            </summary>
        </member>
        <member name="M:TTSDK.TT.Collect(System.Action{System.Boolean})">
            <summary>
            游戏收藏
            </summary>
            <param name="callback"> 收藏回调，true表示成功，false表示失败 </param>
        </member>
        <member name="M:TTSDK.TT.CancelCollection(System.Action{System.Boolean})">
            <summary>
            取消游戏收藏
            </summary>
            <param name="callback"> 取消收藏回调，true表示成功，false表示失败 </param>
        </member>
        <member name="M:TTSDK.TT.IsCollected">
            <summary>
            游戏是否已收藏
            </summary>
            <returns>是否已收藏，true表示已收藏，false表示未收藏</returns>
        </member>
        <member name="M:TTSDK.TT.ShowFavoriteGuide(TTSDK.TTFavorite.Style,System.String)">
            <summary>
            收藏引导
            <param name="style">弹窗类型，默认为底部弹窗</param>
            <param name="content">弹窗文案，仅style为 Tip 时可修改，最多显示 12 个字符。</param>
            </summary>
        </member>
        <member name="M:TTSDK.TT.ShowRevisitGuide(System.Action{System.Boolean})">
            <summary>
            调起引导用户复访的提示弹窗，目前仅抖音宿主支持。
            为了更好的玩家体验，建议在按钮的点击回调中使用。
            </summary>
            <param name="callback">调起复访提示回调，true表示成功，false表示失败</param>
        </member>
        <member name="M:TTSDK.TT.SetClipboardData(System.String,System.Action{System.Boolean,System.String})">
            <summary>
            设置剪切板信息
            </summary>
            <param name="data">设置的内容</param>
            <param name="action">bool = true设置成功，反则关注错误信息</param>
        </member>
        <member name="M:TTSDK.TT.GetClipboardData(System.Action{System.Boolean,System.String})">
            <summary>
            获取剪切板信息
            </summary>
            <param name="action">bool = true获取成功，value为内容，反则关注错误信息</param>
        </member>
        <member name="M:TTSDK.TT.CheckGroupInfo(System.String,TTSDK.TTGroup.OnCheckGroupInfoSuccessCallback,TTSDK.TTGroup.OnCheckGroupInfoFailCallback,System.String,System.String)">
             <summary>
            查询用户通过小游戏平台创建的群的信息
             如游戏开发者在平台创建了群聊 ABC，那么游戏侧可以基于游戏开发者在这个游戏中的 openid，查询其在小游戏平台创建了哪些群，群的状态如何，做游戏内的加群逻辑优化
             </summary>
             <param name="openId">建群用户的 openid 必填</param>
             <param name="onCheckGroupInfoSuccessCallback">接口调用成功的回调函数 必填</param>
             <param name="onCheckGroupInfoFailCallback">接口调用失败的回调函数 必填</param>
             <param name="sessionFrom">会话来源 可空</param>
             <param name="extraInfo">附加信息 可空</param>
        </member>
        <member name="M:TTSDK.TT.JoinGroup(System.String,System.Action{System.Boolean,System.String},System.String,System.String)">
            <summary>
            在平台创建群聊，获得 groupid 后，游戏内通过这个方法引导用户加入抖音群
            </summary>
            <param name="groupId">群 ID  必填</param>
            <param name="callback">接口调用成功/失败的回调函数  必填</param>
            <param name="sessionFrom">会话来源 可空</param>
            <param name="extraInfo">附加信息 可空</param>
        </member>
        <member name="E:TTSDK.TT.OnDeviceMotionChange">
            <summary>
            方向监听
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TT.StartDeviceMotionListening(TTSDK.TTDeviceMotion.Interval,TTSDK.TTDeviceMotion.MotionCallback)">
            <summary>
            开始监听设备方向变化
            </summary>
            <param name="interval">"监听设备方向的变化回调函数的执行频率,game 适用于更新游戏的回调频率，在 20ms/次 左右,ui 适用于更新 UI 的回调频率，在 60ms/次 左右,normal 普通的回调频率，在 200ms/次 左右"</param>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TT.StopDeviceMotionListening(TTSDK.TTDeviceMotion.MotionCallback)">
            <summary>
            停止监听设备方向变化
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TT.SetKeepScreenOn(System.Boolean,System.Action,System.Action{System.String})">
            <summary>
            设置是否保持屏幕常亮状态
            </summary>
            <param name="keepScreenOn">是否保持屏幕常亮</param>
            <param name="successCallback">接口调用成功的回调函数</param>
            <param name="failCallback">接口调用失败的回调函数</param>
        </member>
        <member name="M:TTSDK.TT.GetScreenBrightness(System.Action{System.Double},System.Action{System.String})">
            <summary>
            获取屏幕亮度。
            </summary>
            <param name="successCallback">接口调用成功的回调函数,屏幕亮度值，范围 0 ～ 1。0 最暗，1 最亮。</param>
            <param name="failCallback">接口调用失败的回调函数</param>
        </member>
        <member name="M:TTSDK.TT.SetScreenBrightness(System.Single,System.Action,System.Action{System.String})">
            <summary>
            设置屏幕亮度。
            </summary>
            <param name="value">屏幕亮度值，范围 0 ～ 1。（0 最暗，1 最亮）</param>
            <param name="successCallback">接口调用成功的回调函数</param>
            <param name="failCallback">接口调用失败的回调函数</param>
        </member>
        <member name="M:TTSDK.TT.RequestGoldOrder(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData},System.Action,System.Action{System.Int32,System.String})">
            <summary>
            金币发放or扣除
            </summary>
            <param name="type">订单类型,1-发放金币，2-消耗金币, int</param>
            <param name="bizId">点位ID，在开发者后台中金币配置中获取, string</param>
            <param name="goldNum">金币数量, int</param>
            <param name="customId">开发者自定义的订单号, string</param>
            <param name="paramJson">以上参数使用json的形式传入，例如：{"type":1,"bizId":"xxxxx","goldNum":1,"customId":"xxxx"}</param>
            <param name="successCallback">执行成功的回调函数，会返回平台订单号,例如：{"orderId":"xxxxx"}</param>
            <param name="completeCallback">接口调用成功的回调函数</param>
            <param name="errorCallback">接口调用失败的回调函数</param>
        </member>
        <member name="M:TTSDK.TT.ExitMiniProgram(System.Boolean,System.Action{System.Boolean})">
            <summary>
            退出程序
            </summary>
            <param name="showDialog">是否显示退出提示对话框，true为在退出前显示二次提示对话框架，false则不显示对话框而直接退出程序</param>
            <param name="callback">接口调用成功状态回调，true表示成功，false表示失败</param>
        </member>
        <member name="M:TTSDK.TT.RestartMiniProgramSync">
            <summary>
            重启小游戏
            </summary>
        </member>
        <member name="M:TTSDK.TT.Save``1(``0,System.String)">
            <summary>
            保存游戏数据接口，所有游戏数据保存上限50M
            </summary>
            <param name="saveName"> 数据名 </param>
            <param name="serializableObject"> 可序列化的数据(存档类需标记为Serializable)[见以下的例子]</param>
            <returns>保存成功返回true，否则返回false</returns>
            <example>
            <code>
            [Serializable]
            class SaveData
            {
               public int IntValue = 99;
               private float FloatValue = 1.0f;
               public string StrValue = "My String";
               public Dictionary&lt;String,bool&gt; map;
               public List&lt;String&gt; listStr;
            }
            SaveData sd = new SaveData();
            sd.xx = yyy;
            bool ret = TT.Save&lt;SaveData&gt;(sd);
            </code>
            </example>
        </member>
        <member name="M:TTSDK.TT.LoadSaving``1(System.String)">
             <summary>
             加载游戏数据接口，返回数据类型需为Serializable
             </summary>
             <param name="saveName"> 数据名 </param>
            
             <example>
             SaveData loaded = TT.LoadSaving&lt;SaveData&gt;();
             </example>
        </member>
        <member name="M:TTSDK.TT.DeleteSaving``1(System.String)">
            <summary>
            删除游戏数据接口
            </summary>
            <param name="saveName"> 数据名 </param>
            
            <example>
            TT.DeleteSaving&lt;SaveData&gt;();
            </example>
        </member>
        <member name="M:TTSDK.TT.ClearAllSavings">
            <summary>
            删除所有游戏数据
            </summary>
        </member>
        <member name="M:TTSDK.TT.GetSavingDiskSize">
            <summary>
            获取游戏数据磁盘总大小
            </summary>
            <param name="saveName"> 数据名 </param>
        </member>
        <member name="M:TTSDK.TT.GetSDKLog">
            <summary>
            控制sdk中的Log级别
            </summary>
        </member>
        <member name="M:TTSDK.TT.StartGyroscope(System.Double,System.Action{System.Boolean,System.String})">
            <summary>
            开始监听陀螺仪
            </summary>
            <param name="interval">获取陀螺仪数据的间隔时间，单位为毫秒（ms），默认大小为 50</param>
            <param name="statusCallback">接口调用状态回调，(bool success, string errMsg) => {}</param>
        </member>
        <member name="M:TTSDK.TT.StopGyroscope(System.Action{System.Boolean,System.String})">
            <summary>
            停止监听陀螺仪
            </summary>
            <param name="statusCallback">接口调用状态回调，(bool success, string errMsg) => {}</param>
        </member>
        <member name="E:TTSDK.TT.OnGyroscopeChange">
            <summary>
            陀螺仪回调
            </summary>
            <param name="x">x 轴的角速度。</param>
            <param name="y">y 轴的角速度。</param>
            <param name="z">z 轴的角速度。</param>
            <param name="t">从设备启动到现在经过的时间戳，单位是 ms。</param>
            <param name="roll">姿态角值，围绕 Z 轴旋转，也叫翻滚角。</param>
            <param name="pitch">姿态角值，围绕 X 轴旋转，也叫做俯仰角。</param>
            <param name="yaw">姿态角值，围绕 Y 轴旋转，也叫偏航角。</param>
            <param name="result"></param>
        </member>
        <member name="M:TTSDK.TT.CreateUDPSocket">
            <summary>
            创建一个 UDP Socket 实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TT.Vibrate(System.Int64[],System.Int32)">
            <summary>
            可以配置震动周期的手机震动接口，单位ms
            </summary>
            <param name="pattern"> 震动周期 like long[] pattern = {0, 100, 1000, 3000}; 传入null则取消震动  </param>
            <param name="repeat"> 重复次数，为-1则不重复  </param>
            <remarks>
            注意：WebGL平台下，只有两种震动：长和短。
                 pattern数组参数只能传入一个数值，传入小于1000 则为短震动，否则为长震动。
                 不支持取消和重复。即repeat参数无效。
            </remarks>>
        </member>
        <member name="M:TTSDK.TT.StartAccelerometer(TTSDK.OnAccelerometerChanged,System.Action{System.Boolean,System.String})">
            <summary>
            开始监听加速度数据
            </summary>
            <param name="onAccelerometerChanged">加速度数据回调事件监听</param>
            <param name="statusCallback">接口调用状态回调，(bool success, string errMsg) => {}</param>
        </member>
        <member name="M:TTSDK.TT.StopAccelerometer(System.Action{System.Boolean,System.String})">
            <summary>
            停止监听加速度数据
            </summary>
            <param name="statusCallback">接口调用状态回调，(bool success, string errMsg) => {}</param>
        </member>
        <member name="M:TTSDK.TT.GetSystemFont(System.Action{UnityEngine.Font})">
            <summary>
            获取系统字体,仅支持WebGL,AndroidNative方案无需调用此接口，使用默认字体时，便会自动使用系统自动字体。
            </summary>
            <param name="callback">字体资源回调，可为null，开发者需要做好兜底</param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TT.RequestFeedSubscribe(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData},System.Action{System.Int32,System.String},System.Action)">
            <summary>
            向用户请求授权允许游戏在满足一定的条件后出现在Feed流中
            </summary>
            <param name="param">type(strings)（必传，订阅Feed流的类型）
                                scene(int)订阅的场景ID（type='play'时必传））
                                contentIDs(jsonArray) 自定义文案ID（type='play'时必传））
                                allScene(bool)全场景订阅（非必传，默认值为false，全场景订阅为true时scene、contentId可不传）
                                例如：{"type":"play","scene":111,"contentIDs":["xxxx"], "allScene": false}，{"type":"play","allScene": true}</param>
            <param name="success">接口调用成功的回调函数， 包含以下内容，errMsg(回调信息)，success(用户的订阅结果（true为成功，false为订阅失败，具体原因看errMsg））</param>
            <param name="failed">接口调用失败的回调函数</param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
        </member>
        <member name="M:TTSDK.TT.CheckFeedSubscribeStatus(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData},System.Action{System.Int32,System.String},System.Action)">
            <summary>
            查询用户的授权情况。
            </summary>
            <param name="param">type(strings)（必传，订阅Feed流的类型），
                                scene(int)订阅的场景ID（type='play'时必传）），
                                allScene(bool)全场景订阅（非必传，默认值为false，全场景订阅为true时scene可不传）
                                例如：{"type":"play","scene":1111, "allScene": false}, {"type":"play","allScene": true}</param>
            <param name="success">接口调用成功的回调函数,包含以下内容，errMsg(回调信息)，success(用户的订阅结果（true为已经订阅，false为用户未订阅））</param>
            <param name="failed">接口调用失败的回调函数</param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
        </member>
        <member name="M:TTSDK.TT.OnFeedStatusChange(TTSDK.OnFeedStatusChangeCallback)">
            <summary>
            监听直玩场景内外流的切换
            </summary>
        </member>
        <member name="M:TTSDK.TT.OffFeedStatusChange(TTSDK.OnFeedStatusChangeCallback)">
            <summary>
            取消监听直玩场景内外流的切换
            </summary>
        </member>
        <member name="M:TTSDK.TT.GetLiveManager">
            <summary>
            获取直播间管理器对象
            </summary>
        </member>
        <member name="M:TTSDK.TT.IsRecovery">
            <summary>
            确定本次游戏启动是否是容灾启动
            </summary>
            <returns>是否是容灾启动</returns>
        </member>
        <member name="M:TTSDK.TT.GetUpdateManager">
            <summary>
            获取小游戏管理更新对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TT.GetUnionGroupInfo(TTSDK.GetUnionGroupInfoParam)">
            <summary>
            获取公会绑定群信息
            </summary>
        </member>
        <member name="M:TTSDK.TT.BindUnionGroup(TTSDK.BindUnionGroupParam)">
            <summary>
            给指定公会绑定公开群
            </summary>
        </member>
        <member name="M:TTSDK.TT.UnbindUnionGroup(TTSDK.UnbindUnionGroupParam)">
            <summary>
            解除公会和公开群的绑定关系
            </summary>
        </member>
        <member name="M:TTSDK.TT.JoinUnionGroup(TTSDK.JoinUnionGroupParam)">
            <summary>
            加入工会群聊
            </summary>
        </member>
        <member name="M:TTSDK.TT.GetNetWorkType(TTSDK.GetNetworkTypeParam)">
            <summary>
            获取设备当前所处的网络类型。
            </summary>
        </member>
        <member name="M:TTSDK.TT.OnNetworkStatusChange(TTSDK.OnNetworkStatusChangeCallback)">
            <summary>
            添加监听网络状态变化回调
            </summary>
        </member>
        <member name="M:TTSDK.TT.OffNetworkStatusChange(TTSDK.OnNetworkStatusChangeCallback)">
            <summary>
            关闭监听网络状态变化回调
            </summary>
        </member>
        <member name="M:TTSDK.TT.OnNetworkWeakChange(TTSDK.OnNetworkWeakChangeCallback)">
            <summary>
            添加监听弱网状态变化事件回调，不传入callback参数时，会移除所有监听函数。
            </summary>
        </member>
        <member name="M:TTSDK.TT.OffNetworkWeakChange(TTSDK.OnNetworkWeakChangeCallback)">
            <summary>
            关闭监听弱网状态变化事件回调，不传入callback参数时，会移除所有监听函数。
            </summary>
        </member>
        <member name="M:TTSDK.TT.GetLogManager(TTSDK.GetLogManagerParam)">
            <summary>
            获取日志管理对象
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TT.OnKeyDown(System.Action{TTSDK.OnKeyDownListenerResult})">
            <summary>
            监听键盘按键按下事件，仅适用于 PC 平台
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:TTSDK.TT.OffKeyDown(System.Action{TTSDK.OnKeyDownListenerResult})">
            <summary>
            取消监听键盘按键按下事件，仅适用于 PC 平台
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:TTSDK.TT.OnKeyUp(System.Action{TTSDK.OnKeyDownListenerResult})">
            <summary>
            监听键盘按键弹起事件，仅适用于 PC 平台
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:TTSDK.TT.OffKeyUp(System.Action{TTSDK.OnKeyDownListenerResult})">
            <summary>
            取消监听键盘按键弹起事件，仅适用于 PC 平台
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:TTSDK.TT.OnMouseDown(System.Action{TTSDK.OnMouseDownListenerResult})">
            <summary>
            监听鼠标按键（左键/中键/右键）按下事件，仅适用于 PC 平台
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:TTSDK.TT.OffMouseDown(System.Action{TTSDK.OnMouseDownListenerResult})">
            <summary>
            取消监听鼠标按键（左键/中键/右键）按下事件，仅适用于 PC 平台
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:TTSDK.TT.OnMouseUp(System.Action{TTSDK.OnMouseDownListenerResult})">
            <summary>
            监听鼠标按键（左键/中键/右键）弹起事件，仅适用于 PC 平台
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:TTSDK.TT.OffMouseUp(System.Action{TTSDK.OnMouseDownListenerResult})">
            <summary>
            取消监听鼠标按键（左键/中键/右键）弹起事件，仅适用于 PC 平台
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:TTSDK.TT.OnMouseMove(System.Action{TTSDK.OnMouseMoveListenerResult})">
            <summary>
            监听鼠标移动事件，仅适用于 PC 平台
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:TTSDK.TT.OffMouseMove(System.Action{TTSDK.OnMouseMoveListenerResult})">
            <summary>
            取消监听鼠标移动事件，仅适用于 PC 平台
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:TTSDK.TT.OnWheel(System.Action{TTSDK.OnWheelListenerResult})">
            <summary>
            监听鼠标滚轮事件，仅适用于 PC 平台
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:TTSDK.TT.OffWheel(System.Action{TTSDK.OnWheelListenerResult})">
            <summary>
            取消监听鼠标滚轮事件，仅适用于 PC 平台
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:TTSDK.TT.SetCursor(System.String,System.Double,System.Double)">
            <summary>
            指定指针样式，仅适用于 PC 平台
            </summary>
            <param name="path">指定自定义光标：CSS 标准关键字、scfile 路径（32x32，ico 或 cur 格式）</param>
            <param name="x">横向偏移量</param>
            <param name="y">纵向偏移量</param>
        </member>
        <member name="M:TTSDK.TT.RequestPointerLock">
            <summary>
            锁定鼠标指针，锁定后隐藏鼠标，仅适用于 PC 平台
            </summary>
        </member>
        <member name="M:TTSDK.TT.IsPointerLocked">
            <summary>
            检查鼠标指针是否被锁定，仅适用于 PC 平台
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TT.ExitPointerLock">
            <summary>
            解除锁定鼠标指针，仅适用于 PC 平台
            </summary>
        </member>
        <member name="M:TTSDK.TT.GetRealtimeLogManager(TTSDK.GetRealtimeManagerParam)">
            <summary>
            获取实时日志管理对象
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:TTSDK.DouyinCloudImpl.DyCloudDownloadUploadProgressUpdateListener">
            <summary>
            上传下载国产回调逻辑
            </summary>
        </member>
        <member name="M:TTSDK.TTScreenManager.SetKeepScreenOn(System.Boolean,System.Action,System.Action{System.String})">
            <summary>
            设置是否保持屏幕常亮状态
            </summary>
            <param name="keepScreenOn">是否保持屏幕常亮</param>
            <param name="successCallback">接口调用成功的回调函数</param>
            <param name="failCallback">接口调用失败的回调函数</param>
        </member>
        <member name="M:TTSDK.TTScreenManager.GetScreenBrightness(System.Action{System.Double},System.Action{System.String})">
            <summary>
            获取屏幕亮度。
            </summary>
            <param name="successCallback">接口调用成功的回调函数,屏幕亮度值，范围 0 ～ 1。0 最暗，1 最亮。</param>
            <param name="failCallback">接口调用失败的回调函数</param>
        </member>
        <member name="M:TTSDK.TTScreenManager.SetScreenBrightness(System.Single,System.Action,System.Action{System.String})">
            <summary>
            设置屏幕亮度。
            </summary>
            <param name="value">屏幕亮度值，范围 0 ～ 1。（0 最暗，1 最亮）</param>
            <param name="successCallback">接口调用成功的回调函数</param>
            <param name="failCallback">接口调用失败的回调函数</param>
        </member>
        <member name="M:TTSDK.TTGoldCoinManager.RequestGoldOrder(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData},System.Action,System.Action{System.Int32,System.String})">
            <summary>
            金币发放or扣除
            </summary>
            <param name="type">订单类型,1-发放金币，2-消耗金币, int</param>
            <param name="bizId">点位ID，在开发者后台中金币配置中获取, string</param>
            <param name="goldNum">金币数量, int</param>
            <param name="customId">开发者自定义的订单号, string</param>
            <param name="paramJson">以上参数使用json的形式传入，例如：{"type":1,"bizId":"xxxxx","goldNum":1,"customId":"xxxx"}</param>
            <param name="successCallback">执行成功的回调函数，会返回平台订单号,例如：{"orderId":"xxxxx"}</param>
            <param name="completeCallback">接口调用成功的回调函数</param>
            <param name="errorCallback">接口调用失败的回调函数</param>
        </member>
        <member name="T:TTSDK.OnKeyDownListenerResult">
            <summary>
            PC 键盘按键事件数据
            </summary>
        </member>
        <member name="F:TTSDK.OnKeyDownListenerResult.key">
            <summary>
            同 Web 规范 KeyEvent key 属性
            </summary>
        </member>
        <member name="F:TTSDK.OnKeyDownListenerResult.code">
            <summary>
            同 Web 规范 KeyEvent code 属性
            </summary>
        </member>
        <member name="F:TTSDK.OnKeyDownListenerResult.timeStamp">
            <summary>
            高精度时间戳
            </summary>
        </member>
        <member name="T:TTSDK.OnMouseDownListenerResult">
            <summary>
            PC 鼠标按钮事件数据
            </summary>
        </member>
        <member name="F:TTSDK.OnMouseDownListenerResult.button">
            <summary>
            按键类型，0左键，1中键，2右键
            </summary>
        </member>
        <member name="F:TTSDK.OnMouseDownListenerResult.x">
            <summary>
            事件触发时鼠标所在的位置横坐标
            </summary>
        </member>
        <member name="F:TTSDK.OnMouseDownListenerResult.y">
            <summary>
            事件触发时鼠标所在的位置纵坐标
            </summary>
        </member>
        <member name="F:TTSDK.OnMouseDownListenerResult.timeStamp">
            <summary>
            高精度时间戳
            </summary>
        </member>
        <member name="T:TTSDK.OnMouseMoveListenerResult">
            <summary>
            PC 鼠标位移事件数据
            </summary>
        </member>
        <member name="F:TTSDK.OnMouseMoveListenerResult.x">
            <summary>
            事件触发时鼠标所在的位置横坐标
            </summary>
        </member>
        <member name="F:TTSDK.OnMouseMoveListenerResult.y">
            <summary>
            事件触发时鼠标所在的位置纵坐标
            </summary>
        </member>
        <member name="F:TTSDK.OnMouseMoveListenerResult.movementX">
            <summary>
            鼠标横坐标偏移量
            </summary>
        </member>
        <member name="F:TTSDK.OnMouseMoveListenerResult.movementY">
            <summary>
            鼠标纵坐标偏移量
            </summary>
        </member>
        <member name="F:TTSDK.OnMouseMoveListenerResult.timeStamp">
            <summary>
            高精度时间戳
            </summary>
        </member>
        <member name="T:TTSDK.OnWheelListenerResult">
            <summary>
            PC 鼠标滚轮事件数据
            </summary>
        </member>
        <member name="F:TTSDK.OnWheelListenerResult.x">
            <summary>
            事件触发时鼠标所在的位置横坐标
            </summary>
        </member>
        <member name="F:TTSDK.OnWheelListenerResult.y">
            <summary>
            事件触发时鼠标所在的位置纵坐标
            </summary>
        </member>
        <member name="F:TTSDK.OnWheelListenerResult.deltaX">
            <summary>
            滚轮 x 轴方向滚动量
            </summary>
        </member>
        <member name="F:TTSDK.OnWheelListenerResult.deltaY">
            <summary>
            滚轮 y 轴方向滚动量
            </summary>
        </member>
        <member name="F:TTSDK.OnWheelListenerResult.deltaZ">
            <summary>
            滚轮 z 轴方向滚动量
            </summary>
        </member>
        <member name="F:TTSDK.OnWheelListenerResult.timeStamp">
            <summary>
            高精度时间戳
            </summary>
        </member>
        <member name="M:TTSDK.TTPCInput.ParseKeyDownResult(System.IntPtr)">
            <summary>
            解析键盘按键事件数据
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTPCInput.ParseMouseDownResult(System.IntPtr)">
            <summary>
            解析鼠标按钮事件数据
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTPCInput.ParseMouseMoveResult(System.IntPtr)">
            <summary>
            解析鼠标位移事件数据
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTPCInput.ParseWheelResult(System.IntPtr)">
            <summary>
            解析鼠标滚轮事件数据
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTPCInput.ParseKeyCodeResult(System.IntPtr)">
            <summary>
            解析 KeyCode 数据
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTPCInput.ParseInt32Array(System.Int32[]@,System.IntPtr)">
            <summary>
            解析 Int32 数组
            </summary>
            <param name="buffer"></param>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTNetworkServiceImpl.OnNetworkStatusChangeListener(TTSDK.OnNetworkStatusChangeResult)">
            <summary>
            客户端 or JS 网络状态回调监听
            </summary>
        </member>
        <member name="M:TTSDK.TTNetworkServiceImpl.OnNetworkLevelChangeListener(TTSDK.OnNetworkWeakChangeResult)">
            <summary>
            客户端 or JS 弱网回调监听 
            </summary>
        </member>
        <member name="T:TTSDK.TTGridGamePanelManager">
            <summary>
            互推格子模块
            </summary>
        </member>
        <member name="M:TTSDK.TTGridGamePanelManager.CreateGridGamePanel(TTSDK.TTGridGamePanelManager.GridGamePanelCount,TTSDK.UNBridgeLib.LitJson.JsonData,TTSDK.TTGridGamePanelManager.GridGamePanelSize,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            游戏互推组件能力
            </summary>
            <param name="gridCount">GridGamePanelCount，表示游戏推荐组件的格子数量</param>
            <param name="query">从组件内打开游戏时附带的query信息</param>
            <param name="size">GridGamePanelSize，表示组件大小，large：100%，medium：90%，small：80%。仅 gridCount = one | four 时有效。</param>
            <param name="position">控制游戏推荐组件的展示位置，不传入时默认展示在屏幕右下角。仅 gridCount = one 时有效。</param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTGridGamePanelManager.TTGridGamePanel.Show">
            <summary>
            显示
            </summary>
        </member>
        <member name="M:TTSDK.TTGridGamePanelManager.TTGridGamePanel.Hide">
            <summary>
            隐藏
            </summary>
        </member>
        <member name="M:TTSDK.TTGridGamePanelManager.TTGridGamePanel.Destroy">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:TTSDK.StringExt.UnicodeToUtf8(System.String)">
            <summary>
            Unicode转utf8编码
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.NavigateUIUtil.CreateNavigateTips(System.Action)">
            <summary>
            创建一个UI用于显示提示
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:TTSDK.AndroidTTCallBridge">
            <summary>
            Android 新的实现 (TT)
            </summary>
        </member>
        <member name="T:TTSDK.AndroidCompatibleCallBridge">
            <summary>
            TT 和 Stark 旧接口的兼容模式，每个接口在调用时通过 TTNativeCallSettings.IsCallJs 检查是用 TT 的实现还是旧的 Stark 实现
            </summary>
        </member>
        <member name="T:TTSDK.TTRequest">
            <summary>
            游戏内网络请求模块
            </summary>
        </member>
        <member name="T:TTSDK.TTRequest.Options">
            <summary>
            请求相关设置
            </summary>
        </member>
        <member name="F:TTSDK.TTRequest.Options.Method">
            <summary>网络请求方法，支持 GET/POST/OPTIONS/PUT/HEAD/DELETE</summary>
        </member>
        <member name="F:TTSDK.TTRequest.Options.Data">
            <summary>请求的参数</summary>
        </member>
        <member name="F:TTSDK.TTRequest.Options.Header">
            <summary>请求header</summary>
        </member>
        <member name="F:TTSDK.TTRequest.Options.DataType">
            <summary>期望返回的数据类型</summary>
        </member>
        <member name="F:TTSDK.TTRequest.Options.ResponseType">
            <summary>期望响应的数据类型，支持 text 或 arraybuffer</summary>
        </member>
        <member name="T:TTSDK.TTRequest.Response">
            <summary>
            请求响应
            </summary>
        </member>
        <member name="T:TTSDK.TTRequest.ResponseJobj">
            <summary>
            请求响应
            </summary>
        </member>
        <member name="M:TTSDK.TTRequest.Request(System.String,TTSDK.TTRequest.InnerOptions,System.Action{TTSDK.TTRequest.Response},System.Action{TTSDK.TTRequest.Response})">
            <summary>
            发起一个网络请求。网络相关的 API 在使用前需要配置域名白名单。
            请参考 https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/guide/basic-ability/network/
            </summary>
            <param name="url">请求地址</param>
            <param name="options">相关设置</param>
            <param name="success">请求'成功'的回调</param>
            <param name="fail">请求失败的回调</param>
        </member>
        <member name="M:TTSDK.TTRequest.InnerRequest(System.String,TTSDK.TTRequest.InnerOptions,System.Action{TTSDK.TTRequest.Response},System.Action{TTSDK.TTRequest.Response})">
            <summary>
            （内部方法）发起一个网络请求。网络相关的 API 在使用前需要配置域名白名单。
            请参考 https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/guide/basic-ability/network/
            </summary>
            <param name="url">请求地址</param>
            <param name="options">相关设置</param>
            <param name="success">请求'成功'的回调</param>
            <param name="fail">请求失败的回调</param>
        </member>
        <member name="M:TTSDK.TTRequest.InnerRequestV2(System.String,TTSDK.TTRequest.InnerOptions,System.Action{TTSDK.TTRequest.ResponseJobj},System.Action{TTSDK.TTRequest.ResponseJobj})">
            <summary>
            （内部方法）发起一个网络请求。网络相关的 API 在使用前需要配置域名白名单。
            请参考 https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/guide/basic-ability/network/
            </summary>
            <param name="url">请求地址</param>
            <param name="options">相关设置</param>
            <param name="success">请求'成功'的回调</param>
            <param name="fail">请求失败的回调</param>
        </member>
        <member name="F:TTSDK.GiftResult.GiftId">
            <summary>
            礼包类型id
            </summary>
        </member>
        <member name="F:TTSDK.GiftResult.GiftCode">
            <summary>
            用户在获取到礼包兑换码进入游戏后，发起核销兑换码的动作，开发者需要使用本接口校验礼包兑换码的有效性。校验通过后才可以发放对应礼包
            </summary>
        </member>
        <member name="F:TTSDK.GiftResult.Status">
            <summary>
            礼包状态，init：待使用，finish：已核销，cancel 已取消
            </summary>
        </member>
        <member name="F:TTSDK.OpenAwemeCustomerSuccessResult.ErrMsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="F:TTSDK.OpenAwemeCustomerSuccessResult.PayTime">
            <summary>
            支付时间
            </summary>
        </member>
        <member name="F:TTSDK.OpenAwemeCustomerSuccessResult.Gift">
            <summary>
            礼包详情（若为礼包购买）
            </summary>
        </member>
        <member name="F:TTSDK.OpenAwemeCustomerServiceParam.BuyQuantity">
            <summary>
            必填（道具直购场景除外） 金币购买数量，金币数量必须满足：金币数量*金币单价 = 限定价格等级（详见下方 buyQuantity 限制说明。开发者可以在字节小游戏平台的“支付”tab 设置游戏币单价）
            </summary>
        </member>
        <member name="F:TTSDK.OpenAwemeCustomerServiceParam.CustomId">
            <summary>
            必填   游戏开发者自定义的唯一订单号，订单支付成功后通过服务端支付结果回调回传
            </summary>
        </member>
        <member name="F:TTSDK.OpenAwemeCustomerServiceParam.CurrencyType">
            <summary>
            非必填 币种, 目前仅为"CNY"
            </summary>
        </member>
        <member name="F:TTSDK.OpenAwemeCustomerServiceParam.ZoneId">
            <summary>
            非必填 游戏服务区 id，默认值为1，开发者自定义。游戏不分大区则默认填写"1"。如果应用支持多角色，则角色 ID 接在分区 ID 后，用"_"连接
            </summary>
        </member>
        <member name="F:TTSDK.OpenAwemeCustomerServiceParam.ExtraInfo">
            <summary>
            非必填 游戏开发者自定义的其他信息，订单支付成功后通过服务端支付结果回调回传。字符串长度最大不能超过 256。（强烈建议传入）
            </summary>
        </member>
        <member name="F:TTSDK.OpenAwemeCustomerServiceParam.GoodType">
            <summary>
            非必填（道具直购场景必填） 默认游戏币。 游戏币：0 | 1，道具直购：2。若goodType为道具直购场景，不可传buyQuantity
            </summary>
        </member>
        <member name="F:TTSDK.OpenAwemeCustomerServiceParam.OrderAmount">
            <summary>
            非必填（道具直购场景必填） 道具价格，人民币，单位分  
            </summary>
        </member>
        <member name="F:TTSDK.OpenAwemeCustomerServiceParam.GoodName">
            <summary>
            非必填 道具名称     
            </summary>
        </member>
        <member name="F:TTSDK.OpenAwemeCustomerServiceParam.GoodsId">
            <summary>
            非必填 （礼包场景必填）礼包Id
            </summary>
        </member>
        <member name="F:TTSDK.OpenAwemeCustomerServiceParam.Success">
            <summary>
            OpenAwemeCustomer 成功回调
            </summary>
        </member>
        <member name="F:TTSDK.OpenAwemeCustomerServiceParam.Fail">
            <summary>
            OpenAwemeCustomer 失败回调
            </summary>
        </member>
        <member name="F:TTSDK.OpenAwemeCustomerServiceParam.Complete">
            <summary>
            接口调用完成回调
            </summary>
        </member>
        <member name="T:TTSDK.FollowAwemeEvent">
            <summary>
            关注抖音的回调
            data 内容 :
            {
            "errCode" : 0,  成功时为0
            “errMsg” : "",  errCode不为0时，描述错误原因
            “hasFollowed” : true?false 关注抖音号结果
            }
            errCode：
            CODE_ERROR = -1
            CODE_NOT_SUPPORT = -2
            CODE_NOT_LOGIN = -3
            CODE_NO_ACTIVITY = -4
            CODE_UID_ERROR = -5
            </summary>
            <param name="followCallback"> 关注回调，参数为是否关注 </param>
            <param name="errorCallback"> 错误回调，参数为错误码 和 错误描述 </param>
        </member>
        <member name="T:TTSDK.CreateShortcutEvent">
            <summary>
            创建快捷方式回调
            data 内容 :
            {
            "errCode" : 0,  成功时为0
            “errMsg” : "",  errCode不为0时，描述错误原因
            }
            errCode：
            1 : 取消
            </summary>
            <param name="csCallback"> 创建回调，参数为是否成功 </param>
        </member>
        <member name="F:TTSDK.ErrorCode.ErrOk">
            <summary>
            OK
            </summary>
        </member>
        <member name="F:TTSDK.ErrorCode.ErrGameRecorderNotEnabled">
            <summary>
            禁止录屏
            </summary>
        </member>
        <member name="F:TTSDK.ErrorCode.ErrGameRecorderNotInit">
            <summary>
            录屏SDK未初始化
            </summary>
        </member>
        <member name="F:TTSDK.ErrorCode.ErrVideoFileNotExists">
            <summary>
            视频文件不存在
            </summary>
        </member>
        <member name="F:TTSDK.ErrorCode.ErrStartRecordError">
            <summary>
            开始录屏错误
            </summary>
        </member>
        <member name="F:TTSDK.ErrorCode.ErrClipVideoFailed">
            <summary>
            视频裁剪失败
            </summary>
        </member>
        <member name="F:TTSDK.ErrorCode.ErrShareVideoFail">
            <summary>
            视频分享失败
            </summary>
        </member>
        <member name="F:TTSDK.ErrorCode.ErrShareVideoCancel">
            <summary>
            视频分享取消
            </summary>
        </member>
        <member name="F:TTSDK.ErrorCode.ErrVideoFile">
            <summary>
            视频文件异常
            </summary>
        </member>
        <member name="F:TTSDK.ErrorCode.ErrAdModuleNotInit">
            <summary>
            广告模块未初始化
            </summary>
        </member>
        <member name="F:TTSDK.ErrorCode.ErrEmptyAdId">
            <summary>
            广告ID为空
            </summary>
        </member>
        <member name="F:TTSDK.ErrorCode.ErrAdModule">
            <summary>
            广告模块异常
            </summary>
        </member>
        <member name="F:TTSDK.ErrorCode.ErrLoadAdFailed">
            <summary>
            广告加载失败
            </summary>
        </member>
        <member name="T:TTSDK.TTHostEvent">
            <summary>
            宿主事件监听
            </summary>
        </member>
        <member name="M:TTSDK.TTHostEvent.AddHostEventListener(System.String,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData})">
            <summary>
            添加宿主事件监听
            </summary>
            <param name="eventName">事件名</param>
            <param name="callback">回调函数，(result) => {}，宿主事件触发后自动调用</param>
        </member>
        <member name="M:TTSDK.TTHostEvent.RemoveHostEventListener(System.String)">
            <summary>
            移除宿主事件监听
            </summary>
            <param name="eventName">事件名</param>
        </member>
        <member name="T:TTSDK.TTSDKComponent">
            <summary>
            The android bridge of the Container SDK.
            </summary>
        </member>
        <member name="T:TTSDK.Utils.Mock.IMockElement">
            <summary>
            MockUIUtil 中可用 OnGUI 方式自定义绘制界面的对象，方便扩展 MockUI
            </summary>
        </member>
        <member name="M:TTSDK.TTNativeCallSettings.GetNativeCallJSFlag">
            <summary>
            走 Js 基础库开关
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTNativeCallSettings.IsCallJs(System.String)">
            <summary>
            判断是否走 Js 基础库调用，仅当 nativeCallJsFlag 开关打开且不在例外的 exceptApiList 中时走 Js 基础库 
            </summary>
            <param name="methodName">开关细化到某一 methodName </param>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTNativeCallSettings.InitSettings">
            <summary>
            初始化 Unity native 小游戏调用链路的设置
            </summary>
        </member>
        <member name="M:TTSDK.TTNativeCallSettings.Report">
            <summary>
            上报 native JS 新链路的调用情况
            </summary>
        </member>
        <member name="M:TTSDK.TTNativeCallSettings.LoadSettingsContent">
            <summary>
            加载端上写入的 native_settings 配置
            https://cloud.bytedance.net/appSettings-v2/detail/config/193882/detail/status?x-resource-account=public
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTNativeCallSettings.InitNativeInfo(System.String)">
            <summary>
            初始化 Unity native 小游戏调用链路的设置
            </summary>
            <param name="jsonData">调用设置</param>
        </member>
        <member name="T:TTSDK.RequestMockModule">
            <summary>
            分享模块的mock层
            </summary>
        </member>
        <member name="T:TTSDK.MockUIUtil">
            <summary>
            使用GUI绘制出Mock层的工具类
            </summary>
        </member>
        <member name="M:TTSDK.MockUIUtil.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:TTSDK.MockUIUtil.Show(System.Collections.Generic.Dictionary{System.String,System.Action},TTSDK.MockModule)">
            <summary>
            键值对显示mock选项
            </summary>
            <param name="pairs">要显示的内容</param>
            <param name="targetModule">当前显示的目标模块</param>
        </member>
        <member name="M:TTSDK.MockUIUtil.GetScreenDp">
            <summary>
            获取屏幕密度，和屏幕的英寸长度dpi = a*a+b*b然后开平方再除以 屏幕英寸。
            dp ＝ px * (dpi / 160)
            </summary>
            <returns></returns>
        </member>
        <member name="T:TTSDK.TimeUtils">
            <summary>
            时间工具类
            </summary>
        </member>
        <member name="M:TTSDK.TimeUtils.GetCurrentTimeMs">
            <summary>
            获取当前时间，单位ms
            </summary>
        </member>
        <member name="T:TTSDK.SafeArea">
            <summary>
            在竖屏正方向下的安全区域
            </summary>
        </member>
        <member name="F:TTSDK.SafeArea.left">
            <summary>
            安全区域左上角横坐标
            </summary>
        </member>
        <member name="F:TTSDK.SafeArea.right">
            <summary>
            安全区域右下角横坐标
            </summary>
        </member>
        <member name="F:TTSDK.SafeArea.top">
            <summary>
            安全区域左上角纵坐标
            </summary>
        </member>
        <member name="F:TTSDK.SafeArea.bottom">
            <summary>
            安全区域右下角纵坐标
            </summary>
        </member>
        <member name="F:TTSDK.SafeArea.width">
            <summary>
            安全区域的宽度，单位逻辑像素
            </summary>
        </member>
        <member name="F:TTSDK.SafeArea.height">
            <summary>
            安全区域的高度，单位逻辑像素
            </summary>
        </member>
        <member name="T:TTSDK.DeviceScore">
            <summary>
            机型性能评分
            </summary>
        </member>
        <member name="T:TTSDK.Orientation">
            <summary>
            屏幕方向
            </summary>
        </member>
        <member name="F:TTSDK.Orientation.Portrait">
            <summary>
            竖屏
            </summary>
        </member>
        <member name="F:TTSDK.Orientation.Landscape">
            <summary>
            横屏
            </summary>
        </member>
        <member name="T:TTSDK.TTSystemInfo">
            <summary>
            系统信息
            </summary>
        </member>
        <member name="F:TTSDK.TTSystemInfo.hostName">
            <summary>
            当前宿主名，如 Douyin
            </summary>
        </member>
        <member name="F:TTSDK.TTSystemInfo.hostVersion">
            <summary>
            当前宿主版本号，如 19.2.0
            </summary>
        </member>
        <member name="F:TTSDK.TTSystemInfo.scVersion">
            <summary>
            TTContainer 底层框架版本号
            todo: TT 改名之后，这个字段名可能要改成 ttVersion
            </summary>
        </member>
        <member name="P:TTSDK.TTSystemInfo.ttVersion">
            <summary>
            TTContainer 底层框架版本号
            </summary>
        </member>
        <member name="F:TTSDK.TTSystemInfo.brand">
            <summary>，如 Apple、samsung
            手机设备制造商
            </summary>
        </member>
        <member name="F:TTSDK.TTSystemInfo.model">
            <summary>
            手机品牌，如 iPhone 12、SM-G9880
            </summary>
        </member>
        <member name="F:TTSDK.TTSystemInfo.platform">
            <summary>
            操作系统，如 ios、android
            </summary>
        </member>
        <member name="F:TTSDK.TTSystemInfo.system">
            <summary>
            系统版本，如 iOS 15.1.1、Android 11
            </summary>
        </member>
        <member name="F:TTSDK.TTSystemInfo.language">
            <summary>
            系统语言，如 zh_CN
            </summary>
        </member>
        <member name="F:TTSDK.TTSystemInfo.sdkVersion">
            <summary>
            客户端基础库版本
            </summary>
        </member>
        <member name="F:TTSDK.TTSystemInfo.pixelRatio">
            <summary>
            设备像素比
            </summary>
        </member>
        <member name="F:TTSDK.TTSystemInfo.screenHeight">
            <summary>
            屏幕高度，单位逻辑像素
            </summary>
        </member>
        <member name="F:TTSDK.TTSystemInfo.screenWidth">
            <summary>
            屏幕宽度，单位逻辑像素
            </summary>
        </member>
        <member name="F:TTSDK.TTSystemInfo.statusBarHeight">
            <summary>
            状态栏的高度
            </summary>
        </member>
        <member name="F:TTSDK.TTSystemInfo.safeArea">
            <summary>
            在竖屏正方向下的安全区域
            </summary>
        </member>
        <member name="F:TTSDK.TTSystemInfo.deviceScore">
            <summary>
            机型性能评分
            </summary>
        </member>
        <member name="P:TTSDK.TTVersions.GameVersion">
            <summary>
            游戏版本号是从AndroidManifest.xml解析出来
            </summary>
        </member>
        <member name="P:TTSDK.TTVersions.GamePublishVersion">
            <summary>
            游戏发布版本号，发布版本时发布工具中指定的版本号
            </summary>
        </member>
        <member name="P:TTSDK.TTVersions.UnitySDKVersion">
            <summary>
            根据CI填写
            </summary>
        </member>
        <member name="T:TTSDK.TTVersions.AndroidSDKVersion">
            <summary>
            Container的Version
            </summary>
        </member>
        <member name="M:TTSDK.TTVersions.AndroidSDKVersion.Ge(System.Int32,System.Int32)">
            <summary>
            是否 >= 目标版本号
            </summary>
            <param name="major"></param>
            <param name="minor"></param>
            <returns></returns>
        </member>
        <member name="T:TTSDK.IJsonObject">
             <summary>
             代码生成器自动实现，无须手动实现，在所需实现的 class 上加上注解 [JObject]，并且改为 partial class <br/>
             <code>
             [JObject]
             public partial class TestJObject {
                 [JField]
                 public string MyField;
            
                 [JField(Name = "custom_name")]
                 public string CustomNameField;
             }
             </code>
             <remarks>
             需要自动读写的 field 需要加上 [JField] 注解
             </remarks>
             </summary>
        </member>
        <member name="M:TTSDK.JsonObjectExt.ToJData(TTSDK.IJsonObject)">
            <summary>
            从一个 IJsonObject 类型对象转为 JsonData 对象
            </summary>
            <param name="p">参考 [JObject] 注解的使用</param>
            <seealso cref="T:TTSDK.IJsonObject"/>
            <returns></returns>
        </member>
        <member name="M:TTSDK.JsonObjectExt.ToJObject``1(TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            从 JsonData 转为指定的 IJsonObject 类型的对象
            </summary>
            <param name="data">Json 数据结构</param>
            <typeparam name="T">注解了 [JObject] 的目标类型，参考 [JObject] 的使用</typeparam>
            <seealso cref="T:TTSDK.IJsonObject"/>
            <returns></returns>
        </member>
        <member name="T:TTSDK.InvalidJFieldException">
            <summary>
            抛出字段检查异常，在 JObject.ToJData 阶段使用，可用于参数检查功能
            </summary>
        </member>
        <member name="M:TTSDK.TTLiveManager.CheckRoomIsValid(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData},System.Action{System.Int32,System.String},System.Action)">
            <summary>
            检查直播间/小游戏挂载状态是否有效
            </summary>
            <param name="param">入参，主要为直播间ID{"roomID":"xxxx"}，如从直播间进入小游戏roomId来源于启动参数中</param>
            <param name="successCallback">成功回调</param>
            <param name="failedCallback">失败回调</param>
            <param name="completeCallback">完成回调</param>
        </member>
        <member name="M:TTSDK.TTLiveManager.NavigateToLive(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData},System.Action{System.Int32,System.String},System.Action)">
            <summary>
            跳转至直播间
            </summary>
            <param name="param">入参，主要为直播间ID{"roomID":"xxxx"}</param>
            <param name="successCallback">成功回调</param>
            <param name="failedCallback">失败回调</param>
            <param name="completeCallback">完成回调</param>
        </member>
        <member name="T:TTSDK.AndroidStarkCallBridge">
            <summary>
            Android 旧的实现 (stark)
            </summary>
        </member>
        <member name="T:TTSDK.GetUnionGroupInfoSuccessResult">
            <summary>
            获取绑定群信息成功结果
            </summary>
        </member>
        <member name="F:TTSDK.GetUnionGroupInfoSuccessResult.BindStatus">
            <summary>
            目前公会的绑定状态，true 公会已绑定，false 公会未绑定
            </summary>
        </member>
        <member name="T:TTSDK.UnbindUnionGroupSuccessResult">
            <summary>
            解除绑定成功结果
            </summary>
        </member>
        <member name="T:TTSDK.JoinUnionGroupSuccessResult">
            <summary>
            添加公会群成功结果
            </summary>
        </member>
        <member name="T:TTSDK.GetUnionGroupInfoSuccessCallback">
            <summary>
            获取绑定群信息成功回调
            </summary>
        </member>
        <member name="T:TTSDK.UnionGroupParam">
            <summary>
            公会群通用参数
            </summary>
        </member>
        <member name="F:TTSDK.UnionGroupParam.UnionId">
            <summary>
            查询绑定群信息的公会 ID，格式限制为，长度不超过 30
            </summary>
        </member>
        <member name="F:TTSDK.UnionGroupParam.Fail">
            <summary>
            接口调用失败的回调函数
            </summary>
        </member>
        <member name="F:TTSDK.UnionGroupParam.Complete">
            <summary>
            接口调用结束的回调函数（调用成功、失败都会执行）
            </summary>
        </member>
        <member name="T:TTSDK.GetUnionGroupInfoParam">
            <summary>
            获取绑定群信息参数
            </summary>
        </member>
        <member name="F:TTSDK.GetUnionGroupInfoParam.Success">
            <summary>
            接口调用成功的回调函数
            </summary>
        </member>
        <member name="T:TTSDK.BindUnionGroupSuccessResult">
            <summary>
            绑定公开群成功结果
            </summary>
        </member>
        <member name="F:TTSDK.BindUnionGroupSuccessResult.BindResult">
            <summary>
            是否完成绑定公开群，true 完成绑定，false 未绑定
            </summary>
        </member>
        <member name="T:TTSDK.BindUnionGroupSuccessCallback">
            <summary>
            绑定公开群成功回调
            </summary>
        </member>
        <member name="T:TTSDK.BindUnionGroupParam">
            <summary>
            绑定公开群成功参数
            </summary>
        </member>
        <member name="F:TTSDK.BindUnionGroupParam.Success">
            <summary>
            接口调用成功的回调函数
            </summary>
        </member>
        <member name="T:TTSDK.UnbindUnionGroupSuccessCallback">
            <summary>
            解除绑定成功回调
            </summary>
        </member>
        <member name="F:TTSDK.UnbindUnionGroupParam.Success">
            <summary>
            接口调用成功的回调函数
            </summary>
        </member>
        <member name="T:TTSDK.JoinUnionGroupSuccessCallback">
            <summary>
            添加工会群成功回调
            </summary>
        </member>
        <member name="T:TTSDK.JoinUnionGroupParam">
            <summary>
            添加工会群参数
            </summary>
        </member>
        <member name="F:TTSDK.JoinUnionGroupParam.Success">
            <summary>
            接口调用成功的回调函数
            </summary>
        </member>
        <member name="T:TTSDK.DllMonoBehaviourAttribute">
            <summary>
            标记一个 MonoBehaviour 是会打包在 .dll 文件中的
            SDK 正常开发时无影响，在正式打包时生成一份 .cs 副本代码保存在 sdk 发布文件夹中，以防止 .prefab 引用丢失
            </summary>
        </member>
        <member name="T:TTSDK.MockSetting">
            <summary>
            Mock设置类
            </summary>
        </member>
        <member name="F:TTSDK.MockSetting.s_MockMoudle">
            <summary>
            用于记录开放了哪些模块
            </summary>
        </member>
        <member name="M:TTSDK.MockSetting.GetMockMoudle">
            <summary>
            获取当前设置的每个模块是否开放
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.MockSetting.OpenAllMockModule">
            <summary>
            打开所有的Mock模块，默认关闭所有模块
            </summary>
        </member>
        <member name="M:TTSDK.MockSetting.CloseAllMockModule">
            <summary>
            关闭所有的Mock模块，默认关闭所有模块
            </summary>
        </member>
        <member name="M:TTSDK.MockSetting.SwithMockModule(TTSDK.MockModule,System.Boolean,System.Object)">
            <summary>
            分模块设置各个功能模块对应的Mock UI开放和关闭，默认关闭所有模块
            extraData 大部分模块默认填null即可，目前已知的应用场景如下：
            module == MockModule.Host,enable == true,则extraData为<see cref="T:TTSDK.ContainerEnv"/>的变量，模拟当前在何处启动等
            </summary>
            <param name="module">目标功能模块</param>
            <param name="enable">是否开放</param>
            <param name="extraData">额外数据</param>
        </member>
        <member name="M:TTSDK.MockSetting.HasFlag(TTSDK.MockModule)">
            <summary>
            判断一个功能模块的Mock层是否已经打开
            </summary>
            <param name="module">目标模块</param>
            <returns>Mock层是否打开</returns>
        </member>
        <member name="T:TTSDK.RewardedAdClosedDelegate">
            <summary>
            绑定 close 事件的监听器。 当用户点击了 Video 广告上的关闭按钮时，会触发 close 事件的监听器。
            <param name="isEnded">用户是否完整观看了视频</param>
            <param name="count">用户完整观看了几次视频</param>
            </summary>
        </member>
        <member name="T:TTSDK.AdErrorDelegate">
            <summary>
            绑定 error 事件的监听器。 广告组件拉取广告素材和其他情况下如果发生错误，会触发 error 事件的监听器。
            <param name="code">错误码</param>
            <param name="message">错误信息</param>
            </summary>
        </member>
        <member name="T:TTSDK.AdResizeDelegate">
            <summary>
            开发者除了可以在创建 bannerAd 实例时指定广告的 style，还可以在获得实例后修改其 style 属性中的属性值。一旦广告尺寸发生变化，会触发 resize 事件的监听器。监听器会获得一个包含 width 和 height 属性的对象参数，该参数表征广告的实际渲染尺寸。
            <param name="width">广告实际渲染的宽度</param>
            <param name="height">广告实际渲染的高度</param>
            </summary>
        </member>
        <member name="T:TTSDK.TTBannerAd">
            <summary>
            BannerAd 对象
            </summary>
        </member>
        <member name="E:TTSDK.TTBannerAd.OnLoad">
            <summary>
            绑定 load 事件的监听器。 广告组件成功拉取广告素材时会触发 load 事件的监听器。
            </summary>
        </member>
        <member name="E:TTSDK.TTBannerAd.OnError">
            <summary>
            绑定 error 事件的监听器。 广告组件拉取广告素材时如果发生错误，会触发 error 事件的监听器。
            </summary>
        </member>
        <member name="E:TTSDK.TTBannerAd.OnClose">
            <summary>
            绑定 close 事件的监听器。 当用户点击了 Video 广告上的关闭按钮时，会触发 close 事件的监听器。
            </summary>
        </member>
        <member name="E:TTSDK.TTBannerAd.OnResize">
            <summary>
            开发者除了可以在创建 bannerAd 实例时指定广告的 style，还可以在获得实例后修改其 style 属性中的属性值。一旦广告尺寸发生变化，会触发 resize 事件的监听器。监听器会获得一个包含 width 和 height 属性的对象参数，该参数表征广告的实际渲染尺寸。
            </summary>
        </member>
        <member name="M:TTSDK.TTBannerAd.Show">
            <summary>
            显示。如果加载出错，会调用CreateBannerAd的参数 errCallback
            </summary>
        </member>
        <member name="M:TTSDK.TTBannerAd.Hide">
            <summary>
            隐藏
            </summary>
        </member>
        <member name="M:TTSDK.TTBannerAd.Destroy">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:TTSDK.TTBannerAd.ReSize(TTSDK.TTBannerStyle)">
            <summary>
            改变样式
            成功后会调用CreateBannerAd的参数 resizeCallback
            横屏下可以更改位置和宽度，竖屏下只能更改位置。
            </summary>
            <param name="style"> 样式："style":{"top":0, "left":0, "width":128}}</param>
        </member>
        <member name="M:TTSDK.TTBannerAd.IsInvalid">
            <summary>
            是否有效，bannerad在load出错的情况下，如果adInterval为-1，则无法再进行刷新。此时认为已失效，需要destroy再重新创建
            </summary>
        </member>
        <member name="T:TTSDK.TTInterstitialAd">
            <summary>
            InterstitialAd 对象
            </summary>
        </member>
        <member name="E:TTSDK.TTInterstitialAd.OnLoad">
            <summary>
            绑定 load 事件的监听器。 广告组件成功拉取广告素材时会触发 load 事件的监听器。
            </summary>
        </member>
        <member name="E:TTSDK.TTInterstitialAd.OnError">
            <summary>
            绑定 error 事件的监听器。 广告组件拉取广告素材时如果发生错误，会触发 error 事件的监听器。
            </summary>
        </member>
        <member name="E:TTSDK.TTInterstitialAd.OnClose">
            <summary>
            绑定 close 事件的监听器。 当用户点击了 Video 广告上的关闭按钮时，会触发 close 事件的监听器。
            </summary>
        </member>
        <member name="M:TTSDK.TTInterstitialAd.Load">
            <summary>
            加载
            </summary>
        </member>
        <member name="M:TTSDK.TTInterstitialAd.Show">
            <summary>
            显示
            </summary>
        </member>
        <member name="M:TTSDK.TTInterstitialAd.IsLoaded">
            <summary>
            是否已加载
            </summary>
        </member>
        <member name="M:TTSDK.TTInterstitialAd.Destroy">
            <summary>
            销毁
            </summary>
        </member>
        <member name="T:TTSDK.TTBannerStyle">
            <summary>
            Banner样式
            </summary>
        </member>
        <member name="F:TTSDK.TTBannerStyle.left">
            <summary>
            广告位区域左上角横坐标
            </summary>
        </member>
        <member name="F:TTSDK.TTBannerStyle.top">
            <summary>
            广告位区域左上角纵坐标
            </summary>
        </member>
        <member name="F:TTSDK.TTBannerStyle.width">
            <summary>
            广告位区域宽度
            </summary>
        </member>
        <member name="P:TTSDK.TTBannerStyle.height">
            <summary>
            广告位区域高度，受广告内容影响自主变化, 无法由外部指定
            </summary>
        </member>
        <member name="T:TTSDK.TTVideoAdCallback">
            <summary>
            广告的回调函数
            </summary>        
        </member>
        <member name="M:TTSDK.TTVideoAdCallback.OnVideoLoaded">
            <summary>
            广告加载成功
            </summary>
        </member>
        <member name="M:TTSDK.TTVideoAdCallback.OnVideoShow(System.Int64)">
            <summary>
            广告播放成功，Unity测触发该回调时间不准确，具体触发Show的时间参考返回毫秒时间戳
            </summary>
        </member>
        <member name="M:TTSDK.TTVideoAdCallback.OnError(System.Int32,System.String)">
            <summary>
            广告失败，错误码同 ShowVideoAd
            </summary>
        </member>
        <member name="M:TTSDK.TTVideoAdCallback.OnVideoClose(System.Int32,System.Int32,System.Int32)">
            <summary>
            广告关闭回调
            </summary>
            <param name="watchedTime">已播放时长.</param>
            <param name="effectiveTime">有效播放时长(超过此时长可以授予激励).</param>
            <param name="duration">视频总时长.</param>
        </member>
        <member name="E:TTSDK.TTRewardedVideoAd.OnLoad">
            <summary>
            绑定 load 事件的监听器。 广告组件成功拉取广告素材时会触发 load 事件的监听器。
            </summary>
        </member>
        <member name="E:TTSDK.TTRewardedVideoAd.OnError">
            <summary>
            绑定 error 事件的监听器。 广告组件拉取广告素材时如果发生错误，会触发 error 事件的监听器。
            </summary>
        </member>
        <member name="E:TTSDK.TTRewardedVideoAd.OnClose">
            <summary>
            绑定 close 事件的监听器。 当用户点击了 Video 广告上的关闭按钮时，会触发 close 事件的监听器。
            </summary>
        </member>
        <member name="M:TTSDK.TTRewardedVideoAd.Load">
            <summary>
            加载
            </summary>
        </member>
        <member name="M:TTSDK.TTRewardedVideoAd.Show">
            <summary>
            显示
            </summary>
        </member>
        <member name="M:TTSDK.TTRewardedVideoAd.Destroy">
            <summary>
            销毁
            </summary>
        </member>
        <member name="F:TTSDK.CreateRewardedVideoAdParam.AdUnitId">
            <summary>
            广告aid
            </summary>
        </member>
        <member name="F:TTSDK.CreateRewardedVideoAdParam.Multiton">
            <summary>
            是否开启再得广告模式（只支持安卓系统的抖音和抖音极速版）
            </summary>
        </member>
        <member name="F:TTSDK.CreateRewardedVideoAdParam.MultitonRewardMsg">
            <summary>
            再得广告的奖励文案，玩家每看完一个广告都会展示，如【再看1个获得xx】xx就multitonRewardMsg中的文案，按顺序依次展示，单个文案最大长度为 7,multiton为true时必填
            </summary>
        </member>
        <member name="F:TTSDK.CreateRewardedVideoAdParam.MultitonRewardTimes">
            <summary>
            额外观看广告的次数，合法的数据范围为1-4，multiton为true时必填
            </summary>
        </member>
        <member name="F:TTSDK.CreateRewardedVideoAdParam.ProgressTip">
            <summary>
            是否开启进度提醒，开启时广告文案为【再看N个获得xx】，关闭时为【 再看1个获得xx】。N表示玩家当前还需额外观看广告的次数。
            </summary>
        </member>
        <member name="F:TTSDK.CreateBannerAdParam.BannerAdId">
            <summary>
            广告aid
            </summary>
        </member>
        <member name="F:TTSDK.CreateBannerAdParam.Style">
            <summary>
            样式："style":{"top":0, "left":0, "width":320}} width 在竖屏下会被限制在 [0.8*ScreenWidth,1.0*ScreenWidth]，横屏下会被限制在[128, 208]
            </summary>
        </member>
        <member name="F:TTSDK.CreateBannerAdParam.AdIntervals">
            <summary>
            广告自动刷新的间隔时间，单位为秒，参数值必须大于等于 30（该参数不传入时 Banner 广告不会自动刷新）.
            </summary>
        </member>
        <member name="T:TTSDK.TTAdManager">
            <summary>
            广告管理模块
            支持激励视屏，banner 和 插屏广告。
            开通指南：https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/functional-plug-in/advertising-component-access-guide/flow-main-open-process/
            </summary>
        </member>
        <member name="P:TTSDK.TTAdManager.IsShowLoadAdToast">
            <summary>
            是否显示广告加载提示，默认显示
            </summary>
        </member>
        <member name="M:TTSDK.TTAdManager.ShowVideoAdWithId(System.String,System.Boolean,System.String[],System.Int32,System.Boolean,System.Action{System.Boolean,System.Int32},System.Action{System.Int32,System.String})">
            <summary>
            展示激励视频广告，在广告未加载时会发起异步请求，弱网情况下会进行重试。失败会调用errCallback
            激励视频广告只支持一个实例，申请多个激励视频广告位是无效的
            简单回调设置，激励视频完成和错误的回调函数
            与 SetVideoAdCallBack 不冲突，在结束时都会被调用到，会同时收到close和complete
            错误码由sdk传出，原因参考
            https://bytedance.feishu.cn/docs/doccn1lAbZzMOqI5ueq1gCyPdcg#
            https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/open-capacity/ads/ads-error-code-description/
            https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/api/open-interface/ads/tt-create-interstitial-ad
            1004 可能是由于广告请求被限制了次数，需要跟广告投放沟通
            如果需要更详细的回调信息，可使用 SetVideoAdCallBack
            </summary>
            <param name="videoAdid">广告aid.</param>
            <param name="closeCallback">视频广告关闭回调，参数含义 IsComplete,表明广告是否播放完成.</param>
            <param name="errCallback">视频广告错误回调，参数含义 errCode, errMsg 表明错误码和错误描述.</param>
            再得添加 https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/open-capacity/ads/rewardagainintroduce
            <param name="multiton">是否开启再得广告模式（只支持安卓系统的抖音和抖音极速版）</param>
            <param name="multitonRewardMsg">再得广告的奖励文案，玩家每看完一个广告都会展示，如【再看1个获得xx】xx就multitonRewardMsg中的文案，按顺序依次展示，单个文案最大长度为 7,multiton为true时必填</param>
            <param name="multitonRewardTime">额外观看广告的次数，合法的数据范围为1-4，multiton为true时必填</param>
            <param name="progressTip">是否开启进度提醒，开启时广告文案为【再看N个获得xx】，关闭时为【 再看1个获得xx】。N表示玩家当前还需额外观看广告的次数。</param>
        </member>
        <member name="M:TTSDK.TTAdManager.ShowVideoAdWithId(System.String,System.Action{System.Boolean},System.Action{System.Int32,System.String},TTSDK.TTVideoAdCallback)">
            <summary>
            展示激励视频广告，在广告未加载时会发起异步请求，弱网情况下会进行重试。失败会调用errCallback
            激励视频广告只支持一个实例，申请多个激励视频广告位是无效的
            简单回调设置，激励视频完成和错误的回调函数
            与 SetVideoAdCallBack 不冲突，在结束时都会被调用到，会同时收到close和complete
            错误码由sdk传出，原因参考
            https://bytedance.feishu.cn/docs/doccn1lAbZzMOqI5ueq1gCyPdcg#
            https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/open-capacity/ads/ads-error-code-description/
            https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/api/open-interface/ads/tt-create-interstitial-ad
            1004 可能是由于广告请求被限制了次数，需要跟广告投放沟通
            如果需要更详细的回调信息，可使用 SetVideoAdCallBack
            </summary>
            <param name="videoAdid">广告aid.</param>
            <param name="closeCallback">视频广告关闭回调，参数含义 IsComplete,表明广告是否播放完成.</param>
            <param name="errCallback">视频广告错误回调，参数含义 errCode, errMsg 表明错误码和错误描述.</param>
            <param name="adCallback">视频广告详细过程回调，一般可以不关注.</param>
        </member>
        <member name="M:TTSDK.TTAdManager.CreateRewardedVideoAd(System.String,System.Action{System.Boolean,System.Int32},System.Action{System.Int32,System.String},TTSDK.TTVideoAdCallback,System.Boolean,System.String[],System.Int32,System.Boolean)">
            <summary>
            创建激励视频广告，在广告未加载时会发起异步请求，弱网情况下会进行重试。失败会调用errCallback
            激励视频广告只支持一个实例，申请多个激励视频广告位是无效的
            简单回调设置，激励视频完成和错误的回调函数
            错误码由sdk传出，原因参考
            https://bytedance.feishu.cn/docs/doccn1lAbZzMOqI5ueq1gCyPdcg#
            https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/open-capacity/ads/ads-error-code-description/
            https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/api/open-interface/ads/tt-create-interstitial-ad
            1004 可能是由于广告请求被限制了次数，需要跟广告投放沟通
            如果需要更详细的回调信息，可使用 SetVideoAdCallBack
            </summary>
            <param name="videoAdId">广告aid.</param>
            <param name="closeCallback">视频广告关闭回调，参数含义 IsComplete,表明广告是否播放完成.</param>
            <param name="errCallback">视频广告错误回调，参数含义 errCode, errMsg 表明错误码和错误描述.</param>
            <param name="videoAdLoadCallback">视频广告详细过程回调，一般可以不关注.</param>
            /// 再得添加 https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/open-capacity/ads/rewardagainintroduce
            <param name="multiton">是否开启再得广告模式（只支持安卓系统的抖音和抖音极速版）</param>
            <param name="multitonRewardMsg">再得广告的奖励文案，玩家每看完一个广告都会展示，如【再看1个获得xx】xx就multitonRewardMsg中的文案，按顺序依次展示，单个文案最大长度为 7,multiton为true时必填</param>
            <param name="multitonRewardTime">额外观看广告的次数，合法的数据范围为1-4，multiton为true时必填</param>
            <param name="progressTip">是否开启进度提醒，开启时广告文案为【再看N个获得xx】，关闭时为【 再看1个获得xx】。N表示玩家当前还需额外观看广告的次数。</param>
        </member>
        <member name="M:TTSDK.TTAdManager.CreateRewardedVideoAd(TTSDK.CreateRewardedVideoAdParam)">
            <summary>
            创建激励视频广告，在广告未加载时会发起异步请求，弱网情况下会进行重试。失败会调用errCallback
            激励视频广告只支持一个实例，申请多个激励视频广告位是无效的
            简单回调设置，激励视频完成和错误的回调函数
            错误码由sdk传出，原因参考
            https://bytedance.feishu.cn/docs/doccn1lAbZzMOqI5ueq1gCyPdcg#
            https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/open-capacity/ads/ads-error-code-description/
            https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/api/open-interface/ads/tt-create-interstitial-ad
            1004 可能是由于广告请求被限制了次数，需要跟广告投放沟通
            如果需要更详细的回调信息，可使用 SetVideoAdCallBack
            </summary>
            <param name="param">创建激励视频广告所需参数</param>
        </member>
        <member name="M:TTSDK.TTAdManager.CreateBannerAd(System.String,TTSDK.TTBannerStyle,System.Int32,System.Action{System.Int32,System.String},System.Action,System.Action{System.Int32,System.Int32},System.Action)">
            <summary>
            创建Banner广告，返回 BannerAd 实例。支持多实例，可以在一个页面下展示多个。也可以分页面展示
            竖屏情况下，Banner广告接受的宽度范围是 0.8*屏幕宽度，1.0*屏幕宽度。
            横屏情况下，Banner广告接受的最小宽度是 128，最大宽度是 208。
            开发者可以在这之间自由指定广告宽度。广告组件会自动等比例缩放素材。
            创建Banner示例后，要主动调用show来进行展示
            错误码由sdk传出，原因参考
            https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/ads/tt-create-banner-ad
            </summary>
            <param name="bannerAdId">	banner广告位的adid </param>
            <param name="style"> 样式："style":{"top":0, "left":0, "width":320}} width 在竖屏下会被限制在 [0.8*ScreenWidth,1.0*ScreenWidth]，横屏下会被限制在[128, 208]</param>
            <param name="adIntervals">	广告自动刷新的间隔时间，单位为秒，参数值必须大于等于 30（该参数不传入时 Banner 广告不会自动刷新）.</param>
            <param name="errCallback"> 广告错误回调，参数表明错误码和错误描述.</param>
            <param name="loadedCallback"> 广告加载回调.</param>
            <param name="resizeCallback"> 广告样式改变回调，第一个参数是width.第二个参数是height.</param>
            <param name="closeCallback">广告关闭回调，仅在WebGL有效</param>
        </member>
        <member name="M:TTSDK.TTAdManager.CreateBannerAd(TTSDK.CreateBannerAdParam)">
            <summary>
            创建Banner广告，返回 BannerAd 实例。支持多实例，可以在一个页面下展示多个。也可以分页面展示
            竖屏情况下，Banner广告接受的宽度范围是 0.8*屏幕宽度，1.0*屏幕宽度。
            横屏情况下，Banner广告接受的最小宽度是 128，最大宽度是 208。
            开发者可以在这之间自由指定广告宽度。广告组件会自动等比例缩放素材。
            创建Banner示例后，要主动调用show来进行展示
            错误码由sdk传出，原因参考
            https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/ads/tt-create-banner-ad
            </summary>
            <param name="param">创建Banner广告所需参数</param>
        </member>
        <member name="M:TTSDK.TTAdManager.CreateInterstitialAd(System.String,System.Action{System.Int32,System.String},System.Action,System.Action)">
            <summary>
            创建并播放插屏广告，在广告模块启动15s内不允许展示插屏广告
            两个插屏广告展示间隔不能少于30s
            插屏广告支持多实例。简单回调设置，插屏广告完成和错误的回调函数
            插屏广告实例只支持展示一次，出现加载错误，或 展示成功，点击关闭按钮或视频广告外的其他地方，广告实例都会自动销毁。下一次需再次创建。
            提供接口可以手动销毁
            错误码由sdk传出，原因参考
            https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/ads/tt-create-interstitial-ad
            </summary>
            <param name="interstitialAdId">	插屏广告位的adid </param>
            <param name="errCallback">广告视频错误回调，参数含义 errCode, errMsg 表明错误码和错误描述.</param>
            <param name="closeCallback">广告视频关闭回调.</param>
            <param name="loadedCallback">广告加载回调.</param>
        </member>
        <member name="M:TTSDK.TTAdManager.CreateInterstitialAd(TTSDK.CreateInterstitialAdParam)">
            <summary>
            创建并播放插屏广告，在广告模块启动15s内不允许展示插屏广告
            两个插屏广告展示间隔不能少于30s
            插屏广告支持多实例。简单回调设置，插屏广告完成和错误的回调函数
            插屏广告实例只支持展示一次，出现加载错误，或 展示成功，点击关闭按钮或视频广告外的其他地方，广告实例都会自动销毁。下一次需再次创建。
            提供接口可以手动销毁
            错误码由sdk传出，原因参考
            https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/ads/tt-create-interstitial-ad
            </summary>
            <param name="param">创建放插屏广告所需参数</param>
        </member>
        <member name="M:TTSDK.TTAdManager.SetVideoAdCallBack(TTSDK.TTVideoAdCallback)">
            <summary>
            设置激励视频广告的回调。获取完整的回调信息，一般处理都可以通过ShowVideoAdWithId完成，需要时使用
            </summary>
            <param name="callback">激励视频广告的回调.</param>
        </member>
        <member name="F:TTSDK.TTAdManager.s_IsShowLoadAdToast">
            <summary>
            是否显示广告加载进度弹窗
            </summary>
        </member>
        <member name="M:TTSDK.TTUpdateManager.OnCheckForUpdate(TTSDK.OnCheckForUpdateCallback)">
            <summary>
            当向字节小程序后台请求完新版本信息，会进行回调。
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TTUpdateManager.OnUpdateReady(TTSDK.OnUpdateReadyCallback)">
            <summary>
            当新版本下载完成，会进行回调。
            </summary>
            <param name="callback">当新版本下载完成后进行回调的函数</param>
        </member>
        <member name="M:TTSDK.TTUpdateManager.OnUpdateFailed(TTSDK.OnUpdateFailedCallback)">
            <summary>
            当新版本下载失败，会进行回调。
            </summary>
            <param name="callback">当新版本下载失败时回调的函数</param>
        </member>
        <member name="M:TTSDK.TTUpdateManager.ApplyUpdate(TTSDK.ApplyUpdateParams)">
            <summary>
            当新版本下载完成，调用该方法会强制当前小游戏应用上新版本并重启。
            </summary>
            <param name="applyUpdateParams"></param>
        </member>
        <member name="F:TTSDK.ErrorType.Unknown">
            <summary>
            未知错误
            </summary>
        </member>
        <member name="F:TTSDK.ErrorType.D">
            <summary>
            D 表示 Developer 开发者逻辑导致的错误，例如参数错误，订单重复支付等
            </summary>
        </member>
        <member name="F:TTSDK.ErrorType.U">
            <summary>
            U 表示 User 用户操作导致的错误，例如用户未登录，用户未授权等
            </summary>
        </member>
        <member name="F:TTSDK.ErrorType.F">
            <summary>
            F 表示 Framework 内部框架错误 ，例如网络错误，参数错误等
            </summary>
        </member>
        <member name="F:TTSDK.ErrorType.I">
            <summary>
            I 表示 Information 用户使用过程中产生的过程信息，例如用户未登录，用户未授权等
            </summary>
        </member>
        <member name="T:TTSDK.ErrorInfo">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:TTSDK.ErrorTypeUtils.Parse(System.String)">
            <summary>
            解析从字符串到 ErrorType 枚举类型。
            </summary>
            <param name="s">D, U, F, I 中的一种</param>
            <returns></returns>
        </member>
        <member name="T:TTSDK.UnityCompatibility">
            <summary>
            用于适配 Unity 版本间 API 迁移
            </summary>
        </member>
        <member name="M:TTSDK.UnityCompatibility.PostWwwForm(System.String,System.String)">
            <summary>
            调用 UnityWebRequest.PostWwwForm
            </summary>
            <param name="host"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="F:TTSDK.GetRealtimeManagerParam.SyncToConsole">
            <summary>
            true表示 log 内容会在 vConsole 或 IDE 控制台上展示， false 表示不展示。默认值是 false, Native方案暂该参数无效
            </summary>
        </member>
        <member name="T:TTSDK.RTCMockMoudle">
            <summary>
            分享模块的mock层
            </summary>
        </member>
        <member name="T:TTSDK.GameRecorderMockMoudle">
            <summary>
            录屏模块的mock层
            </summary>
        </member>
        <member name="M:TTSDK.TTDeviceMotion.StartDeviceMotionListening(TTSDK.TTDeviceMotion.Interval,TTSDK.TTDeviceMotion.MotionCallback)">
            <summary>
            开始监听设备方向变化
            </summary>
            <param name="interval">"监听设备方向的变化回调函数的执行频率,game 适用于更新游戏的回调频率，在 20ms/次 左右,ui 适用于更新 UI 的回调频率，在 60ms/次 左右,normal 普通的回调频率，在 200ms/次 左右"</param>
            <param name="callback"></param>
        </member>
        <member name="M:TTSDK.TTDeviceMotion.StopDeviceMotionListening(TTSDK.TTDeviceMotion.MotionCallback)">
            <summary>
            停止监听设备方向变化
            </summary>
            <param name="callback"></param>
        </member>
        <member name="F:TTSDK.TTDeviceMotion.OnDeviceMotionChange">
            <summary>
            监听设备方向变化事件
            </summary>
        </member>
        <member name="T:TTSDK.AccountMockModule">
            <summary>
            广告模块的mock层
            </summary>
        </member>
        <member name="M:TTSDK.AccountMockModule.Login(TTSDK.TTAccount.OnLoginSuccessCallback,TTSDK.TTAccount.OnLoginFailedCallback,System.Boolean)">
            <summary>
            登录的mock方法
            </summary>
            <param name="forceLogin"></param>
            <param name="successCallback"></param>
            <param name="failedCallback"></param>
        </member>
        <member name="M:TTSDK.AccountMockModule.CheckSession(TTSDK.TTAccount.OnCheckSessionSuccessCallback,TTSDK.TTAccount.OnCheckSessionFailedCallback)">
            <summary>
            检查session是否有效的mock方法
            </summary>
            <param name="successCallback"></param>
            <param name="failedCallback"></param>
        </member>
        <member name="M:TTSDK.AccountMockModule.GetUserInfo(TTSDK.TTAccount.OnGetUserInfoSuccessCallback,TTSDK.TTAccount.OnGetUserInfoFailedCallback)">
            <summary>
            获取用户信息的mock方法
            </summary>
            <param name="successCallback"></param>
            <param name="failedCallback"></param>
        </member>
        <member name="M:TTSDK.AccountMockModule.GetUserInfoAuth(TTSDK.TTAccount.OnGetUserInfoAuthSuccess,TTSDK.TTAccount.OnGetUserInfoAuthFail)">
            <summary>
            获取用户授权状态
            </summary>
            <param name="onGetUserInfoAuth"></param>
            <param name="onGetUserInfoAuthFail"></param>
        </member>
        <member name="M:TTSDK.AccountMockModule.OpenSettingsPanel(TTSDK.TTAccount.OnGetUserInfoAuthSuccess,TTSDK.TTAccount.OnGetUserInfoAuthFail)">
            <summary>
            主动打开授权界面，然后获取最新的授权状态
            </summary>
            <param name="onGetUserInfoAuth"></param>
            <param name="onGetUserInfoAuthFail"></param>
        </member>
        <member name="M:TTSDK.AccountMockModule.GetSetting(TTSDK.TTAccount.OnGetSettingSuccess,TTSDK.TTAccount.OnGetSettingFail)">
            <summary>
            获取用户已经授权过的配置。
            结果中只会包含向用户请求过的权限。
            与 OpenSetting 的区别是 GetSetting 只会获取配置，而不会打开配置页面。
            </summary>
            <param name="onGetSettingSuccess">接口调用成功的回调函数</param>
            <param name="onGetSettingFail">接口调用失败的回调函数</param>
        </member>
        <member name="M:TTSDK.AccountMockModule.OpenSetting(TTSDK.TTAccount.OnOpenSettingSuccess,TTSDK.TTAccount.OnOpenSettingFail)">
            <summary>
            打开设置页面，返回用户设置过的授权结果。
            结果中只会包含用户请求过的权限。
            与 GetSetting 的区别是，OpenSetting 会打开设置页面，而 GetSetting 只会返回用户授权的设置信息。
            <param name="onOpenSettingSuccess">接口调用成功的回调函数</param>
            <param name="onOpenSettingFail">接口调用失败的回调函数</param>
            </summary>
        </member>
        <member name="M:TTSDK.AccountMockModule.SetRealNameAuthenticationCallback(TTSDK.TTAccount.OnRealNameAuthentication)">
            <summary>
            用户在实名认证弹窗完成实名认证后回调
            必须在游戏初始化阶段就调用
            </summary>
        </member>
        <member name="T:TTSDK.TTGameRecorder">
            <summary>
            游戏内录屏模块
            </summary>
        </member>
        <member name="P:TTSDK.TTGameRecorder.IsShowShareVideoToast">
            <summary>
            是否显示视频分享Toast UI提示，默认显示
            </summary>
        </member>
        <member name="T:TTSDK.TTGameRecorder.OnRecordStartCallback">
            <summary>
            开始录屏
            </summary>
        </member>
        <member name="T:TTSDK.TTGameRecorder.OnRecordErrorCallback">
            <summary>
            录屏错误
            <param name="errCode">错误码</param>
            <param name="errMsg">错误消息</param>
            </summary>
        </member>
        <member name="T:TTSDK.TTGameRecorder.OnRecordCompleteCallback">
            <summary>
            录屏完成
            <param name="videoPath">实际视频路径</param>
            </summary>
        </member>
        <member name="T:TTSDK.TTGameRecorder.OnShareVideoSuccessCallback">
            <summary>
            视频分享成功
            </summary>
        </member>
        <member name="T:TTSDK.TTGameRecorder.OnShareVideoFailedCallback">
            <summary>
            视频分享失败
            <param name="errMsg">错误消息</param>
            </summary>
        </member>
        <member name="T:TTSDK.TTGameRecorder.OnShareVideoCancelledCallback">
            <summary>
            视频分享取消
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorder.m_IsShowShareVideoToastMessage">
            <summary>
            是否显示视频分享Loading界面
            </summary>
        </member>
        <member name="T:TTSDK.TTGameRecorder.TimeRange">
            <summary>
            时间片段（用于视频裁剪）
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorder.TimeRange.start">
            <summary>
            开始时间，单位ms
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorder.TimeRange.end">
            <summary>
            结束时间，单位ms
            </summary>
        </member>
        <member name="T:TTSDK.TTGameRecorder.VideoRecordState">
            <summary>
            录屏状态枚举
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorder.VideoRecordState.RECORD_STARTING">
            <summary>
            录制开始中
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorder.VideoRecordState.RECORD_STARTED">
            <summary>
            录制已开始
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorder.VideoRecordState.RECORD_PAUSING">
            <summary>
            录制暂停中
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorder.VideoRecordState.RECORD_PAUSED">
            <summary>
            录制已暂停
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorder.VideoRecordState.RECORD_STOPING">
            <summary>
            录制停止中
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorder.VideoRecordState.RECORD_STOPED">
            <summary>
            录制已停止
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorder.VideoRecordState.RECORD_COMPLETED">
            <summary>
            录制结束
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorder.VideoRecordState.RECORD_ERROR">
            <summary>
            录制错误
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorder.VideoRecordState.RECORD_VIDEO_TOO_SHORT">
            <summary>
            录制的视频时长太短
            </summary>
        </member>
        <member name="T:TTSDK.TTGameRecorder.VideoShareState">
            <summary>
            视频分享状态枚举
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorder.VideoShareState.NONE">
            <summary>
            未进行视频分享
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorder.VideoShareState.SHARING">
            <summary>
            视频分享中
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorder.VideoShareState.WAITING_CALLBACK">
            <summary>
            等待分享器回调
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorder.VideoShareState.SHARE_SUCCESS">
            <summary>
            视频分享成功
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorder.VideoShareState.SHARE_FAILED">
            <summary>
            视频分享失败
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorder.VideoShareState.SHARE_CANCELLED">
            <summary>
            视频分享取消
            </summary>
        </member>
        <member name="M:TTSDK.TTGameRecorder.SetEnabled(System.Boolean)">
            <summary>
            设置录屏是否开启
            </summary>
            <param name="enabled">开启设置为true，禁止设置为false</param>
        </member>
        <member name="M:TTSDK.TTGameRecorder.GetEnabled">
            <summary>
            获取录屏开启状态
            </summary>
            <returns>返回true则表示录屏开启，返回false为录屏关闭</returns>
        </member>
        <member name="M:TTSDK.TTGameRecorder.SetCustomKeyFrameInterval(System.Int32,System.Action{System.Boolean})">
            <summary>
            设置录屏关键帧插帧间隔
            内部默认关键帧间隔1s，若需要更小的关键帧间隔精度，可通过该接口设置关键帧间隔
            插帧思路按照帧间隔在超过下述设置阈值后，将自动将对应到来的帧插成关键帧
            在录制前设置，在下次录制时候即生效
            </summary>
            <param name="millisecond">视频关键帧插帧间隔 单位ms，默认值-1，为不插帧</param>
            <param name="callBack">是否设置成功回调, true 成功  false 失败</param>
        </member>
        <member name="M:TTSDK.TTGameRecorder.Start(System.Boolean,System.Int32,TTSDK.TTGameRecorder.OnRecordStartCallback,TTSDK.TTGameRecorder.OnRecordErrorCallback,TTSDK.TTGameRecorder.OnRecordCompleteCallback)">
            <summary>
            开始录屏
            <param name="isRecordAudio">是否录制声音，默认为录制声音</param>
            <param name="maxRecordTimeSec">最大录制时长，单位 s。小于等于 0 则无限制。默认为10分钟</param>
            <param name="startCallback">视频录制开始回调</param>
            <param name="errorCallback">视频录制失败回调</param>
            </summary>
            <returns>函数调用状态，调用成功返回true，否则返回false</returns>
        </member>
        <member name="M:TTSDK.TTGameRecorder.Stop(TTSDK.TTGameRecorder.OnRecordCompleteCallback,TTSDK.TTGameRecorder.OnRecordErrorCallback,System.Collections.Generic.List{TTSDK.TTGameRecorder.TimeRange},System.Boolean)">
            <summary>
            停止录屏
            <param name="completeCallback">视频录制完成回调</param>
            <param name="errorCallback">视频录制失败回调</param>
            <param name="clipRanges">停止后需要对视频进行裁剪的时间片段，如果为null或空列表，则不对视频进行裁剪</param>
            <param name="autoMerge">是否对视频裁剪片段进行自动合并。
                                    合并规则: 
                                        如果有两段重叠的时间片段，并且重叠部分小于等于1秒，则对这两段进行合并为一段
                                        若autoMerge为true，比如时间片段为{[1000, 5000], [4000, 7000]}，会被合并为{[1000, 7000]}。
                                        若autoMerge为false，将按原始传入的时间片段进行裁剪，是否有重叠，由调用方保证。主要用于自定义裁剪。 </param>
            </summary>
            <returns>函数调用状态，调用成功返回true，否则返回false</returns>
        </member>
        <member name="M:TTSDK.TTGameRecorder.GetRecordDuration">
            <summary>
            获取录屏时长
            </summary>
            <returns>返回录屏时长，单位 ms</returns>
        </member>
        <member name="M:TTSDK.TTGameRecorder.GetVideoRecordState">
            <summary>
            获取视频录制状态
            </summary>
            <returns>VideoRecordState</returns>
        </member>
        <member name="M:TTSDK.TTGameRecorder.SetDefaultBgm(System.String)">
            <summary>
            给录屏分享设置默认的配乐,若链接不符合要求则不生效，参考文档:https://bytedance.feishu.cn/docs/doccnlj9zMlqSbD0S0FEMonoJZd
            </summary>
            <param name="defaultBgm"> 抖音PGC音乐的短链。形如 "https://v.douyin.com/JmcxWo8/", null 或者 “”表示取消默认配乐 </param>
        </member>
        <member name="M:TTSDK.TTGameRecorder.GetVideoShareState">
            <summary>
            获取视频分享状态
            </summary>
            <returns>VideoClipState</returns>
        </member>
        <member name="M:TTSDK.TTGameRecorder.ShareVideo(TTSDK.TTGameRecorder.OnShareVideoSuccessCallback,TTSDK.TTGameRecorder.OnShareVideoFailedCallback,TTSDK.TTGameRecorder.OnShareVideoCancelledCallback)">
            <summary>
            分享视频。分享的视频文件是调用StopVideo后生成的文件。
            注意：视频分享需要录制至少3s的视频，低于3s的视频将会分享失败。
            </summary>
            <param name="successCallback">分享成功回调</param>
            <param name="failedCallback">分享失败回调</param>
            <param name="cancelledCallback">分享取消回调</param>
            <returns>函数调用状态，调用成功返回true，否则返回false</returns>
        </member>
        <member name="M:TTSDK.TTGameRecorder.ShareVideoWithTitleTopics(TTSDK.TTGameRecorder.OnShareVideoSuccessCallback,TTSDK.TTGameRecorder.OnShareVideoFailedCallback,TTSDK.TTGameRecorder.OnShareVideoCancelledCallback,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            带标题和话题的分享视频。分享的视频文件是调用StopVideo后生成的文件。
            注意：视频分享需要录制至少3s的视频，低于3s的视频将会分享失败。
            </summary>
            <param name="successCallback">分享成功回调</param>
            <param name="failedCallback">分享失败回调</param>
            <param name="cancelledCallback">分享取消回调</param>
            <param name="title">分享视频的标题，如不需要设置标题，可以传null或空字符串</param>
            <param name="topics">分享视频的话题，如不需要设置话题，可以传null或空列表</param>
            <returns>函数调用状态，调用成功返回true，否则返回false</returns>
        </member>
        <member name="M:TTSDK.TTGameRecorder.ShareVideoWithJson(TTSDK.TTGameRecorder.OnShareVideoSuccessCallback,TTSDK.TTGameRecorder.OnShareVideoFailedCallback,TTSDK.TTGameRecorder.OnShareVideoCancelledCallback,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            带Json数据格式的分享视频。分享的视频文件是调用StopVideo后生成的文件。
            注意：视频分享需要录制至少3s的视频，低于3s的视频将会分享失败。
            </summary>
            <param name="successCallback">分享成功回调</param>
            <param name="failedCallback">分享失败回调</param>
            <param name="cancelledCallback">分享取消回调</param>
            <param name="shareJson">视频分享的其它一些字段信息
                                    (除videoPath、channel字段的其它字段信息，如分享话题、标题、描述等)。
                                     参考：https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/retweet/tt-share-app-message/
                                     </param>
            <returns>函数调用状态，调用成功返回true，否则返回false</returns>
        </member>
        <member name="T:TTSDK.PlayerPrefs">
            <summary>
              <para>`PlayerPrefs` is a class that stores Player preferences between game sessions. It can store string, float and integer values into the user’s platform registry.</para>
            </summary>
        </member>
        <member name="M:TTSDK.PlayerPrefs.SetInt(System.String,System.Int32)">
            <summary>
              <para>Sets a single integer value for the preference identified by the given key. You can use PlayerPrefs.GetInt to retrieve this value.</para>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:TTSDK.PlayerPrefs.GetInt(System.String,System.Int32)">
            <summary>
              <para>Returns the value corresponding to key in the preference file if it exists.</para>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:TTSDK.PlayerPrefs.SetFloat(System.String,System.Single)">
            <summary>
              <para>Sets the float value of the preference identified by the given key. You can use PlayerPrefs.GetFloat to retrieve this value.</para>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:TTSDK.PlayerPrefs.GetFloat(System.String,System.Single)">
            <summary>
              <para>Returns the value corresponding to key in the preference file if it exists.</para>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:TTSDK.PlayerPrefs.SetString(System.String,System.String)">
            <summary>
              <para>Sets a single string value for the preference identified by the given key. You can use PlayerPrefs.GetString to retrieve this value.</para>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:TTSDK.PlayerPrefs.GetString(System.String,System.String)">
            <summary>
              <para>Returns the value corresponding to key in the preference file if it exists.</para>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:TTSDK.PlayerPrefs.HasKey(System.String)">
            <summary>
              <para>Returns true if the given key exists in PlayerPrefs, otherwise returns false.</para>
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:TTSDK.PlayerPrefs.DeleteKey(System.String)">
            <summary>
              <para>Removes the given key from the PlayerPrefs. If the key does not exist, DeleteKey has no impact.</para>
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:TTSDK.PlayerPrefs.DeleteAll">
            <summary>
              <para>Removes all keys and values from the preferences. Use with caution.</para>
            </summary>
        </member>
        <member name="M:TTSDK.PlayerPrefs.Save">
            <summary>
              <para>Writes all modified preferences to disk.</para>
            </summary>
        </member>
        <member name="T:TTSDK.GeneralCallbackResult">
            <summary>
            通用结果消息
            </summary>
        </member>
        <member name="F:TTSDK.GeneralCallbackResult.errMsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="T:TTSDK.UDPSocketConnectOption">
            <summary>
            TTUDPSocket.Connect 参数
            </summary>
        </member>
        <member name="F:TTSDK.UDPSocketConnectOption.address">
            <summary>
            要发送消息的地址
            </summary>
        </member>
        <member name="F:TTSDK.UDPSocketConnectOption.port">
            <summary>
            要发送消息的端口号
            </summary>
        </member>
        <member name="T:TTSDK.UDPSocketSendOption">
            <summary>
            TTUDPSocket.Send 参数
            </summary>
        </member>
        <member name="F:TTSDK.UDPSocketSendOption.address">
            <summary>
            要发送消息的地址
            </summary>
        </member>
        <member name="F:TTSDK.UDPSocketSendOption.port">
            <summary>
            要发送消息的端口号
            </summary>
        </member>
        <member name="F:TTSDK.UDPSocketSendOption.message">
            <summary>
            要发送的数据
            </summary>
        </member>
        <member name="F:TTSDK.UDPSocketSendOption.length">
            <summary>
            发送数据的长度，仅当 message 为 ArrayBuffer 类型时有效
            合法值：自然数，传入0的时候，会设为 message.byteLength
            </summary>
        </member>
        <member name="F:TTSDK.UDPSocketSendOption.offset">
            <summary>
            发送数据的偏移量，仅当 message 为 ArrayBuffer 类型时有效
            合法值：自然数，大于等于 message.byteLength 时会设为0
            </summary>
        </member>
        <member name="F:TTSDK.UDPSocketSendOption.setBroadcast">
            <summary>
            向指定地址发消息时，是否要开启广播
            </summary>
        </member>
        <member name="T:TTSDK.LocalInfo">
            <summary>
            本地信息
            </summary>
        </member>
        <member name="T:TTSDK.RemoteInfo">
            <summary>
            远端信息
            </summary>
        </member>
        <member name="T:TTSDK.UDPSocketOnMessageListenerResult">
            <summary>
            TTUDPSocket 消息结果
            </summary>
        </member>
        <member name="F:TTSDK.UDPSocketOnMessageListenerResult.localInfo">
            <summary>
            本地信息
            </summary>
        </member>
        <member name="F:TTSDK.UDPSocketOnMessageListenerResult.remoteInfo">
            <summary>
            远端信息
            </summary>
        </member>
        <member name="F:TTSDK.UDPSocketOnMessageListenerResult.message">
            <summary>
            消息内容
            </summary>
        </member>
        <member name="T:TTSDK.UDPSocketBindParam">
            <summary>
            适配层 TTUDPSocketBind 参数
            </summary>
        </member>
        <member name="F:TTSDK.UDPSocketBindParam.port">
            <summary>
            bind指定的端口号，合法值：[0, 65535]
            传入0或者不传，则绑定一个系统随机分配的可用端口
            </summary>
        </member>
        <member name="T:TTSDK.UDPSocketSendParam">
            <summary>
            适配层 TTUDPSocketSend 参数
            </summary>
        </member>
        <member name="T:TTSDK.TTUDPSocket">
            <summary>
            UDPSocket 实例
            </summary>
        </member>
        <member name="M:TTSDK.TTUDPSocket.Bind(System.Nullable{System.Int32})">
            <summary>
            绑定一个系统随机分配的可用端口，或绑定一个指定的端口号。bind 成功会触发 onListening 监听。
            </summary>
            <param name="port">bind指定的端口号，合法值：[0, 65535]。传入0或者不传，则绑定一个系统随机分配的可用端口。</param>
            <returns>绑定成功的端口号</returns>
        </member>
        <member name="M:TTSDK.TTUDPSocket.Close">
            <summary>
            关闭 UDP Socket 实例。
            在关闭之后，将无法再调用 Bind、Connect、Bind 等方法。
            </summary>
        </member>
        <member name="M:TTSDK.TTUDPSocket.Connect(TTSDK.UDPSocketConnectOption)">
            <summary>
            预先连接到指定的 IP 和端口。
            </summary>
            <param name="option"></param>
        </member>
        <member name="M:TTSDK.TTUDPSocket.OnMessage(System.Action{TTSDK.UDPSocketOnMessageListenerResult},System.Boolean)">
            <summary>
            监听收到消息的事件
            </summary>
            <param name="listener">事件监听函数</param>
            <param name="needInfo">回调中是否带有本地和远端地址信息</param>
        </member>
        <member name="M:TTSDK.TTUDPSocket.OffMessage(System.Action{TTSDK.UDPSocketOnMessageListenerResult})">
            <summary>
            移除收到消息事件的事件监听函数
            </summary>
            <param name="listener">事件监听函数</param>
        </member>
        <member name="M:TTSDK.TTUDPSocket.OnClose(System.Action{TTSDK.GeneralCallbackResult})">
            <summary>
            监听关闭的事件
            </summary>
            <param name="listener">事件监听函数</param>
        </member>
        <member name="M:TTSDK.TTUDPSocket.OffClose(System.Action{TTSDK.GeneralCallbackResult})">
            <summary>
            移除关闭事件的事件监听函数
            </summary>
            <param name="listener">事件监听函数</param>
        </member>
        <member name="M:TTSDK.TTUDPSocket.OnError(System.Action{TTSDK.GeneralCallbackResult})">
            <summary>
            监听错误的事件
            </summary>
            <param name="listener">事件监听函数</param>
        </member>
        <member name="M:TTSDK.TTUDPSocket.OffError(System.Action{TTSDK.GeneralCallbackResult})">
            <summary>
            移除错误事件的事件监听函数
            </summary>
            <param name="listener">事件监听函数</param>
        </member>
        <member name="M:TTSDK.TTUDPSocket.OnListening(System.Action{TTSDK.GeneralCallbackResult})">
            <summary>
            监听开始监听数据包的事件
            </summary>
            <param name="listener">事件监听函数</param>
        </member>
        <member name="M:TTSDK.TTUDPSocket.OffListening(System.Action{TTSDK.GeneralCallbackResult})">
            <summary>
            移除开始监听数据包事件的事件监听函数
            </summary>
            <param name="listener">事件监听函数</param>
        </member>
        <member name="M:TTSDK.TTUDPSocket.Send(TTSDK.UDPSocketSendOption)">
            <summary>
            向指定 IP 和端口发送消息。
            支持发送 string 或 byte[] 二进制数据。
            </summary>
            <param name="option">发送消息的参数</param>
        </member>
        <member name="T:TTSDK.BGGameApi.OnLoginSuccessCallback">
            <summary>
            登录成功回调
            </summary>
            <param name="isRelogin">是否是断线重连，true表示断线重连，false表示正常登录</param>
        </member>
        <member name="T:TTSDK.BGGameApi.OnLoginFailedCallback">
            <summary>
            登录失败回调
            </summary>
            <param name="errCode">客户端错误码</param>
            <param name="errMsg">客户端错误消息</param>
        </member>
        <member name="T:TTSDK.BGGameApi.OnDisconnectCallback">
            <summary>
            连接断开回调
            </summary>
        </member>
        <member name="T:TTSDK.BGGameApi.OnQueueNotifyCallback">
            <summary>
            排队队列更新回调
            </summary>
            <param name="pos">排队当前位置</param>
            <param name="waitTimeSec">排队需要等待的时间，单位 s </param>
        </member>
        <member name="T:TTSDK.BGGameApi.OnMessageEventCallback">
            <summary>
            业务消息事件回调
            </summary>
            <param name="data">服务器端返回的数据</param>
        </member>
        <member name="T:TTSDK.BGGameApi.OnLoginEventCallback">
            <summary>
            登录事件回调
            </summary>
            <param name="resumeMode">是否是断线重连，1表示是断线重连，0表示是正常登录</param>
            <param name="loginResult">登录结果，0表示登录成功，失败则为客户端错误码</param>
            <param name="serverResult">服务器端结果，0表示成功，失败则为服务器返回的错误码</param>
            注意：serverResult不为0，则loginResult一定不为0；loginResult为0，serverResult一定为0；loginResult不为0，serverResult可能为0
        </member>
        <member name="F:TTSDK.BGGameApi.s_OnLoginSuccessCallback">
            <summary>
            登录成功回调
            </summary>
        </member>
        <member name="F:TTSDK.BGGameApi.s_OnLoginFailedCallback">
            <summary>
            登录失败回调
            </summary>
        </member>
        <member name="F:TTSDK.BGGameApi.s_OnDisconnectCallback">
            <summary>
            断开连接回调
            </summary>
        </member>
        <member name="F:TTSDK.BGGameApi.s_OnQueueNotifyCallback">
            <summary>
            排队队列更新回调
            </summary>
        </member>
        <member name="F:TTSDK.BGGameApi.s_OnMessageEventCallback">
            <summary>
            业务消息事件回调
            </summary>
        </member>
        <member name="M:TTSDK.BGGameApi.SetOnLoginCallback(TTSDK.BGGameApi.OnLoginSuccessCallback,TTSDK.BGGameApi.OnLoginFailedCallback)">
            <summary>
            设置登录回调
            </summary>
            <param name="successCallback">登录成功回调</param>
            <param name="loginFailedCallback">登录失败回调</param>
        </member>
        <member name="M:TTSDK.BGGameApi.CreateContext(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            创建一个上下文环境，用于初始化相关信息
            </summary>
            <param name="code">Code ID</param>
            <param name="anonymousCode">Code ID</param>
            <param name="host">服务器主机地址</param>
            <param name="port">服务器端口号</param>
            <param name="connectTimeoutSec">与服务器连接超时时间</param>
            <returns>返回错误码状态，0表示成功，非0表示失败。可以通过调用 GetErrorString 函数获取错误信息。或者直接调用 GetLastErrorString 获取错误信息。</returns>
        </member>
        <member name="M:TTSDK.BGGameApi.DestroyContext">
            <summary>
            销毁上下文环境，清理数据
            </summary>
        </member>
        <member name="M:TTSDK.BGGameApi.StartConnect">
            <summary>
            开始与服务器端建立连接（包括登录流程）
            需要调用SetOnLoginEventCallback，监听登录状态
            </summary>
            <returns>返回错误码状态，0表示成功，非0表示失败。可以通过调用 GetErrorString 函数获取错误信息。或者直接调用 GetLastErrorString 获取错误信息。</returns>
        </member>
        <member name="M:TTSDK.BGGameApi.StopConnect">
            <summary>
            停止与服务器端的连接
            </summary>
        </member>
        <member name="M:TTSDK.BGGameApi.IsStopped">
            <summary>
            与服务器端连接是否已停止
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.BGGameApi.Update">
            <summary>
            更新内部逻辑状态
            !!!Note: 需要定期不断调用该函数（比如每隔100ms调用一次）
            </summary>
        </member>
        <member name="M:TTSDK.BGGameApi.SendMessage(System.String)">
            <summary>
            向服务器端发送业务消息
            通过调用 SetOnMessageEventCallback 函数监听服务器端的业务消息回调
            </summary>
            <param name="msg"></param>
            <returns>返回错误码状态，0表示成功，非0表示失败。可以通过调用 GetErrorString 函数获取错误信息。或者直接调用 GetLastErrorString 获取错误信息。</returns>
        </member>
        <member name="M:TTSDK.BGGameApi.GetErrorString(System.Int32)">
            <summary>
            根据错误码获取错误信息
            </summary>
            <param name="errorCode"></param>
            <returns>返回错误信息文本</returns>
        </member>
        <member name="M:TTSDK.BGGameApi.GetLastErrorString">
            <summary>
            获取最后一次错误的信息
            </summary>
            <returns>返回错误信息文本</returns>
        </member>
        <member name="T:TTSDK.BGGameApi.OnBGGameMessageEventCallback">
            <summary>
            业务消息事件回调
            </summary>
            <param name="ptr">底层C接口的数据指针</param>
            <param name="length">数据长度</param>
        </member>
        <member name="T:TTSDK.INativeModuleManager">
            <summary>
            Native Module 管理中心。
            <summary>
            代码生成器自动生成 NativeModuleManager.RegisterGen() 方法，注册所有自动生成的 Native Module 实现
            </summary>
            </summary>
        </member>
        <member name="M:TTSDK.INativeModuleManager.Get``1">
            <summary>
            从一个 NativeModule 接口类型获取其自动生成的实例对象
            </summary>
            <typeparam name="T">定义的 NativeModule 接口类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:TTSDK.INativeModule">
            <summary>
            Native 模块，对应 JS 适配层。
            <remarks>
            无需手写实现，此为代码生成器自动实现
            </remarks>
            </summary>
        </member>
        <member name="T:TTSDK.NativeModuleManager">
            <summary>
            <inheritdoc cref="T:TTSDK.INativeModuleManager"/>
            </summary>
        </member>
        <member name="T:TTSDK.CallResult">
            <summary>
            NativeModule 所有定义的方法的统一返回值类型
            </summary>
        </member>
        <member name="T:TTSDK.CallResult`1">
            <summary>
            <inheritdoc cref="T:TTSDK.CallResult"/>
            </summary>
            <typeparam name="T">具体的返回类型，必须标记了 [JObject]</typeparam>
        </member>
        <member name="T:TTSDK.EventCallback">
            <summary>
            IBridgeAPI 的简单实现，用于封装 Action 回调，简化写法
            </summary>
        </member>
        <member name="F:TTSDK.CallBridgeOptions.Timeout">
            <summary>
            等待回调超时时间（ms）
            </summary>
        </member>
        <member name="F:TTSDK.CallBridgeOptions.NoCallback">
            <summary>
            Native 层不会回调。此时 Timeout 值不生效。
            </summary>
        </member>
        <member name="M:TTSDK.CallBridgeExt.Call(TTSDK.ICallBridge,System.String,TTSDK.UNBridgeLib.LitJson.JsonData,System.Int64)">
            <summary>
            BridgeCallBack 的写法转异步实现，简化代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.CallBridgeExt.Call(TTSDK.ICallBridge,System.String,TTSDK.UNBridgeLib.LitJson.JsonData,TTSDK.CallBridgeOptions)">
            <summary>
            BridgeCallBack 的写法转异步实现，简化代码
            </summary>
            <returns></returns>
        </member>
        <member name="F:TTSDK.TTFavorite.Style.TopBar">
            <summary>
            顶部弹窗
            </summary>
        </member>
        <member name="F:TTSDK.TTFavorite.Style.BottomBar">
            <summary>
            底部弹窗
            </summary>
        </member>
        <member name="F:TTSDK.TTFavorite.Style.Tip">
            <summary>
            顶部气泡
            </summary>
        </member>
        <member name="M:TTSDK.TTFavorite.Collect(System.Action{System.Boolean})">
            <summary>
            游戏收藏
            </summary>
            <param name="callback"> 收藏回调，true表示成功，false表示失败 </param>
        </member>
        <member name="M:TTSDK.TTFavorite.CancelCollection(System.Action{System.Boolean})">
            <summary>
            取消游戏收藏
            </summary>
            <param name="callback"> 取消收藏回调，true表示成功，false表示失败 </param>
        </member>
        <member name="M:TTSDK.TTFavorite.IsCollected">
            <summary>
            游戏是否已收藏
            </summary>
            <returns>是否已收藏，true表示已收藏，false表示未收藏</returns>
        </member>
        <member name="M:TTSDK.TTFavorite.ShowFavoriteGuide(TTSDK.TTFavorite.Style,System.String)">
            <summary>
            收藏引导
            <param name="style">弹窗类型，默认为底部弹窗</param>
            <param name="content">弹窗文案，仅style为 Tip 时可修改，最多显示 12 个字符。</param>
            </summary>
        </member>
        <member name="M:TTSDK.TTFavorite.ShowRevisitGuide(System.Action{System.Boolean})">
            <summary>
            调起引导用户复访的提示弹窗，目前仅抖音宿主支持。
            为了更好的玩家体验，建议在按钮的点击回调中使用。
            </summary>
            <param name="callback">调起复访提示回调，true表示成功，false表示失败</param>
        </member>
        <member name="M:TTSDK.TTSDKLog.CanLog(TTSDK.TTSDKLog.LogType)">
            <summary>
            是否可以使用
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:TTSDK.TTSDKLog.TTPrintFile">
            <summary>
            打印到文件
            </summary>
        </member>
        <member name="M:TTSDK.TTSDKLog.TTPrintFile.BeginRecord">
            <summary>
            初始化打印文件的变量
            </summary>
        </member>
        <member name="M:TTSDK.TTSDKLog.TTPrintFile.EndRecord">
            <summary>
            结束打印
            </summary>
        </member>
        <member name="M:TTSDK.TTSDKLog.TTPrintFile.GetFullPath">
            <summary>
            文件名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTSDKLog.TTPrintFile.NeedLogStackTrace(UnityEngine.LogType)">
            <summary>
            是否需要打印栈信息
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:TTSDK.VideoClipUtils">
            <summary>
            视频裁剪工具类
            </summary>
        </member>
        <member name="M:TTSDK.VideoClipUtils.CreateClipTimeRange(System.Int32,System.Int32)">
            <summary>
            创建用于视频裁剪的时间片段 (需要在开始录屏后调用)
            以调用时的录屏时刻为基准，指定前 x 毫秒，后 y 毫秒为将要裁剪的片段，可以多次调用，记录不同时刻。
            在结束录屏时，可以调用 ClipVideo 接口剪辑并合成记录的片段。
            </summary>
            <param name="beforeNowMs">记录那一刻前的毫秒数</param>
            <param name="afterNowInMillis">记录那一刻后的毫秒数</param>
            <returns>TTGameRecorder.TimeRange</returns>
        </member>
        <member name="M:TTSDK.TTRank.SetImRankDataV2(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{System.Boolean,System.String})">
            https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/open-capacity/game-rank/setImRankData
            <summary>
            在关键的游戏场景，设置写入用户的排行榜数据（游戏成绩信息），该数据会上传到服务端
            </summary>
            <param name="dataType">0：数字类型、1：枚举类型;数字类型（0）往往适用于游戏的通关分数（103分、105分），枚举类型（1）适用于段位信息（青铜、白银）；--(Require)</param>
            <param name="value">展示出来的数值，dataType == 0 时只能传正数的字符串，否则会报错。value为具体的值，若dataType为0，请传入数字（eg：103、105）；若dataType为1，则传入字符串（eg：青铜、白银）--(Require)</param>
            <param name="priority">dataType 为 1 时，需要传入这个值判断权重，dataType 为 0 时，不填即可--(Require)</param>
            <param name="extra">预留字段--(Nullable)</param>
            <param name="zoneId">排行榜分区标识--(Nullable)</param>
            <param name="paramJson">以上参数使用json格式传入，例如"{"dataType":0,"value":"100","priority":0,"zoneId":"default"}"</param>
            <param name="action">回调函数</param>
        </member>
        <member name="M:TTSDK.TTRank.GetImRankListV2(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{System.Boolean,System.String})">
             <summary>
            获取排行榜列表，调用 API 后， 根据参数自动绘制游戏好友排行榜
             </summary>
             <param name="rankType">代表数据排序周期，day为当日写入的数据做排序；week为自然周，month为自然月，all为半年--(Require)</param>
             <param name="dataType">由于数字类型的数据与枚举类型的数据无法同时排序，因此需要选择排序哪些类型的数据--(Require)</param>
             <param name="relationType">选择榜单展示范围。default: 好友及总榜都展示，all：仅总榜单--(Nullable)</param>
             <param name="suffix">数据后缀，最后展示样式为 value + suffix，若suffix传“分”，则展示 103分、104分--(Nullable)</param>
             <param name="rankTitle">排行榜标题的文案--(Nullable)</param>
             <param name="zoneId">排行榜分区标识--(Nullable)</param>
             <param name="paramJson">以上参数使用json格式传入，例如"{"rankType":"week","dataType":0,"relationType":"all","suffix":"分","rankTitle":"","zoneId":"default"}"</param>
             <param name="action">回调函数</param>
        </member>
        <member name="M:TTSDK.TTRank.GetImRankDataV2(TTSDK.UNBridgeLib.LitJson.JsonData,TTSDK.TTRank.OnGetRankDataSuccessCallback,TTSDK.TTRank.OnGetRankDataFailCallback)">
            <summary>
            获取排序好的「好友/总榜」数据源，开发者基于数据源自行渲染返回的数据
            </summary>
            <param name="rankType">day、week、month、all--(Require)</param>
            <param name="dataType">0：数字类型 、 1：枚举类型--(Require)</param>
            <param name="relationType">friend：当前登录用户的好友的游戏数据排行，default：全部写入数据的排行 ，all: 总榜--(Require)</param>
            <param name="pageNum">页码，从1开始--(Require)</param>
            <param name="pageSize">每页长度，大于 0 小于 40--(Require)</param>
            <param name="zoneId">排行榜分区标识--(Nullable)</param>
            <param name="paramJson">以上参数使用Json格式传入,</param>
            <param name="onGetRankDataSuccessCallback">获取成功回调</param>
            <param name="onGetRankDataFailCallback">获取失败回调</param>
        </member>
        <member name="M:TTSDK.ReportTea.Report(System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            通过客户端的埋点上报工具上报
            </summary>
            <param name="eventName"></param>
            <param name="param"></param>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.VideoClipState.NONE">
            <summary>
            未进行视频裁剪
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.VideoClipState.CLIPPING">
            <summary>
            视频裁剪中
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.VideoClipState.CLIP_SUCCESS">
            <summary>
            视频裁剪完成
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.VideoClipState.CLIP_FAILED">
            <summary>
            视频裁剪失败
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.m_MaxRecordTimeSec">
            <summary>
            视频最大录制时长，单位s
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.m_OnRecordStartCallback">
            <summary>
            开始录屏回调
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.m_OnRecordCompleteCallback">
            <summary>
            录屏完成回调
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.m_OnRecordErrorCallback">
            <summary>
            录屏失败回调
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.m_OnRecordTimeoutCallback">
            <summary>
            录屏超时回调
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.m_ClipVideoSuccessCallback">
            <summary>
            视频裁剪成功回调
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.m_ClipVideoFailedCallback">
            <summary>
            视频裁剪失败回调
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.m_OnShareVideoSuccessCallback">
            <summary>
            视频分享成功回调
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.m_OnShareVideoFailedCallback">
            <summary>
            视频分享失败回调
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.m_OnShareVideoCancelledCallback">
            <summary>
            视频分享取消回调
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.m_RecordState">
            <summary>
            视频录制状态
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.m_VideoClipState">
            <summary>
            视频裁剪状态
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.m_VideoShareState">
            <summary>
            视频分享状态
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.m_VideoPath">
            <summary>
            录制完成后的视频路径
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.m_ClipVideoPath">
            <summary>
            裁剪后的视频路径
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.m_DefaultBgmPath">
            <summary>
            自助配乐
            </summary>
        </member>
        <member name="F:TTSDK.TTGameRecorderImpl.m_EnabledStatus">
            <summary>
            录屏开启状态，-1未知，0未开启，1开启。
            </summary>
        </member>
        <member name="M:TTSDK.TTGameRecorderImpl.SetEnabled(System.Boolean)">
            <summary>
            设置录屏是否开启
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:TTSDK.TTGameRecorderImpl.GetEnabled">
            <summary>
            获取录屏开启状态
            </summary>
            <returns>返回true则表示录屏开启，返回false为录屏关闭</returns>
        </member>
        <member name="M:TTSDK.TTGameRecorderImpl.Start(System.Boolean,System.Int32,TTSDK.TTGameRecorder.OnRecordStartCallback,TTSDK.TTGameRecorder.OnRecordErrorCallback,TTSDK.TTGameRecorder.OnRecordCompleteCallback)">
            <summary>
            开始录屏
            <param name="isRecordAudio">是否录制声音，默认为录制声音</param>
            <param name="maxRecordTimeSec">最大录制时长，单位 s。小于等于 0 则无限制。默认为10分钟</param>
            <param name="startCallback">视频录制开始回调</param>
            <param name="errorCallback">视频录制失败回调</param>
            <param name="timeoutCallback">录屏超时回调</param>
            </summary>
            <returns>函数调用状态，调用成功返回true，否则返回false</returns>
        </member>
        <member name="M:TTSDK.TTGameRecorderImpl.StartRecordInWebGL(System.Int32,TTSDK.TTGameRecorder.OnRecordStartCallback,TTSDK.TTGameRecorder.OnRecordErrorCallback,TTSDK.TTGameRecorder.OnRecordCompleteCallback)">
            <summary>
            WebGL开始录屏
            <param name="startCallback">视频录制开始回调</param>
            <param name="errorCallback">视频录制失败回调</param>
            </summary>
        </member>
        <member name="M:TTSDK.TTGameRecorderImpl.Stop(TTSDK.TTGameRecorder.OnRecordCompleteCallback,TTSDK.TTGameRecorder.OnRecordErrorCallback,System.Collections.Generic.List{TTSDK.TTGameRecorder.TimeRange},System.Boolean)">
            <summary>
            停止录屏
            </summary>
            <param name="clipRanges">停止后需要对视频进行裁剪的时间片段，如果为null或空列表，则不对视频进行裁剪</param>
            <param name="completeCallback">视频录制完成回调</param>
            <param name="errorCallback">视频录制失败回调</param>
            <param name="autoMerge">是否对视频裁剪片段进行自动合并。
                                    合并规则:
                                        如果有两段重叠的时间片段，并且重叠部分小于等于1秒，则对这两段进行合并为一段
                                        若autoMerge为true，比如时间片段为{[1000, 5000], [4000, 7000]}，会被合并为{[1000, 7000]}。
                                        若autoMerge为false，将按原始传入的时间片段进行裁剪，是否有重叠，由调用方保证。主要用于自定义裁剪。
            </param>
            <returns>函数调用状态，调用成功返回true，否则返回false</returns>
        </member>
        <member name="M:TTSDK.TTGameRecorderImpl.GetRecordDuration">
            <summary>
            获取录屏时长
            </summary>
            <returns>返回录屏时长，单位 ms</returns>
        </member>
        <member name="M:TTSDK.TTGameRecorderImpl.ClipVideo(System.String,TTSDK.TTGameRecorderImpl.OnClipVideoSuccessCallback,TTSDK.TTGameRecorderImpl.OnClipVideoFailedCallback,System.Collections.Generic.List{TTSDK.TTGameRecorder.TimeRange},System.Boolean)">
            <summary>
            视频裁剪
            </summary>
            <param name="successCallback"></param>
            <param name="failedCallback"></param>
            <param name="clipRanges">需要裁剪的时间片段，允许为null或空列表，如果列表为null或空，
                                     则默认使用RecordClip调用记录的时间片段，会对重合的时间进行合并，然后进行视频裁剪。
                                     如果不为空，则按传入的裁剪片段进行视频裁剪，时间片段重叠不会进行合并。主要用于乱序拼接。</param>
            <returns>函数调用状态，调用成功返回true，否则返回false</returns>
        </member>
        <member name="M:TTSDK.TTGameRecorderImpl.ShareVideo(TTSDK.TTGameRecorder.OnShareVideoSuccessCallback,TTSDK.TTGameRecorder.OnShareVideoFailedCallback,TTSDK.TTGameRecorder.OnShareVideoCancelledCallback)">
            <summary>
            分享视频
            </summary>
        </member>
        <member name="M:TTSDK.TTGameRecorderImpl.GetVideoRecordState">
            <summary>
            获取录屏状态
            </summary>
            <returns>VideoRecordState</returns>
        </member>
        <member name="M:TTSDK.TTGameRecorderImpl.GetVideoShareState">
            <summary>
            获取视频分享状态
            </summary>
            <returns>VideoShareState</returns>
        </member>
        <member name="T:TTSDK.NavigateMsg">
            <summary>
            游戏跳转返回的跳转信息
            用处：
            1.A->B A游戏跳转到B游戏，再从B游戏返回到A时，若A游戏没有被杀死则实时收到该信息
            2.A->B A游戏跳转到B游戏，再从B游戏返回到A时，若A游戏被杀死则下次A启动时再获取该信息
            </summary>
        </member>
        <member name="T:TTSDK.TTNavigateGame">
            <summary>
            提供游戏互跳功能的模块
            本地配置互跳信息的方法：
            在Resources文件加下添加game.json
            内容如下：
              [{
              "navigate_app_id": "互跳游戏1的appid",
              },
              {
              "navigate_app_id": "互跳游戏2的appid",
              }]
            </summary>
        </member>
        <member name="T:TTSDK.TTNavigateGame.OnNavigateGameReturn">
            <summary>
            当从跳转的目标游戏返回时且自身进程存在没有被玩家杀死则自动调用该方法
            A跳转B，B玩完返回A时，若A依旧存活则会自动调用该方法
            若A被用户杀死则下一次启动A时可以通过<see cref="M:TTSDK.TTNavigateGame.GetLastNavigateMsg(TTSDK.TTNavigateGame.OnNavigateGameReturn)"/>方法获取上次的拉起信息
            两种情况互斥，A依旧存活时，下次启动A就会获取不到信息；A被杀死，一定获取不到该回调，下次启动时会获取到拉起信息
            </summary>
            <param name="appId">跳转的目标appid</param>
            <param name="time">游玩时间</param>
        </member>
        <member name="T:TTSDK.TTNavigateGame.OnNavigateGameFail">
            <summary>
            跳转游戏时失败时调用这个回调
            </summary>
        </member>
        <member name="T:TTSDK.TTNavigateGame.OnVideoClose">
            <summary>
            当播放的视频被关闭时调用改接口
            </summary>
        </member>
        <member name="M:TTSDK.TTNavigateGame.NavigateToTargetGame(System.Int32,TTSDK.TTNavigateGame.OnNavigateGameReturn,TTSDK.TTNavigateGame.OnNavigateGameFail,System.String)">
            <summary>
            直接跳转至目标索引号所代表的游戏
            互跳的条目信息可有两个来源，网络动态拉取找对应QA同学配置，本地配置方法见类
            TTNavigateGame的注释。
            </summary>
            <param name="slotIndex">在服务器配置的游戏索引号，从0开始</param>
            <param name="onNavigateGameReturn">跳转返回时调用该方法</param>
            <param name="onNavigateGameFail">跳转失败时调用该方法，如没有获取到跳转信息</param>
            <param name="navigateExtraParam">跳转到对应游戏时传递的自定义参数</param>
        </member>
        <member name="M:TTSDK.TTNavigateGame.GetLastNavigateMsg(TTSDK.TTNavigateGame.OnNavigateGameReturn)">
            <summary>
            拉起方读取被拉起方传递的信息，只有A拉起B后，A被杀死无法从B获取通知时该接口才会有数据
            该接口涉及到读文件、Native方法调用，比较耗时，不可频繁调用！ 
            </summary>
            <param name="appId"></param>
            <param name="gameTime"></param>
            <param name="cpCustomizeMsg"></param>
            <returns>是否查找到跳转信息</returns>
        </member>
        <member name="M:TTSDK.TTNavigateGame.IsNavigateFromOtherGame(System.String@,System.String@)">
            <summary>
            判断当前游戏是否被另一个游戏拉起
            </summary>
            <param name="appId">该游戏被该appid对应的游戏拉起，若不是被拉起的appid为""</param>
            <param name="navigateExtraParam">获取从拉起方传递来的自定义数据，若不是被拉起的navigateExtraParam为""</param>
            <returns>true:当前游戏是被其他游戏拉起的，false:当前游戏不是由其他游戏拉起的</returns>
        </member>
        <member name="M:TTSDK.TTNavigateGame.Init">
            <summary>
            初始化，从服务器获取导航信息
            </summary>
        </member>
        <member name="M:TTSDK.TTNavigateGame.NavigateToGame(TTSDK.NavigateGameInfo,TTSDK.TTNavigateGame.OnNavigateGameReturn,System.String)">
            <summary>
            跳转到特定的游戏
            </summary>
            <returns>是否跳转成功</returns>
        </member>
        <member name="M:TTSDK.TTNavigateGame.SaveNavigateMsg">
            <summary>
            不开放给用户 TTSDK 实现的调用 Plugin 的存储文件的方法
            </summary>
        </member>
        <member name="T:TTSDK.TTNavigateGame.OnLaunchFromOtherGame">
            <summary>
            当该游戏由其他游戏拉起时，设置的回调
            </summary>
            <param name="appId">被哪个游戏拉起</param>
            <param name="extraData">被拉起游戏设置的额外信息</param>
        </member>
        <member name="M:TTSDK.TTNavigateGame.SetNavigateGameInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.String,System.String,TTSDK.NavigateGameType)">
            <summary>
            CP自己设置的在本游戏中推荐的游戏
            </summary>
            <param name="appid">目标appid</param>
            <param name="query">设置的query值</param>
            <param name="extraData">自定义的额外信息</param>
            <param name="url">视频的url链接</param>
        </member>
        <member name="M:TTSDK.TTNavigateGame.SetNavigateMsg(System.String)">
            <summary>
            被拉起方的游戏设置传递给拉起方的信息，拉起方可以读取设置的该信息
            游戏A拉起了游戏B:
            A若拉起B后在后台被杀死则通过<see cref="M:TTSDK.TTNavigateGame.GetLastNavigateMsg(TTSDK.TTNavigateGame.OnNavigateGameReturn)"/>接口可以获取到设置的信息
            A若拉起B后依旧在后台则通过<see cref="M:TTSDK.TTNavigateGame.NavigateToGame(TTSDK.NavigateGameInfo,TTSDK.TTNavigateGame.OnNavigateGameReturn,System.String)"/>设置的接口通知设置的信息
            该接口涉及到写文件、Native方法调用，比较耗时，不可频繁调用！
            </summary>
            <param name="cpCustomizeMsg"></param>
        </member>
        <member name="M:TTSDK.TTNavigateGame.SetOnLaunchFromOtherGameCallback(TTSDK.TTNavigateGame.OnLaunchFromOtherGame)">
            <summary>
            设置从其他游戏拉起的事件监听，从其他游戏拉起时会调用该回调
            一定要早于 TTSDK 的初始化
            </summary>
            <param name="onNavigateGameReturn">特定游戏的id</param> 
        </member>
        <member name="T:TTSDK.TTLocalNavigateList">
            <summary>
            供Java侧调用，获取保存到Unity本地的互跳信息
            </summary>
        </member>
        <member name="M:TTSDK.TTAPIMock.#ctor">
            <summary>
            创建mock模块
            </summary>
        </member>
        <member name="M:TTSDK.TTAPIMock.GetTTGameRecorder">
            <summary>
            获取游戏记录的Mock
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTAPIMock.GetTTAdManager">
            <summary>
            获取广告的Mock
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTAPIMock.GetTTShare">
            <summary>
            获取分享的Mock
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTAPIMock.GetTTFavorite">
            <summary>
            收藏模块的Mock
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTAPIMock.GetAccountManager">
            <summary>
            获取账号模块的Mock
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTSDK.TTAPIMock.GetTTRequest">
            <summary>
            获取账号模块的Mock
            </summary>
            <returns></returns>
        </member>
        <member name="T:TTSDK.TTAccountImpl">
            <summary>
            账号模块
            </summary>
        </member>
        <member name="M:TTSDK.TTAccountImpl.Login(TTSDK.TTAccount.OnLoginSuccessCallback,TTSDK.TTAccount.OnLoginFailedCallback,System.Boolean)">
            <summary>
            登录
            </summary>
            <param name="successCallback"></param>
            <param name="failedCallback"></param>
            <param name="forceLogin"></param>
        </member>
        <member name="M:TTSDK.TTAccountImpl.CheckSession(TTSDK.TTAccount.OnCheckSessionSuccessCallback,TTSDK.TTAccount.OnCheckSessionFailedCallback)">
            <summary>
            检查当前session是否有效
            </summary>
            <param name="successCallback"></param>
            <param name="failedCallback"></param>
        </member>
        <member name="M:TTSDK.TTAccountImpl.GetUserInfo(TTSDK.TTAccount.OnGetUserInfoSuccessCallback,TTSDK.TTAccount.OnGetUserInfoFailedCallback)">
            <summary>
            获取当前的用户信息
            </summary>
            <param name="successCallback"></param>
            <param name="failedCallback"></param>
        </member>
        <member name="M:TTSDK.TTAccountImpl.GetUserInfoAuth(TTSDK.TTAccount.OnGetUserInfoAuthSuccess,TTSDK.TTAccount.OnGetUserInfoAuthFail)">
            <summary>
            判断用户是否已经授权给当前游戏读取个人信息
            该API会调用宿主的代码，如果调用宿主代码成功则会调用onGetUserInfoAuth，并返回是否已经授权
            如果调用宿主代码失败则会调用onGetUserInfoAuthFail
            </summary>
        </member>
        <member name="M:TTSDK.TTAccountImpl.OpenSettingsPanel(TTSDK.TTAccount.OnGetUserInfoAuthSuccess,TTSDK.TTAccount.OnGetUserInfoAuthFail)">
            <summary>
            主动打开获取用户信息的授权界面
            该API会调用宿主的代码，如果调用宿主代码成功则会调用onGetUserInfoAuth，并返回最新的授权状态
            如果调用宿主代码失败则会调用onGetUserInfoAuthFail
            </summary>
        </member>
        <member name="M:TTSDK.TTAccountImpl.SetRealNameAuthenticationCallback(TTSDK.TTAccount.OnRealNameAuthentication)">
            <summary>
            用户在实名认证弹窗完成实名认证后回调
            必须在游戏初始化阶段就调用
            </summary>
        </member>
        <member name="T:TTSDK.TTPlayerPrefs">
            <summary>
              <para>`TTPlayerPrefs` is a class that stores Player preferences between game sessions. It can store string, float and integer values into the user’s platform registry.</para>
            </summary>
        </member>
        <member name="M:TTSDK.TTPlayerPrefs.SetInt(System.String,System.Int32)">
            <summary>
              <para>Sets a single integer value for the preference identified by the given key. You can use TTPlayerPrefs.GetInt to retrieve this value.</para>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:TTSDK.TTPlayerPrefs.GetInt(System.String,System.Int32)">
            <summary>
              <para>Returns the value corresponding to key in the preference file if it exists.</para>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:TTSDK.TTPlayerPrefs.SetFloat(System.String,System.Single)">
            <summary>
              <para>Sets the float value of the preference identified by the given key. You can use TTPlayerPrefs.GetFloat to retrieve this value.</para>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:TTSDK.TTPlayerPrefs.GetFloat(System.String,System.Single)">
            <summary>
              <para>Returns the value corresponding to key in the preference file if it exists.</para>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:TTSDK.TTPlayerPrefs.SetString(System.String,System.String)">
            <summary>
              <para>Sets a single string value for the preference identified by the given key. You can use TTPlayerPrefs.GetString to retrieve this value.</para>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:TTSDK.TTPlayerPrefs.GetString(System.String,System.String)">
            <summary>
              <para>Returns the value corresponding to key in the preference file if it exists.</para>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:TTSDK.TTPlayerPrefs.HasKey(System.String)">
            <summary>
              <para>Returns true if the given key exists in TTPlayerPrefs, otherwise returns false.</para>
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:TTSDK.TTPlayerPrefs.DeleteKey(System.String)">
            <summary>
              <para>Removes the given key from the TTPlayerPrefs. If the key does not exist, DeleteKey has no impact.</para>
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:TTSDK.TTPlayerPrefs.DeleteAll">
            <summary>
              <para>Removes all keys and values from the preferences. Use with caution.</para>
            </summary>
        </member>
        <member name="M:TTSDK.TTPlayerPrefs.Save">
            <summary>
              <para>Writes all modified preferences to disk.</para>
            </summary>
        </member>
        <member name="F:TTSDK.RewardedVideoAdImpl._videoAdState">
            <summary>
            video ad state.  
            Usually only state of `VideoAdState.Loaded` means it is properly loaded.  
            </summary>
        </member>
        <member name="F:TTSDK.RewardedVideoAdImpl._videoAdErrorCanBeAutoRetry">
            <summary>
            根据广告错误判断是否需要retry
            </summary>
        </member>
        <member name="F:TTSDK.RewardedVideoAdImpl._isReady">
            <summary>
            广告是否加载完成
            </summary>
        </member>
        <member name="M:TTSDK.RewardedVideoAdImpl.Show">
            <summary>
            加载广告，并在某些错误情况下进行有限次重试
            </summary>
        </member>
        <member name="F:TTSDK.FeedStatusEnum.FeedEnter">
            <summary>
            从Feed流中进入游戏
            </summary>
        </member>
        <member name="F:TTSDK.FeedStatusEnum.FeedExit">
            <summary>
            从游戏退回到Feed流
            </summary>
        </member>
        <member name="P:TTSDK.JFieldAttribute.Name">
            <summary>
            自定义写入 JsonData 中的字段名
            </summary>
        </member>
        <member name="T:TTSDK.JFieldCondition.NotNullAttribute">
            <summary>
            写入 JsonData 前检查此字段不能为 Null
            </summary>
        </member>
        <member name="T:TTSDK.JFieldCondition.StringNotNullOrEmptyAttribute">
            <summary>
            写入 JsonData 前检查此字段不能为空字符串或者 Null
            </summary>
        </member>
        <member name="P:TTSDK.NativeModuleAttribute.ForTest">
            <summary>
            为 Test 生成（不自动注册到 NativeModuleManager）
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkScreenManager.SetKeepScreenOn(System.Boolean,System.Action,System.Action{System.String})">
            <summary>
            设置是否保持屏幕常亮状态
            </summary>
            <param name="keepScreenOn">是否保持屏幕常亮</param>
            <param name="successCallback">接口调用成功的回调函数</param>
            <param name="failCallback">接口调用失败的回调函数</param>
        </member>
        <member name="M:StarkSDKSpace.StarkScreenManager.GetScreenBrightness(System.Action{System.Double},System.Action{System.String})">
            <summary>
            获取屏幕亮度。
            </summary>
            <param name="successCallback">接口调用成功的回调函数,屏幕亮度值，范围 0 ～ 1。0 最暗，1 最亮。</param>
            <param name="failCallback">接口调用失败的回调函数</param>
        </member>
        <member name="M:StarkSDKSpace.StarkScreenManager.SetScreenBrightness(System.Single,System.Action,System.Action{System.String})">
            <summary>
            设置屏幕亮度。
            </summary>
            <param name="value">屏幕亮度值，范围 0 ～ 1。（0 最暗，1 最亮）</param>
            <param name="successCallback">接口调用成功的回调函数</param>
            <param name="failCallback">接口调用失败的回调函数</param>
        </member>
        <member name="M:StarkSDKSpace.CloudDBUtil.GenServerDateJson(System.Int32)">
            <summary>
            返回一个 ServerDate 对象, 用于表示服务端时间, 可以用于插入数据或者 查询的条件判断
            </summary>
            <param name="offsetTimeMil"></param>
            <returns></returns>
        </member>
        <member name="T:StarkSDKSpace.StarkInvite.OnInviteStateChanged">
            <summary>
            抖音好友邀请状态变化
            <param name="state">状态值, 参考@InviteState</param>
            <param name="msg">状态对应的信息</param>
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkInvite.onInviteStateChanged">
            <summary>
            监听邀请状态变化事件
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkInvite.CreateInvitePanel(System.String,TTSDK.UNBridgeLib.LitJson.JsonData,TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{System.Boolean,System.String})">
            <summary>
            抖音好友邀请
            </summary>
            <param name="roomId">房间id</param>
            <param name="query">用于放在schema 里面的信息，Key-Value形式。</param>
            <param name="extra">额外扩展信息, Key-Value形式。</param>
            <param name="callback">调用结果回调： (isSuccess, errMsg) => {}</param>
            <code> Example
            StarkSDK.API.GetStarkInvite().onInviteStateChanged = (state, msg) =>
                {
                    Debug.Log($"onInviteStateChanged - state: {state}, msg: {msg}");
                };
            var roomId = "12345";
            var query = new JsonData {["test"] = "query"};
            JsonData extra = null;
            StarkSDK.API.GetStarkInvite().CreateInvitePanel(roomId, query, extra, (isSuccess, errorMsg) =>
            {
                if (isSuccess)
                {
                    Debug.Log("CreateInvitePanel success");
                }
                else
                {
                    Debug.Log($"CreateInvitePanel failed, {errorMsg}");
                }
            });
            </code>
        </member>
        <member name="T:StarkSDKSpace.GeneralCallbackResult">
            <summary>
            通用结果消息
            </summary>
        </member>
        <member name="F:StarkSDKSpace.GeneralCallbackResult.errMsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="T:StarkSDKSpace.UDPSocketConnectOption">
            <summary>
            StarkUDPSocket.Connect 参数
            </summary>
        </member>
        <member name="F:StarkSDKSpace.UDPSocketConnectOption.address">
            <summary>
            要发送消息的地址
            </summary>
        </member>
        <member name="F:StarkSDKSpace.UDPSocketConnectOption.port">
            <summary>
            要发送消息的端口号
            </summary>
        </member>
        <member name="T:StarkSDKSpace.UDPSocketSendOption">
            <summary>
            StarkUDPSocket.Send 参数
            </summary>
        </member>
        <member name="F:StarkSDKSpace.UDPSocketSendOption.address">
            <summary>
            要发送消息的地址
            </summary>
        </member>
        <member name="F:StarkSDKSpace.UDPSocketSendOption.port">
            <summary>
            要发送消息的端口号
            </summary>
        </member>
        <member name="F:StarkSDKSpace.UDPSocketSendOption.message">
            <summary>
            要发送的数据
            </summary>
        </member>
        <member name="F:StarkSDKSpace.UDPSocketSendOption.length">
            <summary>
            发送数据的长度，仅当 message 为 ArrayBuffer 类型时有效
            合法值：自然数，传入0的时候，会设为 message.byteLength
            </summary>
        </member>
        <member name="F:StarkSDKSpace.UDPSocketSendOption.offset">
            <summary>
            发送数据的偏移量，仅当 message 为 ArrayBuffer 类型时有效
            合法值：自然数，大于等于 message.byteLength 时会设为0
            </summary>
        </member>
        <member name="F:StarkSDKSpace.UDPSocketSendOption.setBroadcast">
            <summary>
            向指定地址发消息时，是否要开启广播
            </summary>
        </member>
        <member name="T:StarkSDKSpace.LocalInfo">
            <summary>
            本地信息
            </summary>
        </member>
        <member name="T:StarkSDKSpace.RemoteInfo">
            <summary>
            远端信息
            </summary>
        </member>
        <member name="T:StarkSDKSpace.UDPSocketOnMessageListenerResult">
            <summary>
            StarkUDPSocket 消息结果
            </summary>
        </member>
        <member name="F:StarkSDKSpace.UDPSocketOnMessageListenerResult.localInfo">
            <summary>
            本地信息
            </summary>
        </member>
        <member name="F:StarkSDKSpace.UDPSocketOnMessageListenerResult.remoteInfo">
            <summary>
            远端信息
            </summary>
        </member>
        <member name="F:StarkSDKSpace.UDPSocketOnMessageListenerResult.message">
            <summary>
            消息内容
            </summary>
        </member>
        <member name="T:StarkSDKSpace.UDPSocketBindParam">
            <summary>
            适配层 StarkUDPSocketBind 参数
            </summary>
        </member>
        <member name="F:StarkSDKSpace.UDPSocketBindParam.port">
            <summary>
            bind指定的端口号，合法值：[0, 65535]
            传入0或者不传，则绑定一个系统随机分配的可用端口
            </summary>
        </member>
        <member name="T:StarkSDKSpace.UDPSocketSendParam">
            <summary>
            适配层 StarkUDPSocketSend 参数
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkUDPSocket">
            <summary>
            UDPSocket 实例
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkUDPSocket.Bind(System.Nullable{System.Int32})">
            <summary>
            绑定一个系统随机分配的可用端口，或绑定一个指定的端口号。bind 成功会触发 onListening 监听。
            </summary>
            <param name="port">bind指定的端口号，合法值：[0, 65535]。传入0或者不传，则绑定一个系统随机分配的可用端口。</param>
            <returns>绑定成功的端口号</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkUDPSocket.Close">
            <summary>
            关闭 UDP Socket 实例。
            在关闭之后，将无法再调用 Bind、Connect、Bind 等方法。
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkUDPSocket.Connect(StarkSDKSpace.UDPSocketConnectOption)">
            <summary>
            预先连接到指定的 IP 和端口。
            </summary>
            <param name="option"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkUDPSocket.OnMessage(System.Action{StarkSDKSpace.UDPSocketOnMessageListenerResult},System.Boolean)">
            <summary>
            监听收到消息的事件
            </summary>
            <param name="listener">事件监听函数</param>
            <param name="needInfo">回调中是否带有本地和远端地址信息</param>
        </member>
        <member name="M:StarkSDKSpace.StarkUDPSocket.OffMessage(System.Action{StarkSDKSpace.UDPSocketOnMessageListenerResult})">
            <summary>
            移除收到消息事件的事件监听函数
            </summary>
            <param name="listener">事件监听函数</param>
        </member>
        <member name="M:StarkSDKSpace.StarkUDPSocket.OnClose(System.Action{StarkSDKSpace.GeneralCallbackResult})">
            <summary>
            监听关闭的事件
            </summary>
            <param name="listener">事件监听函数</param>
        </member>
        <member name="M:StarkSDKSpace.StarkUDPSocket.OffClose(System.Action{StarkSDKSpace.GeneralCallbackResult})">
            <summary>
            移除关闭事件的事件监听函数
            </summary>
            <param name="listener">事件监听函数</param>
        </member>
        <member name="M:StarkSDKSpace.StarkUDPSocket.OnError(System.Action{StarkSDKSpace.GeneralCallbackResult})">
            <summary>
            监听错误的事件
            </summary>
            <param name="listener">事件监听函数</param>
        </member>
        <member name="M:StarkSDKSpace.StarkUDPSocket.OffError(System.Action{StarkSDKSpace.GeneralCallbackResult})">
            <summary>
            移除错误事件的事件监听函数
            </summary>
            <param name="listener">事件监听函数</param>
        </member>
        <member name="M:StarkSDKSpace.StarkUDPSocket.OnListening(System.Action{StarkSDKSpace.GeneralCallbackResult})">
            <summary>
            监听开始监听数据包的事件
            </summary>
            <param name="listener">事件监听函数</param>
        </member>
        <member name="M:StarkSDKSpace.StarkUDPSocket.OffListening(System.Action{StarkSDKSpace.GeneralCallbackResult})">
            <summary>
            移除开始监听数据包事件的事件监听函数
            </summary>
            <param name="listener">事件监听函数</param>
        </member>
        <member name="M:StarkSDKSpace.StarkUDPSocket.Send(StarkSDKSpace.UDPSocketSendOption)">
            <summary>
            向指定 IP 和端口发送消息。
            支持发送 string 或 byte[] 二进制数据。
            </summary>
            <param name="option">发送消息的参数</param>
        </member>
        <member name="T:StarkSDKSpace.StarkKeyboard.OnKeyboardInputEvent">
            <summary>
            键盘输入事件
            <param name="value">键盘输入的当前值</param>
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkKeyboard.OnKeyboardConfirmEvent">
            <summary>
            用户点击键盘确定按钮时的事件
            <param name="value">键盘输入的当前值</param>
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkKeyboard.OnKeyboardCompleteEvent">
            <summary>
            键盘收起事件
            <param name="value">键盘输入的当前值</param>
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkKeyboard.onKeyboardInputEvent">
            <summary>
            监听键盘输入事件
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkKeyboard.onKeyboardConfirmEvent">
            <summary>
            监听用户点击键盘确定按钮时的事件
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkKeyboard.onKeyboardCompleteEvent">
            <summary>
            监听键盘收起事件
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkKeyboard.ShowKeyboard(StarkSDKSpace.StarkKeyboard.ShowKeyboardOptions,System.Action,System.Action{System.String})">
             <summary>
             显示软键盘（仅WebGL平台下支持）
             参考： https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/interface/keyboard/tt-show-keyboard/
             键盘输入监听请设置 onKeyboardInputEvent 和 onKeyboardConfirmEvent
             </summary>
             <param name="options">显示键盘的参数</param>
             <param name="onSuccess">显示软键盘成功回调: () => {}</param>
             <param name="onError">显示软键盘失败回调，(errMsg) => {}</param>
             <code> Example:
             using StarkSDKSpace;
             using UnityEngine;
             using UnityEngine.UI;
            
             public class KeyboardTest : MonoBehaviour
             {
                 public InputField input;
            
                 private void Start()
                 {
                     SetInputTexts();
                     RegisterKeyboardEvents();
                 }
            
                 private void SetInputTexts()
                 {
                     input.text = "done";
                     var comp = input.GetComponent&#60;ClickableInputField&#62;();
                     if (comp == null)
                     {
                         comp = input.gameObject.AddComponent&#60;ClickableInputField&#62;();
                     }
                     comp.multiple = false;
                     comp.confirmType = input.text;
                 }
            
                 private void OnDestroy()
                 {
                     UnregisterKeyboardEvents();
                 }
            
                 private void RegisterKeyboardEvents()
                 {
                     StarkSDK.API.GetStarkKeyboard().onKeyboardInputEvent += OnKeyboardInput;
                     StarkSDK.API.GetStarkKeyboard().onKeyboardConfirmEvent += OnKeyboardConfirm;
                     StarkSDK.API.GetStarkKeyboard().onKeyboardCompleteEvent += OnKeyboardComplete;
                 }
            
                 private void UnregisterKeyboardEvents()
                 {
                     StarkSDK.API.GetStarkKeyboard().onKeyboardInputEvent -= OnKeyboardInput;
                     StarkSDK.API.GetStarkKeyboard().onKeyboardConfirmEvent -= OnKeyboardConfirm;
                     StarkSDK.API.GetStarkKeyboard().onKeyboardCompleteEvent -= OnKeyboardComplete;
                 }
            
                 private void OnKeyboardInput(string value)
                 {
                     Debug.Log($"OnKeyboardInput: {value}");
                     if (input.isFocused)
                     {
                         input.text = value;
                     }
                 }
            
                 private void OnKeyboardConfirm(string value)
                 {
                     Debug.Log($"OnKeyboardConfirm: {value}");
                 }
            
                 private void OnKeyboardComplete(string value)
                 {
                     Debug.Log($"OnKeyboardComplete: {value}");
                 }
             }
             public class ClickableInputField : EventTrigger
             {
                 public string confirmType = "done"; // 可选值有: "done", "next", "search", "go", "send"
                 public int maxInputLength = 100; // 最大输入长度
                 public bool multiple = false; // 是否多行输入
                 private InputField _inputField;
                 private void Start()
                 {
                     _inputField = GetComponent&#60;InputField&#62;();
                 }
                 public override void OnPointerClick(PointerEventData eventData)
                 {
                     if (_inputField != null)
                     {
                         if (_inputField.isFocused)
                         {
                             StarkSDK.API.GetStarkKeyboard().ShowKeyboard(new StarkKeyboard.ShowKeyboardOptions()
                             {
                                 maxLength = maxInputLength,
                                 multiple = multiple,
                                 defaultValue = _inputField.text,
                                 confirmType = confirmType
                             });
                         }
                     }
                 }
             }
             </code>
        </member>
        <member name="M:StarkSDKSpace.StarkKeyboard.HideKeyboard(System.Action,System.Action{System.String})">
            <summary>
            收起软键盘（仅WebGL平台下支持）
            参考： https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/interface/keyboard/tt-hide-keyboard/
            </summary>
            <param name="onSuccess">隐藏软键盘成功回调: () => {}</param>
            <param name="onError">隐藏软键盘失败回调，(errMsg) => {}</param>
        </member>
        <member name="M:StarkSDKSpace.StarkKeyboard.UpdateKeyboard(System.String,System.Action,System.Action{System.String})">
            <summary>
            更新键盘，只有当键盘处于拉起状态时才会产生效果。
            参考： https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/interface/keyboard/tt-show-keyboard/
            键盘输入监听请设置 onKeyboardInputEvent 和 onKeyboardConfirmEvent
            </summary>
            <param name="value">键盘输入框的当前值</param>
            <param name="onSuccess">更新软键盘成功回调: () => {}</param>
            <param name="onError">更新软键盘失败回调，(errMsg) => {}</param>
        </member>
        <member name="T:StarkSDKSpace.AndroidUIManager">
            <summary>
            Android UI管理器
            调用Android原生UI界面
            </summary>
        </member>
        <member name="M:StarkSDKSpace.AndroidUIManager.ShowToast(System.String)">
            <summary>
            Android Toast提示
            类似于直接调用Toast.makeText(context, message, Toast.LENGTH_SHORT).show()
            </summary>
            <param name="message">提示信息</param>
        </member>
        <member name="M:StarkSDKSpace.AndroidUIManager.ShowToastLong(System.String)">
            <summary>
            Android Toast提示
            类似于直接调用Toast.makeText(context, message, Toast.LENGTH_LONG).show()
            </summary>
            <param name="message">提示信息</param>
        </member>
        <member name="M:StarkSDKSpace.AndroidUIManager.ShowDialogPopup(System.String,System.String,System.String,System.String,System.Boolean,System.Action,System.Action)">
            <summary>
            Android 弹出式对话框
            </summary>
            <param name="title">标题</param>
            <param name="content">内容</param>
            <param name="positiveBtnText">确认按钮文本</param>
            <param name="negativeBtnText">取消按钮文本</param>
            <param name="cancelable">对话框是否取消（点击空白区域关闭界面）</param>
            <param name="onPositiveClickCallback">点击确认按钮回调</param>
            <param name="onNegativeClickCallback">点击取消按钮回调</param>
        </member>
        <member name="M:StarkSDKSpace.AndroidUIManager.ShowProgressPopup(System.String,System.Boolean,System.Action)">
            <summary>
            Android 进度加载弹窗
            </summary>
            <param name="message">提示信息</param>
            <param name="cancelable">Loading弹窗是否取消（点击空白区域关闭界面）</param>
            <param name="onDismissCallback">Loading弹窗关闭回调</param>
        </member>
        <member name="M:StarkSDKSpace.AndroidUIManager.HideProgressPopup">
            <summary>
            隐藏进度加载弹窗
            </summary>
        </member>
        <member name="M:StarkSDKSpace.AndroidUIManager.SyncHideProgressPopup">
            <summary>
            以同步的隐藏一个弹框
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkPlayerPrefs">
            <summary>
              <para>`StarkPlayerPrefs` is a class that stores Player preferences between game sessions. It can store string, float and integer values into the user’s platform registry.</para>
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkPlayerPrefs.SetInt(System.String,System.Int32)">
            <summary>
              <para>Sets a single integer value for the preference identified by the given key. You can use StarkPlayerPrefs.GetInt to retrieve this value.</para>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkPlayerPrefs.GetInt(System.String,System.Int32)">
            <summary>
              <para>Returns the value corresponding to key in the preference file if it exists.</para>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkPlayerPrefs.SetFloat(System.String,System.Single)">
            <summary>
              <para>Sets the float value of the preference identified by the given key. You can use StarkPlayerPrefs.GetFloat to retrieve this value.</para>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkPlayerPrefs.GetFloat(System.String,System.Single)">
            <summary>
              <para>Returns the value corresponding to key in the preference file if it exists.</para>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkPlayerPrefs.SetString(System.String,System.String)">
            <summary>
              <para>Sets a single string value for the preference identified by the given key. You can use StarkPlayerPrefs.GetString to retrieve this value.</para>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkPlayerPrefs.GetString(System.String,System.String)">
            <summary>
              <para>Returns the value corresponding to key in the preference file if it exists.</para>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkPlayerPrefs.HasKey(System.String)">
            <summary>
              <para>Returns true if the given key exists in StarkPlayerPrefs, otherwise returns false.</para>
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkPlayerPrefs.DeleteKey(System.String)">
            <summary>
              <para>Removes the given key from the StarkPlayerPrefs. If the key does not exist, DeleteKey has no impact.</para>
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkPlayerPrefs.DeleteAll">
            <summary>
              <para>Removes all keys and values from the preferences. Use with caution.</para>
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkPlayerPrefs.Save">
            <summary>
              <para>Writes all modified preferences to disk.</para>
            </summary>
        </member>
        <member name="T:StarkSDKSpace.OnAccelerometerChanged">
            <summary>
            加速器数据回调
            </summary>
        </member>
        <member name="T:StarkSDKSpace.HostEnum">
            <summary>
            宿主枚举
            </summary>
        </member>
        <member name="T:StarkSDKSpace.LaunchFromEnum">
            <summary>
            入口枚举
            </summary>
        </member>
        <member name="F:StarkSDKSpace.LaunchFromEnum.IDE">
            <summary>
            IDE扫码
            </summary>
        </member>
        <member name="T:StarkSDKSpace.SCRuntime">
            <summary>
            SC的运行环境
            </summary>
        </member>
        <member name="T:StarkSDKSpace.VersionType">
            <summary>
            Apk的版本环境
            </summary>
        </member>
        <member name="T:StarkSDKSpace.ContainerEnv">
            <summary>
            保存宿主环境变量
            </summary>
        </member>
        <member name="P:StarkSDKSpace.ContainerEnv.GameAppId">
            <summary>
            游戏id
            </summary>
        </member>
        <member name="P:StarkSDKSpace.ContainerEnv.m_HostEnum">
            <summary>
            运行的宿主
            </summary>
        </member>
        <member name="P:StarkSDKSpace.ContainerEnv.m_LaunchFromEnum">
            <summary>
            启动入口
            </summary>
        </member>
        <member name="M:StarkSDKSpace.ContainerEnv.GetQueryFromScheme">
            <summary>
            获取query字段，即小程序的启动参数，可能为空，使用时需判空
            </summary>
        </member>
        <member name="M:StarkSDKSpace.ContainerEnv.GetLocation">
            <summary>
            启动场景（该字段目前只有在「侧边栏」启动场景才会返回，返回的属性值为：homepage）
            </summary>
            <returns></returns>
        </member>
        <member name="M:StarkSDKSpace.ContainerEnv.GetLaunchFrom">
            <summary>
            启动场景（该字段目前只有在「侧边栏」启动场景才会返回，返回的属性值为：homepage）
            </summary>
            <returns></returns>
        </member>
        <member name="M:StarkSDKSpace.ContainerEnv.GetLaunchOptionsSync">
            <summary>
            获取小程序启动时的参数，里面的参数可能为空，使用时需判空; 可以在StarkSDK.init()之后调用，确保得到非空值
            </summary>
        </member>
        <member name="T:StarkSDKSpace.IStarkAPI">
            <summary>
            接入头条抖音能力的接口，在非宿主环境下，会对一些回调进行模拟
            如果调用的函数在宿主版本不被支持，则会抛出异常
            </summary>
        </member>
        <member name="P:StarkSDKSpace.IStarkAPI.SDKVersion">
            <summary>
            SDK版本号
            </summary>
        </member>
        <member name="P:StarkSDKSpace.IStarkAPI.GameVersion">
            <summary>
            游戏版本号，通过该接口替换Application.version获得正确的版本号信息
            </summary>
        </member>
        <member name="P:StarkSDKSpace.IStarkAPI.GamePublishVersion">
            <summary>
            游戏发布版本号，发布版本时发布工具中指定的版本号
            </summary>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.SetContainerInitCallback(StarkSDKSpace.OnStarkContainerInitCallback)">
            <summary>
            设置Container初始化成功的回调。获取宿主及入口信息
            需要在调用其他api之前调用
            非Container下不会有此回调
            version : 1.0.0
            </summary>
            <param name="callback">初始化完成的回调.</param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetStarkGameRecorder">
            <summary>
            获取录屏相关接口
            </summary>
            <returns>StarkGameRecorder</returns>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.Authorize(System.String,System.Action{System.String,TTSDK.UNBridgeLib.LitJson.JsonData},System.Action{System.String,System.String})">
            <summary>
            提前向用户发出授权请求。该方法不会调用对应接口，只会弹框咨询用户是否授权或者获取用户信息。如果用户之前有授权，该接口直接返回成功，不会跟用户产生交互。
            </summary>
            <param name="scope">需要预授权的 scope，详见 https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/open-capacity/user-information/authorization/authorization/</param>
            <param name="success">接口调用成功的回调函数</param>
            <param name="fail">接口调用失败的回调函数 </param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetRTCEngineManager">
            <summary>
            需要白名单
            获取 RtcEngine 实例（包含音视频应用程序调用的主要方法的接口类实例），应当只调用一次。第二次调用getRtcEngine 时，实际获取的还是上次那个
            </summary>
            <returns>StarkRTCManager</returns>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetStarkAdManager">
            <summary>
            广告相关接口
            </summary>
            <returns>StarkAdManager</returns>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetStarkRequest">
            <summary>
            网络请求接口
            </summary>
            <returns>StarkAdManager</returns>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetStarkLog">
            <summary>
            控制sdk中的Log级别
            </summary>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetLaunchOptionsSync">
            <summary>
            获取小程序启动时的参数，里面的参数可能为空，使用时需判空; 可以在StarkSDK.init()之后调用，确保得到非空值
            </summary>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetAccountManager">
            <summary>
            账号模块
            </summary>
            <returns></returns>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetStarkContainerVersion">
            <summary>
            获取container sdk 版本号 like "1.0.0"
            </summary>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.FollowDouYinUserProfile(System.Action,System.Action{System.Int32,System.String},System.Boolean)">
            <summary>
            关注抖音号
            需要在开发者平台-设置中绑定抖音号
            </summary>
            <param name="followCallback">完成打开抖音号的回调。涉及用户信息，无法获取用户是否关注了抖音号的状态</param>
            <param name="errCallback">打开抖音号失败的回调。errCode:
            <param name="showToastTipsIfFailed"> 当关注抖音号失败，是否显示Toast弹窗提示，默认显示 </param>
            CODE_ERROR = -1
            CODE_NOT_SUPPORT = -2
            CODE_NOT_LOGIN = -3
            CODE_NO_ACTIVITY = -4
            CODE_UID_ERROR = -5
            </param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.CreateShortcut(System.Action{System.Boolean},System.Boolean)">
            <summary>
            创建快捷方式
            </summary>
            <param name="csCallback"> 创建快捷方式回调，参数为是否成功，true表示成功，false表示失败 </param>
            <param name="showToastTipsIfFailed"> 当创建失败，是否显示Toast弹窗提示，默认显示 </param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.IsShortcutExist(System.Action{System.Boolean})">
            <summary>
            快捷方式是否已经创建
            </summary>
            <param name="isExistCallback"> 是否存在的回调，参数表示是否已创建，true表示已创建，false表示未创建 </param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.Vibrate(System.Int64[],System.Int32)">
            <summary>
            可以配置震动周期的手机震动接口，单位ms
            </summary>
            <param name="pattern"> 震动周期 like long[] pattern = {0, 100, 1000, 300}; 传入null则取消震动  </param>
            <param name="repeat"> 重复次数，为-1则不重复  </param>
            <remarks>
            注意：WebGL平台下，只有两种震动：长和短。
                 pattern数组参数只能传入一个数值，传入小于1000则为短震动，否则为长震动。
                 不支持取消和重复。即repeat参数无效。
            </remarks>>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetStarkShare">
            <summary>
            获取分享相关接口
            </summary>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.IsFollowDouyin(System.Action{System.Boolean})">
            <summary>
            是否已关注抖音号
            </summary>
            <param name="callback"> 是否关注的回调，参数表示是否已关注，true表示已关注，false表示未关注 </param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.HasBoundDouyin(System.Action{System.Boolean})">
            <summary>
            是否在小程序开发者后台绑定了抖音号
            </summary>
            <param name="callback"> 是否绑定的回调，参数表示是否已绑定，true表示已绑定，false表示未绑定 </param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetStarkFavorite">
            <summary>
            获取收藏引导接口
            </summary>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.RegisterCommandEvent(System.Action{System.String,System.Collections.Generic.IList{System.String}})">
            <summary>
            接入sdk的debugpanel面板，注册一些debug命令的回调函数
            </summary>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetStarkPayService">
            <summary>
            支付服务接口
            </summary>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.ReportAnalytics``1(System.String,System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            自定义分析数据上报接口，调用后，会将数据上报到小程序开发者平台，开发者可以在小程序开发者平台中查看上报数据。使用前，需要在小程序管理后台事件中新建事件，配置好事件名与字段。
            可参考文档 https://microapp.bytedance.com/docs/zh-CN/mini-app/data/advanced-analysis/events
            </summary>
            <param name="eventName"> 事件名 </param>
            <param name="param"> 上报的数据，默认为null key	: 配置中的字段名.  value(number|string|boolean) : 上报的数据</param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.Save``1(``0,System.String)">
            <summary>
            保存游戏数据接口，所有游戏数据保存上限50M
            </summary>
            <param name="saveName"> 数据名 </param>
            <param name="serializableObject"> 可序列化的数据(存档类需标记为Serializable)[见以下的例子]</param>
            <returns>保存成功返回true，否则返回false</returns>
            <example>
            <code>
            [Serializable]
            class SaveData
            {
               public int IntValue = 99;
               private float FloatValue = 1.0f;
               public string StrValue = "My String";
               public Dictionary&lt;String,bool&gt; map;
               public List&lt;String&gt; listStr;
            }
            SaveData sd = new SaveData();
            sd.xx = yyy;
            bool ret = StarkSDK.API.Save&lt;SaveData&gt;(sd);
            </code>
            </example>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.LoadSaving``1(System.String)">
             <summary>
             加载游戏数据接口，返回数据类型需为Serializable
             </summary>
             <param name="saveName"> 数据名 </param>
            
             <example>
             SaveData loaded = StarkSDK.API.LoadSaving&lt;SaveData&gt;();
             </example>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.DeleteSaving``1(System.String)">
            <summary>
            删除游戏数据接口
            </summary>
            <param name="saveName"> 数据名 </param>
            
            <example>
            StarkSDK.API.DeleteSaving&lt;SaveData&gt;();
            </example>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.ClearAllSavings">
            <summary>
            删除所有游戏数据
            </summary>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetSavingDiskSize">
            <summary>
            获取游戏数据磁盘总大小
            </summary>
            <param name="saveName"> 数据名 </param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.OpenCustomerServicePage(System.Action{System.Boolean})">
            <summary>
            打开客服聊天页
            </summary>
            <param name="csCallback"> 打开客服聊天页回调，参数为是否成功，true表示成功，false表示失败 </param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.OpenCustomerServiceConversation(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{System.Boolean})">
            <summary>
            是平台提供的小游戏客服能力
            </summary>
            <param name="param">type:(1 ：小 6 客服 2 :  抖音IM 客服（仅支持抖音）)sessionFrom:(保留字段，暂时可以不填),例如{"type":1,"sessionFrom":"xxx"}</param>
            <param name="callback">打开客服页面成功或者失败回调</param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.OpenAwemeCustomerService(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action,System.Action{System.Int32,System.String})">
            <summary>
            通过客服页面发起支付
            接口说明：https://bytedance.feishu.cn/docx/doxcnUkE86LjFTFdTJREIEGT9bb
            </summary>
            <param name="options"> JsonData内容如下 
            buyQuantity     number  必填   金币购买数量，金币数量必须满足：金币数量*金币单价 = 限定价格等级（详见下方 buyQuantity 限制说明。开发者可以在字节小游戏平台的“支付”tab 设置游戏币单价）
            customId        string  必填   游戏开发者自定义的唯一订单号，订单支付成功后通过服务端支付结果回调回传
            currencyType    string  非必填 币种, 目前仅为"CNY"
            zoneId	        string  非必填 游戏服务区 id，默认值为1，开发者自定义。游戏不分大区则默认填写"1"。如果应用支持多角色，则角色 ID 接在分区 ID 后，用"_"连接
            extraInfo	    string  非必填 游戏开发者自定义的其他信息，订单支付成功后通过服务端支付结果回调回传。字符串长度最大不能超过 256。（强烈建议传入）
            </param>
            <param name="success"> 打开客服页成功 </param>
            <param name="failed"> 打开客服聊天页回调，参数为是否成功，true表示成功，false表示失败 </param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.NavigateToVideoView(System.String,System.Action{System.Boolean})">
            <summary>
            跳转到抖音视频
            </summary>
            <param name="videoId"> 抖音视频videoId，复制抖音视频链接到浏览器即可得到 </param>
            <param name="jumpCallback"> 跳转结果，参数为是否成功，true表示成功，false表示失败 </param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.ExitApp(System.Boolean,System.Action{System.Boolean})">
            <summary>
            退出程序
            </summary>
            <param name="showDialog">是否显示退出提示对话框，true为在退出前显示二次提示对话框架，false则不显示对话框而直接退出程序</param>
            <param name="callback">接口调用成功状态回调，true表示成功，false表示失败</param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.RestartApp(System.Action)">
            <summary>
            重启小游戏
            </summary>
            <param name="failCallback">接口调用失败时的回调</param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetSystemInfo">
            <summary>
             获取系统信息。类似小程序开发平台 tt.getSystemInfoSync 接口返回值。
             https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/api/device/system-information/tt-get-system-info-sync/
            </summary>
            <returns>StarkSystemInfo 当前系统相关信息</returns>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.StartAccelerometer(StarkSDKSpace.OnAccelerometerChanged,System.Action{System.Boolean,System.String})">
            <summary>
            开始监听加速度数据
            </summary>
            <param name="onAccelerometerChanged">加速度数据回调事件监听</param>
            <param name="statusCallback">接口调用状态回调，(bool success, string errMsg) => {}</param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.StopAccelerometer(System.Action{System.Boolean,System.String})">
            <summary>
            停止监听加速度数据
            </summary>
            <param name="statusCallback">接口调用状态回调，(bool success, string errMsg) => {}</param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetStarkGyroscope">
            <summary>
            获取陀螺仪接口
            </summary>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.ReplaceSensitiveWords(System.String,System.Action{System.Int32,System.String,TTSDK.UNBridgeLib.LitJson.JsonData})">
            <summary>
            替换敏感词
            </summary>
            <param name="word">要检查和替换的词语</param>
            <param name="callback">回调
            int: 返回状态码，0为成功，否则为失败
            string: 错误信息
            JsonData：
            audit_result    int     1: 有敏感内容；0: 无敏感内容
            audit_content   string  被替换的内容（无敏感内容则返回值与传入的word相同）
            </param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetStarkKeyboard">
            <summary>
            获取键盘管理器（仅WebGL支持）
            </summary>
            <returns>StarkKeyboard</returns>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetStarkInput">
            <summary>
            获取输入模块（仅 WebGL 支持）
            </summary>
            <returns></returns>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetStarkHostEvent">
            <summary>
            宿主事件监听
            </summary>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.CreateUDPSocket">
            <summary>
            创建一个 UDP Socket 实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetStarkClipboard">
            <summary>
             操作剪切板
            </summary>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetStarkGroup">
            <summary>
            群聊相关操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetStarkDeviceMotion">
            <summary>
            方向监听
            </summary>
            <returns></returns>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetStarkScreenManager">
            <summary>
            屏幕相关操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.StarkSendToTAQ(TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            小程序/小游戏转化上报api
            </summary>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetStarkDouyinCloudManager">
            <summary>
            抖音云功能相关接口
            可以参考 小游戏抖音云相关文档 https://developer.open-douyin.com/docs/resource/zh-CN/developer/tools/cloud/develop-guide/invoke-sever/cloud-sdk
            </summary>
            <returns></returns>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetStarkSideBarManager">
            <summary>
            侧边栏跳转相关接口
            https://bytedance.feishu.cn/docx/NkzOdcUPXo02bdxl6zqcemGinzb
            </summary>
            <returns></returns>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.RequestSubscribeMessage(System.Collections.Generic.List{System.String},System.Action{System.Collections.Generic.Dictionary{System.String,System.String}},System.Action,System.Action{System.Int32,System.String})">
            <summary>
            请求订阅消息
            可以参考 小游戏相关文档 https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/open-capacity/subscribe-message/tt-request-subscribe-message/
            </summary>
            <param name="tmplIds">需要订阅的消息模板的 id 的集合，最多支持传入三个 tmplId</param>
            <param name="success">接口调用成功的回调函数</param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
            <param name="failed">接口调用结束的回调函数（调用成功、失败都会执行）</param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetMenuButtonLayout">
            <summary>
            获取菜单按钮（右上角胶囊按钮）的布局位置信息。坐标信息以屏幕左上角为原点。
            https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/interface/menu/tt-get-menu-button-layout/
            </summary>
            <returns>
            JsonData
            width	number	宽度，单位：px
            height	number	高度，单位：px
            top	    number	上边界坐标，单位：px
            right	number	右边界坐标，单位：px
            bottom	number	下边界坐标，单位：px
            left	number	左边界坐标，单位：px
            </returns>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetSystemFont(System.Action{UnityEngine.Font})">
            <summary>
            获取系统字体,仅支持WebGL,AndroidNative方案无需调用此接口，使用默认字体时，便会自动使用系统自动字体。
            </summary>
            <param name="callback">字体资源回调，可为null，开发者需要做好兜底</param>
            <returns></returns>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.ReportScene(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData},System.Action{System.Int32,System.String},System.Action)">
            <summary>
            自定义场景数据上报接口
            </summary>
            <param name="sceneId">场景ID，int或long类型登录抖音开放平台，进入「数据」-「性能分析」-「启动监控」-「启动场景配置」模块，进入添加事件场景，新建游戏的自定义启动场景。 游戏每次启动只可以上报一次</param>
            <param name="costTime">场景耗时，单位ms long类型</param>
            <param name="dimension">自定义维度数据，key在抖音开放平台获取。且序列化后长度不超过1024个字符 </param>
            <param name="metric">自定义指标数据，key在抖音开放平台获取。且序列化后长度不超过1024个字符 </param>
            <param name="param">以上参数使用json格式传入，例如"{"sceneId":0,"costTime":10,"dimension":{},"metric":{}}"</param>
            <param name="success">接口调用成功的回调函数</param>
            <param name="failed">接口调用失败的回调函数</param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.RequestFeedSubscribe(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData},System.Action{System.Int32,System.String},System.Action)">
            <summary>
            向用户请求授权允许游戏在满足一定的条件后出现在Feed流中
            </summary>
            <param name="param">必须包含，type(strings)（订阅Feed流的类型），scene(int)订阅的场景ID（type='play'时必传））contentIDs(jsonArray) 自定义文案ID（type='play'时必传）），例如：{"type":"play","scene":111,"contentIDs":["xxxx"]}</param>
            <param name="success">接口调用成功的回调函数， 包含以下内容，errMsg(回调信息)，success(用户的订阅结果（true为成功，false为订阅失败，具体原因看errMsg））</param>
            <param name="failed">接口调用失败的回调函数</param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.CheckFeedSubscribeStatus(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData},System.Action{System.Int32,System.String},System.Action)">
            <summary>
            查询用户的授权情况。
            </summary>
            <param name="param">必须包含，type(strings)（订阅Feed流的类型），scene(int)订阅的场景ID（type='play'时必传）），例如：{"type":"play","scene":1111}</param>
            <param name="success">接口调用成功的回调函数,包含以下内容，errMsg(回调信息)，success(用户的订阅结果（true为已经订阅，false为用户未订阅））</param>
            <param name="failed">接口调用失败的回调函数</param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
        </member>
        <member name="M:StarkSDKSpace.IStarkAPI.GetLiveManager">
            <summary>
            获取直播间管理器对象
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkGyroscope.StartGyroscope(System.Double,System.Action{System.Boolean,System.String})">
            <summary>
            开始监听陀螺仪
            </summary>
            <param name="interval">获取陀螺仪数据的间隔时间，单位为毫秒（ms），默认大小为 50</param>
            <param name="statusCallback">接口调用状态回调，(bool success, string errMsg) => {}</param>
        </member>
        <member name="M:StarkSDKSpace.StarkGyroscope.StopGyroscope(System.Action{System.Boolean,System.String})">
            <summary>
            停止监听陀螺仪
            </summary>
            <param name="statusCallback">接口调用状态回调，(bool success, string errMsg) => {}</param>
        </member>
        <member name="T:StarkSDKSpace.StarkGyroscope.OnGyroscopeChanged">
            <summary>
            陀螺仪回调
            </summary>
            <param name="x">x 轴的角速度。</param>
            <param name="y">y 轴的角速度。</param>
            <param name="z">z 轴的角速度。</param>
            <param name="t">从设备启动到现在经过的时间戳，单位是 ms。</param>
            <param name="roll">姿态角值，围绕 Z 轴旋转，也叫翻滚角。</param>
            <param name="pitch">姿态角值，围绕 X 轴旋转，也叫做俯仰角。</param>
            <param name="yaw">姿态角值，围绕 Y 轴旋转，也叫偏航角。</param>
            <param name="result"></param>
        </member>
        <member name="T:StarkSDKSpace.StarkAdManager.VideoAdCallback">
            <summary>
            广告的回调函数
            </summary>        
        </member>
        <member name="M:StarkSDKSpace.StarkAdManager.VideoAdCallback.OnVideoLoaded">
            <summary>
            广告加载成功
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAdManager.VideoAdCallback.OnVideoShow(System.Int64)">
            <summary>
            广告播放成功，Unity测触发该回调时间不准确，具体触发Show的时间参考返回毫秒时间戳
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAdManager.VideoAdCallback.OnError(System.Int32,System.String)">
            <summary>
            广告失败，错误码同 ShowVideoAd
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAdManager.VideoAdCallback.OnVideoClose(System.Int32,System.Int32,System.Int32)">
            <summary>
            广告关闭回调
            </summary>
            <param name="watchedTime">已播放时长.</param>
            <param name="effectiveTime">有效播放时长(超过此时长可以授予激励).</param>
            <param name="duration">视频总时长.</param>
        </member>
        <member name="P:StarkSDKSpace.StarkAdManager.IsShowLoadAdToast">
            <summary>
            是否显示广告加载提示，默认显示
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAdManager.ShowVideoAdWithId(System.String,System.Action{System.Boolean},System.Action{System.Int32,System.String},StarkSDKSpace.StarkAdManager.VideoAdCallback)">
            <summary>
            展示激励视频广告，在广告未加载时会发起异步请求，弱网情况下会进行重试。失败会调用errCallback
            激励视频广告只支持一个实例，申请多个激励视频广告位是无效的
            简单回调设置，激励视频完成和错误的回调函数
            与 SetVideoAdCallBack 不冲突，在结束时都会被调用到，会同时收到close和complete
            错误码由sdk传出，原因参考
            https://bytedance.feishu.cn/docs/doccn1lAbZzMOqI5ueq1gCyPdcg#
            https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/open-capacity/ads/ads-error-code-description/
            https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/api/open-interface/ads/tt-create-interstitial-ad
            1004 可能是由于广告请求被限制了次数，需要跟广告投放沟通
            如果需要更详细的回调信息，可使用 SetVideoAdCallBack
            </summary>
            <param name="videoAdid">广告aid.</param>
            <param name="closeCallback">视频广告关闭回调，参数含义 IsComplete,表明广告是否播放完成.</param>
            <param name="errCallback">视频广告错误回调，参数含义 errCode, errMsg 表明错误码和错误描述.</param>
            <param name="adCallback">视频广告详细过程回调，一般可以不关注.</param>
        </member>
        <member name="M:StarkSDKSpace.StarkAdManager.ShowVideoAdWithId(System.String,System.Boolean,System.String[],System.Int32,System.Boolean,System.Action{System.Boolean,System.Int32},System.Action{System.Int32,System.String})">
            <summary>
            展示激励视频广告，在广告未加载时会发起异步请求，弱网情况下会进行重试。失败会调用errCallback
            激励视频广告只支持一个实例，申请多个激励视频广告位是无效的
            简单回调设置，激励视频完成和错误的回调函数
            与 SetVideoAdCallBack 不冲突，在结束时都会被调用到，会同时收到close和complete
            错误码由sdk传出，原因参考
            https://bytedance.feishu.cn/docs/doccn1lAbZzMOqI5ueq1gCyPdcg#
            https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/open-capacity/ads/ads-error-code-description/
            https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/api/open-interface/ads/tt-create-interstitial-ad
            1004 可能是由于广告请求被限制了次数，需要跟广告投放沟通
            如果需要更详细的回调信息，可使用 SetVideoAdCallBack
            </summary>
            <param name="videoAdid">广告aid.</param>
            <param name="closeCallback">视频广告关闭回调，参数含义 IsComplete,表明广告是否播放完成.</param>
            <param name="errCallback">视频广告错误回调，参数含义 errCode, errMsg 表明错误码和错误描述.</param>
            <param name="adCallback">视频广告详细过程回调，一般可以不关注.</param>
            再得添加 https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/open-capacity/ads/rewardagainintroduce
            <param name="multiton">是否开启再得广告模式（只支持安卓系统的抖音和抖音极速版）</param>
            <param name="multitonRewardMsg">再得广告的奖励文案，玩家每看完一个广告都会展示，如【再看1个获得xx】xx就multitonRewardMsg中的文案，按顺序依次展示，单个文案最大长度为 7,multiton为true时必填</param>
            <param name="multitonRewardTime">额外观看广告的次数，合法的数据范围为1-4，multiton为true时必填</param>
            <param name="progressTip">是否开启进度提醒，开启时广告文案为【再看N个获得xx】，关闭时为【 再看1个获得xx】。N表示玩家当前还需额外观看广告的次数。</param>
        </member>
        <member name="T:StarkSDKSpace.StarkAdManager.BannerAd">
            <summary>
            BannerAd 对象
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAdManager.BannerAd.Show">
            <summary>
            显示。如果加载出错，会调用CreateBannerAd的参数 errCallback
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAdManager.BannerAd.Hide">
            <summary>
            隐藏
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAdManager.BannerAd.Destroy">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAdManager.BannerAd.ReSize(StarkSDKSpace.StarkAdManager.BannerStyle)">
            <summary>
            改变样式
            成功后会调用CreateBannerAd的参数 resizeCallback
            横屏下可以更改位置和宽度，竖屏下只能更改位置。
            </summary>
            <param name="style"> 样式："style":{"top":0, "left":0, "width":128}}</param>
        </member>
        <member name="M:StarkSDKSpace.StarkAdManager.BannerAd.IsInvalid">
            <summary>
            是否有效，bannerad在load出错的情况下，如果adInterval为-1，则无法再进行刷新。此时认为已失效，需要destroy再重新创建
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkAdManager.BannerStyle">
            <summary>
            Banner样式
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkAdManager.BannerStyle.left">
            <summary>
            广告位区域左上角横坐标
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkAdManager.BannerStyle.top">
            <summary>
            广告位区域左上角纵坐标
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkAdManager.BannerStyle.width">
            <summary>
            广告位区域宽度
            </summary>
        </member>
        <member name="P:StarkSDKSpace.StarkAdManager.BannerStyle.height">
            <summary>
            广告位区域高度，受广告内容影响自主变化, 无法由外部指定
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAdManager.CreateBannerAd(System.String,StarkSDKSpace.StarkAdManager.BannerStyle,System.Int32,System.Action{System.Int32,System.String},System.Action,System.Action{System.Int32,System.Int32},System.Action)">
            <summary>
            创建Banner广告，返回 BannerAd 实例。支持多实例，可以在一个页面下展示多个。也可以分页面展示
            竖屏情况下，Banner广告接受的宽度范围是 0.8*屏幕宽度，1.0*屏幕宽度。
            横屏情况下，Banner广告接受的最小宽度是 128，最大宽度是 208。
            开发者可以在这之间自由指定广告宽度。广告组件会自动等比例缩放素材。
            创建Banner示例后，要主动调用show来进行展示
            错误码由sdk传出，原因参考
            https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/open-capacity/ads/ads-error-code-description/
            </summary>
            <param name="bannerAdId">	banner广告位的adid </param>
            <param name="style"> 样式："style":{"top":0, "left":0, "width":320}} width 在竖屏下会被限制在 [0.8*ScreenWidth,1.0*ScreenWidth]，横屏下会被限制在[128, 208]</param>
            <param name="adIntervals">	广告自动刷新的间隔时间，单位为秒，参数值必须大于等于 30（该参数不传入时 Banner 广告不会自动刷新）.</param>
            <param name="errCallback"> 广告错误回调，参数表明错误码和错误描述.</param>
            <param name="loadedCallback"> 广告加载回调.</param>
            <param name="resizeCallback"> 广告样式改变回调，第一个参数是width.第二个参数是height.</param>
            <param name="closeCallback">广告关闭回调，仅在WebGL有效</param>
        </member>
        <member name="T:StarkSDKSpace.StarkAdManager.InterstitialAd">
            <summary>
            InterstitialAd 对象
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAdManager.InterstitialAd.Load">
            <summary>
            加载
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAdManager.InterstitialAd.Show">
            <summary>
            显示
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAdManager.InterstitialAd.IsLoaded">
            <summary>
            是否已加载
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAdManager.InterstitialAd.Destroy">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAdManager.CreateInterstitialAd(System.String,System.Action{System.Int32,System.String},System.Action,System.Action)">
            <summary>
            创建并播放插屏广告，在广告模块启动15s内不允许展示插屏广告，在任何地方调用API.GetStarkAdManager，就会启动广告模块
            两个插屏广告展示间隔不能少于30s
            插屏广告支持多实例。简单回调设置，插屏广告完成和错误的回调函数
            插屏广告实例只支持展示一次，出现加载错误，或 展示成功，点击关闭按钮或视频广告外的其他地方，广告实例都会自动销毁。下一次需再次创建。
            提供接口可以手动销毁
            错误码由sdk传出，原因参考
            https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/open-capacity/ads/tt-create-interstitial-ad
            </summary>
            <param name="interstitialAdId">	插屏广告位的adid </param>
            <param name="errCallback">广告视频错误回调，参数含义 errCode, errMsg 表明错误码和错误描述.</param>
            <param name="closeCallback">广告视频关闭回调.</param>
            <param name="loadedCallback">广告加载回调.</param>
        </member>
        <member name="M:StarkSDKSpace.StarkAdManager.SetVideoAdCallBack(StarkSDKSpace.StarkAdManager.VideoAdCallback)">
            <summary>
            设置激励视频广告的回调。获取完整的回调信息，一般处理都可以通过ShowVideoAdWithId完成，需要时使用
            </summary>
            <param name="callback">激励视频广告的回调.</param>
        </member>
        <member name="T:StarkSDKSpace.StarkHostEvent">
            <summary>
            宿主事件监听
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkHostEvent.AddHostEventListener(System.String,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData})">
            <summary>
            添加宿主事件监听
            </summary>
            <param name="eventName">事件名</param>
            <param name="callback">回调函数，(result) => {}，宿主事件触发后自动调用</param>
        </member>
        <member name="M:StarkSDKSpace.StarkHostEvent.RemoveHostEventListener(System.String)">
            <summary>
            移除宿主事件监听
            </summary>
            <param name="eventName">事件名</param>
        </member>
        <member name="T:StarkSDKSpace.StarkGroup">
            <summary>
            https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/open-capacity/im-group/groupchatintroduce
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkGroup.CheckGroupInfo(System.String,StarkSDKSpace.StarkGroup.OnCheckGroupInfoSuccessCallback,StarkSDKSpace.StarkGroup.OnCheckGroupInfoFailCallback,System.String,System.String)">
             <summary>
            查询用户通过小游戏平台创建的群的信息
             如游戏开发者在平台创建了群聊 ABC，那么游戏侧可以基于游戏开发者在这个游戏中的 openid，查询其在小游戏平台创建了哪些群，群的状态如何，做游戏内的加群逻辑优化
             </summary>
             <param name="openId">建群用户的 openid 必填</param>
             <param name="onCheckGroupInfoSuccessCallback">接口调用成功的回调函数 必填</param>
             <param name="onCheckGroupInfoFailCallback">接口调用失败的回调函数 必填</param>
             <param name="sessionFrom">会话来源 可空</param>
             <param name="extraInfo">附加信息 可空</param>
        </member>
        <member name="M:StarkSDKSpace.StarkGroup.JoinGroup(System.String,System.Action{System.Boolean,System.String},System.String,System.String)">
            <summary>
            在平台创建群聊，获得 groupid 后，游戏内通过这个方法引导用户加入抖音群
            </summary>
            <param name="groupId">群 ID  必填</param>
            <param name="callback">接口调用成功/失败的回调函数  必填</param>
            <param name="sessionFrom">会话来源 可空</param>
            <param name="extraInfo">附加信息 可空</param>
        </member>
        <member name="T:StarkSDKSpace.StarkDouyinCloud">
            <summary>
            抖音云模块
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkDouyinCloud.Options">
            <summary>
            请求相关设置
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkDouyinCloud.Options.Method">
            <summary>网络请求方法，支持 GET/POST/OPTIONS/PUT/HEAD/DELETE</summary>
        </member>
        <member name="F:StarkSDKSpace.StarkDouyinCloud.Options.Header">
            <summary>请求header</summary>
        </member>
        <member name="F:StarkSDKSpace.StarkDouyinCloud.Options.Data">
            <summary>Post 请求的参数</summary>
        </member>
        <member name="F:StarkSDKSpace.StarkDouyinCloud.Options.CloudIdMaps">
            <summary>CloudId key 开发自己定义, value 是cloudId 数据, 相关key value 数据会被自动加到post 请求的body 中</summary>
        </member>
        <member name="T:StarkSDKSpace.StarkDouyinCloud.Response">
            <summary>
            请求响应
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkDouyinCloud.CallContainer(System.String,System.String,System.String,StarkSDKSpace.StarkDouyinCloud.Options,System.Action{StarkSDKSpace.StarkDouyinCloud.Response},System.Action{StarkSDKSpace.StarkDouyinCloud.ErrorResponse})">
             <summary>
            
             请求抖音云服务端接口
             可以参考 小游戏抖音云相关文档 https://developer.open-douyin.com/docs/resource/zh-CN/developer/tools/cloud/develop-guide/invoke-sever/cloud-sdk
             </summary>
             <param name="eveId">抖音云平台环境id</param>
             <param name="serviceId">抖音云平台服务id</param>
             <param name="path">请求path</param>
             <param name="options">请求参数</param>
             <param name="success">成功回调</param>
             <param name="fail">失败回调</param>
        </member>
        <member name="M:StarkSDKSpace.StarkDouyinCloud.GetTempFileUrl(System.String,System.Collections.Generic.List{System.String},System.Int32,System.Action{StarkSDKSpace.StarkDouyinCloud.FileResponse},System.Action{StarkSDKSpace.StarkDouyinCloud.ErrorResponse})">
            <summary>
            获取抖音云文件访问地址
            </summary>
            <param name="eveId">抖音云平台环境id</param>
            <param name="cloudPaths">云文件path</param>
            <param name="maxAge">最大有效期</param>
            <param name="success">成功回调</param>
            <param name="fail">失败回调</param>
        </member>
        <member name="M:StarkSDKSpace.StarkDouyinCloud.DeleteFile(System.String,System.Collections.Generic.List{System.String},System.Action{StarkSDKSpace.StarkDouyinCloud.FileResponse},System.Action{StarkSDKSpace.StarkDouyinCloud.ErrorResponse})">
            <summary>
            抖音云文件删除
            </summary>
            <param name="eveId">抖音云平台环境id</param>
            <param name="cloudPaths">云文件path</param>
            <param name="success">成功回调</param>
            <param name="fail">失败回调</param>
        </member>
        <member name="M:StarkSDKSpace.StarkDouyinCloud.UploadFile(System.String,System.String,System.String,System.Action{StarkSDKSpace.StarkDouyinCloud.DownloadUploadProgressData},System.Action{StarkSDKSpace.StarkDouyinCloud.UploadResponse},System.Action{StarkSDKSpace.StarkDouyinCloud.ErrorResponse})">
            <summary>
            抖音云文件上传
            </summary>
            <param name="eveId">抖音云平台环境id</param>
            <param name="cloudPath">云文件path</param>
            <param name="filePath"> 需要传递绝对路径</param> 
            <param name="progress"> 上传进度回调</param>
            <param name="success"> 上传成功毁掉</param>
            <param name="fail"> 上传失败回调</param>
        </member>
        <member name="M:StarkSDKSpace.StarkDouyinCloud.DownloadFile(System.String,System.String,System.String,System.Action{StarkSDKSpace.StarkDouyinCloud.DownloadUploadProgressData},System.Action{StarkSDKSpace.StarkDouyinCloud.DownloadResponse},System.Action{StarkSDKSpace.StarkDouyinCloud.ErrorResponse})">
            <summary>
            下载抖音云文件 
            </summary>
            <param name="eveId">抖音云平台环境id</param>
            <param name="cloudPath">云文件path</param>
            <param name="filePath">需要传递绝对路径</param>
            <param name="progress">下载进度回调</param>
            <param name="success">下载成功毁掉</param>
            <param name="fail">下载成功毁掉</param>
        </member>
        <member name="M:StarkSDKSpace.StarkDouyinCloud.CloudDb">
            <summary>
            返回抖音云操作数据库对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:StarkSDKSpace.StarkGameRecorder.IsShowShareVideoToast">
            <summary>
            是否显示视频分享Toast UI提示，默认显示
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkGameRecorder.OnRecordStartCallback">
            <summary>
            开始录屏
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkGameRecorder.OnRecordErrorCallback">
            <summary>
            录屏错误
            <param name="errCode">错误码</param>
            <param name="errMsg">错误消息</param>
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkGameRecorder.OnRecordCompleteCallback">
            <summary>
            录屏完成
            <param name="videoPath">实际视频路径</param>
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkGameRecorder.OnShareVideoSuccessCallback">
            <summary>
            视频分享成功
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkGameRecorder.OnShareVideoFailedCallback">
            <summary>
            视频分享失败
            <param name="errMsg">错误消息</param>
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkGameRecorder.OnShareVideoCancelledCallback">
            <summary>
            视频分享取消
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkGameRecorder.VideoRecordState">
            <summary>
            录屏状态枚举
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkGameRecorder.VideoRecordState.RECORD_STARTING">
            <summary>
            录制开始中
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkGameRecorder.VideoRecordState.RECORD_STARTED">
            <summary>
            录制已开始
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkGameRecorder.VideoRecordState.RECORD_PAUSING">
            <summary>
            录制暂停中
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkGameRecorder.VideoRecordState.RECORD_PAUSED">
            <summary>
            录制已暂停
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkGameRecorder.VideoRecordState.RECORD_STOPING">
            <summary>
            录制停止中
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkGameRecorder.VideoRecordState.RECORD_STOPED">
            <summary>
            录制已停止
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkGameRecorder.VideoRecordState.RECORD_COMPLETED">
            <summary>
            录制结束
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkGameRecorder.VideoRecordState.RECORD_ERROR">
            <summary>
            录制错误
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkGameRecorder.VideoRecordState.RECORD_VIDEO_TOO_SHORT">
            <summary>
            录制的视频时长太短
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkGameRecorder.VideoShareState">
            <summary>
            视频分享状态枚举
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkGameRecorder.VideoShareState.NONE">
            <summary>
            未进行视频分享
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkGameRecorder.VideoShareState.SHARING">
            <summary>
            视频分享中
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkGameRecorder.VideoShareState.WAITING_CALLBACK">
            <summary>
            等待分享器回调
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkGameRecorder.VideoShareState.SHARE_SUCCESS">
            <summary>
            视频分享成功
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkGameRecorder.VideoShareState.SHARE_FAILED">
            <summary>
            视频分享失败
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkGameRecorder.VideoShareState.SHARE_CANCELLED">
            <summary>
            视频分享取消
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkGameRecorder.SetEnabled(System.Boolean)">
            <summary>
            设置录屏是否开启
            </summary>
            <param name="enabled">开启设置为true，禁止设置为false</param>
        </member>
        <member name="M:StarkSDKSpace.StarkGameRecorder.GetEnabled">
            <summary>
            获取录屏开启状态
            </summary>
            <returns>返回true则表示录屏开启，返回false为录屏关闭</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkGameRecorder.SetCustomKeyFrameInterval(System.Int32,System.Action{System.Boolean})">
            <summary>
            设置录屏关键帧插帧间隔
            内部默认关键帧间隔1s，若需要更小的关键帧间隔精度，可通过该接口设置关键帧间隔
            插帧思路按照帧间隔在超过下述设置阈值后，将自动将对应到来的帧插成关键帧
            在录制前设置，在下次录制时候即生效
            </summary>
            <param name="millisecond">视频关键帧插帧间隔 单位ms，默认值-1，为不插帧</param>
            <param name="callBack">是否设置成功回调, true 成功  false 失败</param>
        </member>
        <member name="M:StarkSDKSpace.StarkGameRecorder.StartRecord(System.Boolean,System.Int32,StarkSDKSpace.StarkGameRecorder.OnRecordStartCallback,StarkSDKSpace.StarkGameRecorder.OnRecordErrorCallback,StarkSDKSpace.StarkGameRecorder.OnRecordCompleteCallback)">
            <summary>
            开始录屏
            <param name="isRecordAudio">是否录制声音，默认为录制声音</param>
            <param name="maxRecordTimeSec">最大录制时长，单位 s。小于等于 0 则无限制。默认为10分钟</param>
            <param name="startCallback">视频录制开始回调</param>
            <param name="errorCallback">视频录制失败回调</param>
            </summary>
            <returns>函数调用状态，调用成功返回true，否则返回false</returns>
        </member>
        <member name="T:StarkSDKSpace.StarkGameRecorder.TimeRange">
            <summary>
            时间片段（用于视频裁剪）
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkGameRecorder.TimeRange.start">
            <summary>
            开始时间，单位ms
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkGameRecorder.TimeRange.end">
            <summary>
            结束时间，单位ms
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkGameRecorder.StopRecord(StarkSDKSpace.StarkGameRecorder.OnRecordCompleteCallback,StarkSDKSpace.StarkGameRecorder.OnRecordErrorCallback,System.Collections.Generic.List{StarkSDKSpace.StarkGameRecorder.TimeRange},System.Boolean)">
            <summary>
            停止录屏
            <param name="completeCallback">视频录制完成回调</param>
            <param name="errorCallback">视频录制失败回调</param>
            <param name="clipRanges">停止后需要对视频进行裁剪的时间片段，如果为null或空列表，则不对视频进行裁剪</param>
            <param name="autoMerge">是否对视频裁剪片段进行自动合并。
                                    合并规则: 
                                        如果有两段重叠的时间片段，并且重叠部分小于等于1秒，则对这两段进行合并为一段
                                        若autoMerge为true，比如时间片段为{[1000, 5000], [4000, 7000]}，会被合并为{[1000, 7000]}。
                                        若autoMerge为false，将按原始传入的时间片段进行裁剪，是否有重叠，由调用方保证。主要用于自定义裁剪。 </param>
            </summary>
            <returns>函数调用状态，调用成功返回true，否则返回false</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkGameRecorder.GetRecordDuration">
            <summary>
            获取录屏时长
            </summary>
            <returns>返回录屏时长，单位 ms</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkGameRecorder.GetVideoRecordState">
            <summary>
            获取视频录制状态
            </summary>
            <returns>VideoRecordState</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkGameRecorder.SetDefaultBgm(System.String)">
            <summary>
            给录屏分享设置默认的配乐,若链接不符合要求则不生效，参考文档:https://bytedance.feishu.cn/docs/doccnlj9zMlqSbD0S0FEMonoJZd
            </summary>
            <param name="defaultBgm"> 抖音PGC音乐的短链。形如 "https://v.douyin.com/JmcxWo8/", null 或者 “”表示取消默认配乐 </param>
        </member>
        <member name="M:StarkSDKSpace.StarkGameRecorder.GetVideoShareState">
            <summary>
            获取视频分享状态
            </summary>
            <returns>VideoClipState</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkGameRecorder.ShareVideo(StarkSDKSpace.StarkGameRecorder.OnShareVideoSuccessCallback,StarkSDKSpace.StarkGameRecorder.OnShareVideoFailedCallback,StarkSDKSpace.StarkGameRecorder.OnShareVideoCancelledCallback)">
            <summary>
            分享视频。分享的视频文件是调用StopVideo后生成的文件。
            注意：视频分享需要录制至少3s的视频，低于3s的视频将会分享失败。
            </summary>
            <param name="successCallback">分享成功回调</param>
            <param name="failedCallback">分享失败回调</param>
            <param name="cancelledCallback">分享取消回调</param>
            <returns>函数调用状态，调用成功返回true，否则返回false</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkGameRecorder.ShareVideoWithTitleTopics(StarkSDKSpace.StarkGameRecorder.OnShareVideoSuccessCallback,StarkSDKSpace.StarkGameRecorder.OnShareVideoFailedCallback,StarkSDKSpace.StarkGameRecorder.OnShareVideoCancelledCallback,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            带标题和话题的分享视频。分享的视频文件是调用StopVideo后生成的文件。
            注意：视频分享需要录制至少3s的视频，低于3s的视频将会分享失败。
            </summary>
            <param name="successCallback">分享成功回调</param>
            <param name="failedCallback">分享失败回调</param>
            <param name="cancelledCallback">分享取消回调</param>
            <param name="title">分享视频的标题，如不需要设置标题，可以传null或空字符串</param>
            <param name="topics">分享视频的话题，如不需要设置话题，可以传null或空列表</param>
            <returns>函数调用状态，调用成功返回true，否则返回false</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkGameRecorder.ShareVideoWithJson(StarkSDKSpace.StarkGameRecorder.OnShareVideoSuccessCallback,StarkSDKSpace.StarkGameRecorder.OnShareVideoFailedCallback,StarkSDKSpace.StarkGameRecorder.OnShareVideoCancelledCallback,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            带Json数据格式的分享视频。分享的视频文件是调用StopVideo后生成的文件。
            注意：视频分享需要录制至少3s的视频，低于3s的视频将会分享失败。
            </summary>
            <param name="successCallback">分享成功回调</param>
            <param name="failedCallback">分享失败回调</param>
            <param name="cancelledCallback">分享取消回调</param>
            <param name="shareJson">视频分享的其它一些字段信息
                                    (除videoPath、channel字段的其它字段信息，如分享话题、标题、描述等)。
                                     参考：https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/retweet/tt-share-app-message/
                                     </param>
            <returns>函数调用状态，调用成功返回true，否则返回false</returns>
        </member>
        <member name="T:StarkSDKSpace.StarkShare">
            <summary>
            分享模块
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkShare.OnShareSuccessCallback">
            <summary>
            分享成功
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkShare.OnShareFailedCallback">
            <summary>
            分享失败
            <param name="errMsg">错误消息</param>
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkShare.OnShareCancelledCallback">
            <summary>
            分享取消
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkShare.ShareAppMessage(StarkSDKSpace.StarkShare.OnShareSuccessCallback,StarkSDKSpace.StarkShare.OnShareFailedCallback,StarkSDKSpace.StarkShare.OnShareCancelledCallback,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            通用分享
            </summary>
            <param name="successCallback">分享成功回调</param>
            <param name="failedCallback">分享失败回调</param>
            <param name="cancelledCallback">分享取消回调</param>
            <param name="shareJson">可填的字段信息参考：https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/retweet/tt-share-app-message/ </param>
        </member>
        <member name="M:StarkSDKSpace.StarkShare.OnShareAppMessage(StarkSDKSpace.StarkShare.OnshareAppMessageCallback)">
            <summary>
            监听用户点击右上角菜单中的“转发”，"拍抖音"按钮时触发的事件 https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/retweet/tt-on-share-app-message
            需要返回一个ShareParam 对象，用于分享  https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/retweet/share-param
            </summary>
            <param name="callback"> callback 接收一个 object 类型的参数，属性为：string: channel</param>
        </member>
        <member name="M:StarkSDKSpace.StarkShare.OffShareAppMessage(StarkSDKSpace.StarkShare.OnshareAppMessageCallback)">
            <summary>
            取消监听用户点击右上角菜单的“转发”按钮时触发的事件。 https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/retweet/tt-off-share-app-message
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkShare.ShareMessageToFriend(TTSDK.UNBridgeLib.LitJson.JsonData,StarkSDKSpace.StarkShare.OnShareSuccessCallback,StarkSDKSpace.StarkShare.OnShareFailedCallback,StarkSDKSpace.StarkShare.OnShareCancelledCallback)">
            <summary>
            通用分享
            </summary>
            <param name="options">可填的字段信息参考：https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/retweet/tt-share-message-to-friend/
             openId     string  是   发送对象的 openId
             templateId string  是   分享素材模板 id，指定通过平台审核的 templateId 来选择分享内容，需在平台设置且通过审核
             query      string  否   查询字符串，必须是 key1=val1&amp;key2=val2 的格式。从这条转发消息进入后，可通过 tt.getLaunchOptionsSync 或 tt.onShow 获取启动参数中的 query用来实现信息透传
            </param>
            <param name="successCallback">分享成功回调</param>
            <param name="failedCallback">分享失败回调</param>
            <param name="cancelledCallback">分享取消回调</param>
        </member>
        <member name="T:StarkSDKSpace.StarkShare.OnShowShareMenuSuccessCallback">
            <summary>
            ShowShareMenu 接口调用成功回调
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkShare.OnShowShareMenuFailCallback">
            <summary>
            ShowShareMenu 接口调用失败回调
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkShare.OnShowShareMenuCompleteCallback">
            <summary>
            ShowShareMenu 接口调用结束回调（调用成功、失败都会执行）
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkShare.ShowShareMenu(StarkSDKSpace.StarkShare.OnShowShareMenuSuccessCallback,StarkSDKSpace.StarkShare.OnShowShareMenuFailCallback,StarkSDKSpace.StarkShare.OnShowShareMenuCompleteCallback)">
            <summary>
            设置小游戏转发按钮为显示状态。
            转发按钮位于小游戏页面右上角的“更多”中。
            详细信息：https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/retweet/tt-show-share-menu
            </summary>
            <param name="successCallback">接口调用成功的回调函数</param>
            <param name="failCallback">接口调用失败的回调函数</param>
            <param name="completeCallback">接口调用结束的回调函数</param>
        </member>
        <member name="T:StarkSDKSpace.StarkShare.OnHideShareMenuSuccessCallback">
            <summary>
            HideShareMenu 接口调用成功回调
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkShare.OnHideShareMenuFailCallback">
            <summary>
            HideShareMenu 接口调用失败回调
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkShare.OnHideShareMenuCompleteCallback">
            <summary>
            HideShareMenu 接口调用结束回调（调用成功、失败都会执行）
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkShare.HideShareMenu(StarkSDKSpace.StarkShare.OnHideShareMenuSuccessCallback,StarkSDKSpace.StarkShare.OnHideShareMenuFailCallback,StarkSDKSpace.StarkShare.OnHideShareMenuCompleteCallback)">
            <summary>
            设置小游戏转发按钮为隐藏状态。
            转发按钮位于小游戏页面右上角的“更多”中。
            详细信息：https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/retweet/tt-hide-share-menu
            </summary>
            <param name="successCallback">接口调用成功的回调函数</param>
            <param name="failCallback">接口调用失败的回调函数</param>
            <param name="completeCallback">接口调用结束的回调函数</param>
        </member>
        <member name="T:StarkSDKSpace.StarkFileSystemManager">
            文件存储接口
            具体使用说明参考文档：https://bytedance.feishu.cn/docx/JpAMdacnaoyFDdx0fhXcUwL5nAe
        </member>
        <member name="F:StarkSDKSpace.StarkFileSystemManager.USER_DATA_PATH">
            <summary>
            用户数据存储的路径
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.WriteFileSync(System.String,System.String,System.String)">
            <summary>
            将字符串写入文件（同步）
            </summary>
            <param name="filePath">要写入的文件路径</param>
            <param name="data">要写入的文本</param>
            <param name="encoding">指定写入文件的字符编码</param>
            <returns>成功返回空字符串，失败返回错误信息</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.WriteFileSync(System.String,System.Byte[])">
            <summary>
            将二进制写入文件（同步）
            </summary>
            <param name="filePath">要写入的文件路径</param>
            <param name="data">要写入的二进制数据</param>
            <returns>成功返回空字符串，失败返回错误信息</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.WriteFile(TTSDK.WriteFileParam)">
            <summary>
            将二进制写入文件（异步）
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.WriteFile(TTSDK.WriteFileStringParam)">
            <summary>
            将字符串写入文件（异步）
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.ReadFile(TTSDK.ReadFileParam)">
            <summary>
            读取本地文件内容（异步）
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.ReadFileSync(System.String)">
            <summary>
            从本地文件读取二进制数据数据（同步）
            </summary>
            <param name="filePath"></param>
            <returns>字节数据，读取失败返回null</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.ReadFileSync(System.String,System.String)">
            <summary>
            从本地文件读取字符串数据（同步）
            </summary>
            <param name="filePath">要读取的文件的路径</param>
            <param name="encoding">指定读取文件的字符编码, 不能为空</param>
            <returns>字符串数据，读取失败返回null</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.AccessSync(System.String)">
            <summary>
            判断文件/目录是否存在（同步）
            </summary>
            <param name="path">要判断是否存在的文件/目录路径</param>
            <returns>成功返回 true, 失败返回 false</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.Access(TTSDK.AccessParam)">
            <summary>
            判断文件/目录是否存在（异步）
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.CopyFileSync(System.String,System.String)">
            <summary>
            复制文件（同步） 
            </summary>
            <param name="srcPath">源文件路径</param>
            <param name="destPath">目标文件路径</param>
            <returns>成功返回空字符串，失败返回错误信息</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.CopyFile(TTSDK.CopyFileParam)">
            <summary>
            复制文件（异步）
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.RenameFile(TTSDK.RenameFileParam)">
            <summary>
            重命名文件（异步）
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.RenameFileSync(System.String,System.String)">
            <summary>
            重命名文件（同步）
            </summary>
            <param name="srcPath">源文件路径</param>
            <param name="destPath">目标文件路径</param>
            <returns>成功返回空字符串，失败返回错误信息</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.UnlinkSync(System.String)">
            <summary>
            删除文件（同步）
            </summary>
            <param name="filePath">源文件路径，支持本地路径</param>
            <returns>成功返回空字符串，失败返回错误信息</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.Unlink(TTSDK.UnlinkParam)">
            <summary>
            删除文件（异步）
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.Mkdir(TTSDK.MkdirParam)">
            <summary>
            创建目录（异步）
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.MkdirSync(System.String,System.Boolean)">
            <summary>
            创建目录（同步）
            </summary>
            <param name="dirPath">创建的目录路径</param>
            <param name="recursive">是否在递归创建该目录的上级目录后再创建该目录。如果对应的上级目录已经存在，则不创建该上级目录。如 dirPath 为 a/b/c/d 且 recursive 为 true，将创建 a 目录，再在 a 目录下创建 b 目录，以此类推直至创建 a/b/c 目录下的 d 目录。</param>
            <returns>成功返回空字符串，失败返回错误信息</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.Rmdir(TTSDK.RmdirParam)">
            <summary>
            删除目录（异步）
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.RmdirSync(System.String,System.Boolean)">
            <summary>
            删除目录（同步）
            </summary>
            <param name="dirPath">创建的目录路径</param>
            <param name="recursive">是否递归删除目录。如果为 true，则删除该目录和该目录下的所有子目录以及文件	。</param>
            <returns>成功返回空字符串，失败返回错误信息</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.StatSync(System.String,System.Boolean)">
            <summary>
            读取文件描述信息（同步）
            </summary>
            <param name="path">文件/目录路径</param>
            <param name="throwException">是否抛出错误信息，如果抛出错误信息，当文件不存在时则会抛出异常，错误信息从异常中获取。</param>
            <returns>返回文件信息，如果访问失败则返回null</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.Stat(TTSDK.StatParam)">
            <summary>
            读取文件描述信息（异步）
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.GetSavedFileList(TTSDK.GetSavedFileListParam)">
            <summary>
            获取保存的用户目录文件列表（仅WebGL平台可用）
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.GetLocalCachedPathForUrl(System.String)">
            <summary>
            根据url链接获取本地缓存文件路径（仅WebGL平台可用）
            </summary>
            <param name="url">输入文件下载链接url</param>
            <returns>返回本地缓存文件路径，以scfile://user开头的路径，可以直接用这个路径访问该文件</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkFileSystemManager.IsUrlCached(System.String)">
            <summary>
            判断该url是否有本地缓存文件（仅WebGL平台可用）
            </summary>
            <param name="url">输入文件下载链接url</param>
            <returns>如果存在缓存文件则返回true，不存在缓存文件则返回false</returns>
        </member>
        <member name="T:StarkSDKSpace.SafeArea">
            <summary>
            在竖屏正方向下的安全区域
            </summary>
        </member>
        <member name="F:StarkSDKSpace.SafeArea.left">
            <summary>
            安全区域左上角横坐标
            </summary>
        </member>
        <member name="F:StarkSDKSpace.SafeArea.right">
            <summary>
            安全区域右下角横坐标
            </summary>
        </member>
        <member name="F:StarkSDKSpace.SafeArea.top">
            <summary>
            安全区域左上角纵坐标
            </summary>
        </member>
        <member name="F:StarkSDKSpace.SafeArea.bottom">
            <summary>
            安全区域右下角纵坐标
            </summary>
        </member>
        <member name="F:StarkSDKSpace.SafeArea.width">
            <summary>
            安全区域的宽度，单位逻辑像素
            </summary>
        </member>
        <member name="F:StarkSDKSpace.SafeArea.height">
            <summary>
            安全区域的高度，单位逻辑像素
            </summary>
        </member>
        <member name="T:StarkSDKSpace.DeviceScore">
            <summary>
            机型性能评分
            </summary>
        </member>
        <member name="T:StarkSDKSpace.Orientation">
            <summary>
            屏幕方向
            </summary>
        </member>
        <member name="F:StarkSDKSpace.Orientation.Portrait">
            <summary>
            竖屏
            </summary>
        </member>
        <member name="F:StarkSDKSpace.Orientation.Landscape">
            <summary>
            横屏
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkSystemInfo">
            <summary>
            系统信息
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkSystemInfo.hostName">
            <summary>
            当前宿主名，如 Douyin
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkSystemInfo.hostVersion">
            <summary>
            当前宿主版本号，如 19.2.0
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkSystemInfo.scVersion">
            <summary>
            StarkContainer 底层框架版本号
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkSystemInfo.brand">
            <summary>，如 Apple、samsung
            手机设备制造商
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkSystemInfo.model">
            <summary>
            手机品牌，如 iPhone 12、SM-G9880
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkSystemInfo.platform">
            <summary>
            操作系统，如 ios、android
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkSystemInfo.system">
            <summary>
            系统版本，如 iOS 15.1.1、Android 11
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkSystemInfo.language">
            <summary>
            系统语言，如 zh_CN
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkSystemInfo.sdkVersion">
            <summary>
            客户端基础库版本
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkSystemInfo.pixelRatio">
            <summary>
            设备像素比
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkSystemInfo.screenHeight">
            <summary>
            屏幕高度，单位逻辑像素
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkSystemInfo.screenWidth">
            <summary>
            屏幕宽度，单位逻辑像素
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkSystemInfo.statusBarHeight">
            <summary>
            状态栏的高度
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkSystemInfo.safeArea">
            <summary>
            在竖屏正方向下的安全区域
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkSystemInfo.deviceScore">
            <summary>
            机型性能评分
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkUIManager.ShowToast(System.String)">
            <summary>
            Toast提示
            </summary>
            <param name="message">提示信息</param>
        </member>
        <member name="M:StarkSDKSpace.StarkUIManager.ShowToastLong(System.String)">
            <summary>
            Toast提示
            </summary>
            <param name="message">提示信息</param>
        </member>
        <member name="M:StarkSDKSpace.StarkGoldCoinManager.RequestGoldOrder(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData},System.Action,System.Action{System.Int32,System.String})">
            <summary>
            金币发放or扣除
            </summary>
            <param name="paramJson">以上参数使用json的形式传入，例如：{"type":1,"bizId":"xxxxx","goldNum":1,"customId":"xxxx"}</param>
            <param name="successCallback">执行成功的回调函数，会返回平台订单号,例如：{"orderId":"xxxxx"}</param>
            <param name="completeCallback">接口调用成功的回调函数</param>
            <param name="errorCallback">接口调用失败的回调函数</param>
        </member>
        <member name="T:StarkSDKSpace.StarkTouch">
            <summary>
            Touch 对象表示在触控设备上的触摸点。通常是指手指或者触控笔在触屏设备或者触摸板上的操作。
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkTouch.identifier">
            <summary>
            Touch 对象的唯一标识符，只读属性。一次触摸动作(指手指的触摸)在平面上移动的整个过程中, 该标识符不变。 可以根据它来判断跟踪的是否是同一次触摸过程。
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkTouch.screenX">
            <summary>
            触点相对于屏幕左边沿的 X 坐标。
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkTouch.screenY">
            <summary>
            触点相对于屏幕上边沿的 Y 坐标。
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkTouchEvent">
            <summary>
            触摸事件
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkTouchEvent.touches">
            <summary>
            当前所有触摸点的列表
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkTouchEvent.changedTouches">
            <summary>
            触发此次事件的触摸点列表
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkTouchEvent.timestamp">
            <summary>
            事件触发时的时间戳
            </summary>
        </member>
        <member name="T:StarkSDKSpace.CallbackManager`2">
            <summary>
            将 Stark 的事件包装到 TT 的事件 delegate，同时管理 On/Off 规则
            </summary>
            <typeparam name="TStarkCallback"></typeparam>
            <typeparam name="TTCallback"></typeparam>
        </member>
        <member name="T:StarkSDKSpace.StarkInput.TouchEventCallback">
            <summary>
            触控事件回调
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkInput.OnTouchStart(StarkSDKSpace.StarkInput.TouchEventCallback)">
            <summary>
            监听开始触摸事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkInput.OnTouchMove(StarkSDKSpace.StarkInput.TouchEventCallback)">
            <summary>
            监听触点移动事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkInput.OnTouchEnd(StarkSDKSpace.StarkInput.TouchEventCallback)">
            <summary>
            监听触摸结束事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkInput.OnTouchCancel(StarkSDKSpace.StarkInput.TouchEventCallback)">
            <summary>
            监听触点失效事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkInput.OffTouchStart(StarkSDKSpace.StarkInput.TouchEventCallback)">
            <summary>
            取消监听开始触摸事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkInput.OffTouchMove(StarkSDKSpace.StarkInput.TouchEventCallback)">
            <summary>
            取消监听触点移动事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkInput.OffTouchEnd(StarkSDKSpace.StarkInput.TouchEventCallback)">
            <summary>
            取消监听触摸结束事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkInput.OffTouchCancel(StarkSDKSpace.StarkInput.TouchEventCallback)">
            <summary>
            取消监听触点失效事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkClipboard.SetClipboardData(System.String,System.Action{System.Boolean,System.String})">
            <summary>
            设置剪切板信息
            </summary>
            <param name="data">设置的内容</param>
            <param name="action">bool = true设置成功，反则关注错误信息</param>
        </member>
        <member name="M:StarkSDKSpace.StarkClipboard.GetClipboardData(System.Action{System.Boolean,System.String})">
            <summary>
            获取剪切板信息
            </summary>
            <param name="action">bool = true获取成功，value为内容，反则关注错误信息</param>
        </member>
        <member name="M:StarkSDKSpace.StarkLiveManager.CheckRoomIsValid(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData},System.Action{System.Int32,System.String},System.Action)">
            <summary>
            检查直播间/小游戏挂载状态是否有效
            </summary>
            <param name="param">入参，主要为直播间ID{"roomID":"xxxx"}，如从直播间进入小游戏roomId来源于启动参数中</param>
            <param name="successCallback">成功回调</param>
            <param name="failedCallback">失败回调</param>
            <param name="completeCallback">完成回调</param>
        </member>
        <member name="M:StarkSDKSpace.StarkLiveManager.NavigateToLive(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData},System.Action{System.Int32,System.String},System.Action)">
            <summary>
            跳转至直播间
            </summary>
            <param name="param">入参，主要为直播间ID{"roomID":"xxxx"}</param>
            <param name="successCallback">成功回调</param>
            <param name="failedCallback">失败回调</param>
            <param name="completeCallback">完成回调</param>
        </member>
        <member name="M:StarkSDKSpace.StarkSideBar.CheckScene(StarkSDKSpace.StarkSideBar.SceneEnum,System.Action{System.Boolean},System.Action,System.Action{System.Int32,System.String})">
            <summary>
            确认当前宿主版本是否支持跳转某个小游戏入口场景。
            </summary>
            <param name="scene">需要确认的入口场景（目前仅支持的入参为'sidebar'）</param>
            <param name="success">接口调用成功的回调函数, bool为true说明支持，false表示不支持</param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
            <param name="error">接口调用失败的回调函数</param>
        </member>
        <member name="M:StarkSDKSpace.StarkSideBar.NavigateToScene(StarkSDKSpace.StarkSideBar.SceneEnum,System.Action,System.Action,System.Action{System.Int32,System.String})">
            <summary>
            调用该API可以跳转到某个小游戏入口场景。
            </summary>
            <param name="scene">需要确认的入口场景（目前仅支持的入参为'sidebar'）</param>
            <param name="success">接口调用成功的回调函数, bool为true说明支持，false表示不支持</param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
            <param name="error">接口调用失败的回调函数</param>
        </member>
        <member name="M:StarkSDKSpace.StarkSideBar.NavigateToSceneV2(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action,System.Action,System.Action{System.Int32,System.String})">
            <summary>
            调用该API可以跳转到某个小游戏入口场景。支持福利信息透传
            </summary>
            <param name="data">参数例子{"scene":"sidebar"[,"activityId":"一般跳转不用这个字段、不要传递"]}</param>
            <param name="success">接口调用成功的回调函数, bool为true说明支持，false表示不支持</param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
            <param name="error">接口调用失败的回调函数</param>
        </member>
        <member name="M:StarkSDKSpace.StarkSideBar.RequestPromotionActivity(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData},System.Action,System.Action{System.Int32,System.String})">
            <summary>
            注册用户参与复访营销活动。当前只支持侧边栏复访活动
            </summary>
            <param name="data">指定用户参与的营销活动id，通过OpenAPI申请得到。未填写时，会由平台选择可用活动,可选，例如{"activityId":"111111"}</param>
            <param name="success">接口调用成功的回调函数, </param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
            <param name="error">接口调用失败的回调函数</param>
        </member>
        <member name="M:StarkSDKSpace.StarkSideBar.ReceiveCoupon(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{TTSDK.UNBridgeLib.LitJson.JsonData},System.Action,System.Action{System.Int32,System.String})">
            <summary>
            领取营销活动中完成任务后的奖励。当前只支持侧边栏复访活动
            </summary>
            <param name="data">用户参与的营销活动id，通过OpenAPI申请得到。未填写时，会由平台选择可发放的奖励，可选，例如{"activityId":"7368350593716338729"}</param>
            <param name="success">接口调用成功的回调函数, </param>
            <param name="complete">接口调用结束的回调函数（调用成功、失败都会执行）</param>
            <param name="error">接口调用失败的回调函数</param>
        </member>
        <member name="T:StarkSDKSpace.StarkGridGamePanelManager">
            <summary>
            互推格子模块
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkGridGamePanelManager.CreateGridGamePanel(StarkSDKSpace.StarkGridGamePanelManager.GridGamePanelCount,TTSDK.UNBridgeLib.LitJson.JsonData,StarkSDKSpace.StarkGridGamePanelManager.GridGamePanelSize,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            游戏互推组件能力
            </summary>
            <param name="gridCount">GridGamePanelCount，表示游戏推荐组件的格子数量</param>
            <param name="query">从组件内打开游戏时附带的query信息</param>
            <param name="size">GridGamePanelSize，表示组件大小，large：100%，medium：90%，small：80%。仅 gridCount = one | four 时有效。</param>
            <param name="position">控制游戏推荐组件的展示位置，不传入时默认展示在屏幕右下角。仅 gridCount = one 时有效。</param>
            <returns></returns>
        </member>
        <member name="M:StarkSDKSpace.StarkGridGamePanelManager.StarkGridGamePanel.Show">
            <summary>
            显示
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkGridGamePanelManager.StarkGridGamePanel.Hide">
            <summary>
            隐藏
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkGridGamePanelManager.StarkGridGamePanel.Destroy">
            <summary>
            销毁
            </summary>
        </member>
        <member name="P:StarkSDKSpace.StarkSDK.EnableStarkSDKDebugToast">
            <summary>
            是否显示调试Toast提示。当调用StarkSDK相关接口后，获得函数执行状态（主要是失败状态）的反馈。
            设置为true则在调用StarkSDK相关接口后，会自动弹出Toast提示。默认不显示。【建议只在调试状态下开启】
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkSDK.Init">
            <summary>
            Stark_UnitySDK初始化函数
            </summary>
            <returns>error code :
            0 , 无错误
            1, stark unity sdk 版本不支持
            2，unity engine 版本不被支持</returns>
        </member>
        <member name="P:StarkSDKSpace.StarkSDK.s_IsInContianer">
            <summary>
            是否在StarkContainer真机环境下
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkFavorite.Style.TopBar">
            <summary>
            顶部弹窗
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkFavorite.Style.BottomBar">
            <summary>
            底部弹窗
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkFavorite.Style.Tip">
            <summary>
            顶部气泡
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkFavorite.Collect(System.Action{System.Boolean})">
            <summary>
            游戏收藏
            </summary>
            <param name="callback"> 收藏回调，true表示成功，false表示失败 </param>
        </member>
        <member name="M:StarkSDKSpace.StarkFavorite.CancelCollection(System.Action{System.Boolean})">
            <summary>
            取消游戏收藏
            </summary>
            <param name="callback"> 取消收藏回调，true表示成功，false表示失败 </param>
        </member>
        <member name="M:StarkSDKSpace.StarkFavorite.IsCollected">
            <summary>
            游戏是否已收藏
            </summary>
            <returns>是否已收藏，true表示已收藏，false表示未收藏</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkFavorite.ShowFavoriteGuide(StarkSDKSpace.StarkFavorite.Style,System.String)">
            <summary>
            收藏引导
            <param name="style">弹窗类型，默认为底部弹窗</param>
            <param name="content">弹窗文案，仅style为 Tip 时可修改，最多显示 12 个字符。</param>
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkFavorite.ShowRevisitGuide(System.Action{System.Boolean})">
            <summary>
            调起引导用户复访的提示弹窗，目前仅抖音宿主支持。
            为了更好的玩家体验，建议在按钮的点击回调中使用。
            </summary>
            <param name="callback">调起复访提示回调，true表示成功，false表示失败</param>
        </member>
        <member name="F:StarkSDKSpace.StarkBaseFileInfo.size">
            <summary>
            文件大小，单位：B
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkBaseFileInfo.mode">
            <summary>
            文件的类型和存取的权限
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkBaseFileInfo.IsFile">
            <summary>
            判断当前文件是否一个普通文件
            </summary>
            <returns>是普通文件返回true，不是则返回false</returns>
        </member>
        <member name="M:StarkSDKSpace.StarkBaseFileInfo.IsDirectory">
            <summary>
            判断当前文件是否一个目录
            </summary>
            <returns>是目录返回true，不是则返回false</returns>
        </member>
        <member name="F:StarkSDKSpace.StarkStatInfo.lastAccessedTime">
            <summary>
            文件最近一次被存取或被执行的时间
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkStatInfo.lastModifiedTime">
            <summary>
            文件最后一次被修改的时间
            </summary>
        </member>
        <member name="T:StarkSDKSpace.LoginState">
            <summary>
            当前的登录状态
            </summary>
        </member>
        <member name="T:StarkSDKSpace.ScUserInfo">
            <summary>
            登录后获取登录的用户信息
            </summary>
        </member>
        <member name="T:StarkSDKSpace.AuthorizeScope">
            <summary>
            https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/open-capacity/user-information/authorization/authorization/
            </summary>
        </member>
        <member name="F:StarkSDKSpace.AuthorizeScope.UserInfo">
            <summary>
            是否授权用户信息
            对应接口：tt.getUserInfo
            </summary>
        </member>
        <member name="F:StarkSDKSpace.AuthorizeScope.UserLocation">
            <summary>
            是否授权地理位置
            对应接口：tt.getLocation
            </summary>
        </member>
        <member name="F:StarkSDKSpace.AuthorizeScope.Record">
            <summary>
            是否授权录音功能
            对应接口：tt.getRecorderManager.start
            </summary>
        </member>
        <member name="F:StarkSDKSpace.AuthorizeScope.Album">
            <summary>
            是否授权保存到相册
            对应接口：tt.saveImageToPhotosAlbum, tt.saveVideoToPhotosAlbum
            </summary>
        </member>
        <member name="F:StarkSDKSpace.AuthorizeScope.Camera">
            <summary>
            是否授权摄像头
            对应接口：tt.scanCode, tt.chooseImage, tt.chooseVideo
            </summary>
        </member>
        <member name="F:StarkSDKSpace.AuthorizeScope.ScreenRecord">
            <summary>
            是否授权录屏，默认为开。在 onError 里面报错到没有录屏权限时，可以尝试主动调用
            对应接口：tt.getGameRecorderManager
            </summary>
        </member>
        <member name="F:StarkSDKSpace.AuthorizeScope.Calendar">
            <summary>
            是否授权添加日历事件
            对应接口：tt.addPhoneCalendar
            </summary>
        </member>
        <member name="T:StarkSDKSpace.AuthSetting">
             <summary>
             用户权限授权结果
            
             代码示例 1：检查用户是否已授权指定权限：
             ```
               if (AuthSetting.UserInfo)
               {
                    Debug.Log($"用户已授权 UserInfo 权限。");
               }
               else
               {
                    Debug.Log($"用户未授权过或已拒绝 UserInfo 权限。");
               }
             ```
             
             代码示例 2：检查用户已授权、拒绝或未授权过指定权限：
             ```
               var scope = AuthorizeScope.UserInfo;
               if (AuthSetting.TryGetValue(scope, out var authorized))
               {
                   if (authorized)
                   {
                       Debug.Log($"用户已授权 {scope} 权限。");
                   }
                   else
                   {
                       Debug.Log($"用户已拒绝 {scope} 权限。");
                   }
               }
               else
               {
                    Debug.Log($"用户未授权过 {scope} 权限。");
               }
             ```
             </summary>
        </member>
        <member name="P:StarkSDKSpace.AuthSetting.UserInfo">
            <summary>
            是否授权用户信息
            对应接口：tt.getUserInfo
            </summary>
        </member>
        <member name="P:StarkSDKSpace.AuthSetting.UserLocation">
            <summary>
            是否授权地理位置
            对应接口：tt.getLocation
            </summary>
        </member>
        <member name="P:StarkSDKSpace.AuthSetting.Record">
            <summary>
            是否授权录音功能
            对应接口：tt.getRecorderManager.start
            </summary>
        </member>
        <member name="P:StarkSDKSpace.AuthSetting.Album">
            <summary>
            是否授权保存到相册
            对应接口：tt.saveImageToPhotosAlbum tt.saveVideoToPhotosAlbum
            </summary>
        </member>
        <member name="P:StarkSDKSpace.AuthSetting.Camera">
            <summary>
            是否授权摄像头
            对应接口：tt.scanCode tt.chooseImage tt.chooseVideo
            </summary>
        </member>
        <member name="P:StarkSDKSpace.AuthSetting.ScreenRecord">
            <summary>
            是否授权录屏，默认为开。在 onError 里面报错到没有录屏权限时，可以尝试主动调用
            对应接口：tt.getGameRecorderManager
            </summary>
        </member>
        <member name="P:StarkSDKSpace.AuthSetting.Calendar">
            <summary>
            是否授权添加日历事件
            对应接口：tt.addPhoneCalendar
            </summary>
        </member>
        <member name="T:StarkSDKSpace.DouyinPermissionScopeStatus">
            <summary>
            需获取的抖音权限在授权弹窗中的默认状态
            </summary>
        </member>
        <member name="F:StarkSDKSpace.DouyinPermissionScopeStatus.Required">
            <summary>
            必选项（用户无法取消）
            </summary>
        </member>
        <member name="F:StarkSDKSpace.DouyinPermissionScopeStatus.OptionalSelected">
            <summary>
            非必选，默认选中
            </summary>
        </member>
        <member name="F:StarkSDKSpace.DouyinPermissionScopeStatus.OptionalUnselected">
            <summary>
            非必选，默认不选中
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkAccount">
            <summary>
            Stark账号系统
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkAccount.OnLoginSuccessCallback">
            <summary>
            登录成功
            </summary>
            <param name="code">临时登录凭证, 有效期 3 分钟。可以通过在服务器端调用 登录凭证校验接口 换取 openid 和 session_key 等信息。</param>
            <param name="anonymousCode">用于标识当前设备, 无论登录与否都会返回, 有效期 3 分钟</param>
            <param name="isLogin">判断在当前 APP(头条、抖音等)是否处于登录状态</param>
        </member>
        <member name="T:StarkSDKSpace.StarkAccount.OnLoginFailedCallback">
            <summary>
            登录失败
            <param name="errMsg">错误消息</param>
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkAccount.OnCheckSessionFailedCallback">
            <summary>
            检查Session接口调用失败的回调函数
            </summary>
            <param name="errMsg">错误原因</param>
        </member>
        <member name="T:StarkSDKSpace.StarkAccount.OnCheckSessionSuccessCallback">
            <summary>
            接口调用成功的回调函数
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkAccount.OnGetScUserInfoFailedCallback">
            <summary>
            获取用户信息失败的回调
            </summary>
            <param name="errMsg">失败信息</param>
        </member>
        <member name="T:StarkSDKSpace.StarkAccount.OnGetScUserInfoSuccessCallback">
            <summary>
            获取用户信息成功的回调
            </summary>
            <param name="scUserInfo">目标用户信息</param>
        </member>
        <member name="T:StarkSDKSpace.StarkAccount.OnRealNameAuthentication">
            <summary>
            用户实名认证成功的回调
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkAccount.OnGetUserInfoAuthSuccess">
            <summary>
            判断当前用户是否已经授权给游戏读取自身的信息
            </summary>
            <param name="auth">是否授权</param>
        </member>
        <member name="T:StarkSDKSpace.StarkAccount.OnGetUserInfoAuthFail">
            <summary>
            调用接口判断当前用户是否已经授权时失败或者发生内部错误
            </summary>
            <param name="errMsg"></param>
        </member>
        <member name="T:StarkSDKSpace.StarkAccount.OnGetSettingSuccess">
            <summary>
            获取用户已经授权过的配置时，接口调用成功的回调函数。
            </summary>
            <param name="auth">授权结果</param>
        </member>
        <member name="T:StarkSDKSpace.StarkAccount.OnGetSettingFail">
            <summary>
            获取用户已经授权过的配置时，接口调用失败的回调函数。
            </summary>
            <param name="errMsg"></param>
        </member>
        <member name="T:StarkSDKSpace.StarkAccount.OnOpenSettingSuccess">
            <summary>
            打开设置页面，返回用户设置过的授权结果时，接口调用成功的回调函数。
            </summary>
            <param name="auth">授权结果</param>
        </member>
        <member name="T:StarkSDKSpace.StarkAccount.OnOpenSettingFail">
            <summary>
            打开设置页面，返回用户设置过的授权结果时，接口调用失败的回调函数。
            </summary>
            <param name="errMsg"></param>
        </member>
        <member name="T:StarkSDKSpace.StarkAccount.OnAuthenticateRealNameSuccessCallback">
            <summary>
            实名认证窗口拉起成功回调
            </summary>
            <param name="errMsg"></param>
        </member>
        <member name="T:StarkSDKSpace.StarkAccount.OnAuthenticateRealNameFailedCallback">
            <summary>
            实名认证窗口拉起失败回调
            <param name="errMsg">"access:fail " + 详细错误信息</param>
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkAccount.OnShowDouyinOpenAuthSuccessCallback">
            <summary>
            展示抖音权限授权弹窗成功回调
            <param name="errMsg">回调信息</param>
            <param name="ticket">请求授权返回的票据，此处对标开放平台的 authCode</param>
            <param name="grantPermissions">用户授权的权限</param>
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkAccount.OnShowDouyinOpenAuthFailedCallback">
            <summary>
            展示抖音权限授权弹窗失败回调
            <param name="errNo">错误码</param>
            <param name="errMsg">错误信息</param>
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAccount.Login(StarkSDKSpace.StarkAccount.OnLoginSuccessCallback,StarkSDKSpace.StarkAccount.OnLoginFailedCallback,System.Boolean)">
            <summary>
            登录-获取临时登录凭证
            强制登录默认为true，即若当前未登录宿主，则会调起宿主的登录窗口, 如果用户点击取消则会调用 fail
            如果当前登录宿主，则直接返回success，获取到 code 和 anonymousCode
            若强制登录为false，当前登录了宿主则会返回success，可以获取到获取到 code 和 anonymousCode
            当前未登录宿主，则只有 anonymousCode
            code 可以换取 openid, openid 是用户的唯一标识
            anonymousCode 可以换取 anonymous_openid, 同一台手机 anonymous_openid 是相同的
            </summary>
            <param name="forceLogin">未登录时, 是否强制调起登录框</param>
            <param name="successCallback">登录成功的回调</param>
            <param name="failedCallback">登陆失败的回调</param>
        </member>
        <member name="M:StarkSDKSpace.StarkAccount.CheckSession(StarkSDKSpace.StarkAccount.OnCheckSessionSuccessCallback,StarkSDKSpace.StarkAccount.OnCheckSessionFailedCallback)">
            <summary>
            检查用户当前的 session 状态是否有效
            只有成功调用 login 才会生成 session，checkSession 才会进入 success 回调，当用户退出登录会清除 session
            session_key 会随着login接口的调用被刷新。可以通过checkSession方法验证当前 session 是否有效，从而避免频繁登录。
            目前实际测试若使用匿名登录（forceLogin = false），则checkSession会一直返回 fail
            只有登录了宿主（forceLogin = true），checkSession才会返回success，下次不用login checkSession也可以返回true
            </summary>
            <param name="successCallback">验证有效的回调</param>
            <param name="failedCallback">验证无效或者验证失败的回调</param>
        </member>
        <member name="M:StarkSDKSpace.StarkAccount.GetScUserInfo(StarkSDKSpace.StarkAccount.OnGetScUserInfoSuccessCallback,StarkSDKSpace.StarkAccount.OnGetScUserInfoFailedCallback)">
            <summary>
            获取已登录用户的基本信息或特殊信息
            若匿名登录后 userinfo里面字段全部为默认值
            登录了宿主后可以获取账号数据，下次不用login GetScUserInfo也可以返回正确数据
            </summary>
            <param name="successCallback">获取用户信息成功的回调</param>
            <param name="failedCallback">获取用户信息失败的回调</param>
        </member>
        <member name="M:StarkSDKSpace.StarkAccount.GetUserInfoAuth(StarkSDKSpace.StarkAccount.OnGetUserInfoAuthSuccess,StarkSDKSpace.StarkAccount.OnGetUserInfoAuthFail)">
            <summary>
            判断用户是否已经授权给当前游戏读取个人信息
            该API会调用宿主的代码，如果调用宿主代码成功则会调用onGetUserInfoAuth，并返回是否已经授权
            如果调用宿主代码失败则会调用onGetUserInfoAuthFail
            </summary>
            <param name="onGetUserInfoAuth">调用宿主代码成功，并返回是否已经授权读取用户信息</param>
            <param name="onGetUserInfoAuthFail">调用宿主代码时发生错误</param>
        </member>
        <member name="M:StarkSDKSpace.StarkAccount.OpenSettingsPanel(StarkSDKSpace.StarkAccount.OnGetUserInfoAuthSuccess,StarkSDKSpace.StarkAccount.OnGetUserInfoAuthFail)">
            <summary>
            主动打开获取用户信息的授权界面，在Setting界面关闭后返回最新的授权状态，该方法没有超时时间
            该API会调用宿主的代码，如果调用宿主代码成功则会调用onGetUserInfoAuth，并返回最新的授权状态
            如果调用宿主代码失败则会调用onGetUserInfoAuthFail
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAccount.GetSetting(StarkSDKSpace.StarkAccount.OnGetSettingSuccess,StarkSDKSpace.StarkAccount.OnGetSettingFail)">
            <summary>
            获取用户已经授权过的配置。
            结果中只会包含向用户请求过的权限。
            与 OpenSetting 的区别是 GetSetting 只会获取配置，而不会打开配置页面。
            </summary>
            <param name="onGetSettingSuccess">接口调用成功的回调函数</param>
            <param name="onGetSettingFail">接口调用失败的回调函数</param>
        </member>
        <member name="M:StarkSDKSpace.StarkAccount.OpenSetting(StarkSDKSpace.StarkAccount.OnOpenSettingSuccess,StarkSDKSpace.StarkAccount.OnOpenSettingFail)">
            <summary>
            打开设置页面，返回用户设置过的授权结果。
            结果中只会包含用户请求过的权限。
            与 GetSetting 的区别是，OpenSetting 会打开设置页面，而 GetSetting 只会返回用户授权的设置信息。
            <param name="onOpenSettingSuccess">接口调用成功的回调函数</param>
            <param name="onOpenSettingFail">接口调用失败的回调函数</param>
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAccount.SetRealNameAuthenticationCallback(StarkSDKSpace.StarkAccount.OnRealNameAuthentication)">
            <summary>
            用户在实名认证弹窗完成实名认证后回调
            需要在初始化时设置，回调时机为：游戏中弹出实名认证，用户完成了实名认证时触发
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAccount.GetScUserInfo(System.Boolean,StarkSDKSpace.StarkAccount.OnGetScUserInfoSuccessCallback,StarkSDKSpace.StarkAccount.OnGetScUserInfoFailedCallback)">
            <summary>
            获取已登录用户的基本信息或特殊信息
            若匿名登录后 userinfo里面字段全部为默认值
            登录了宿主后可以获取账号数据，下次不用login GetScUserInfo也可以返回正确数据
            </summary>
            <param name="withCredentials">是否获取加密信息以及 CloudId</param>
            <param name="successCallback">验证有效的回调</param>
            <param name="failedCallback">验证无效或者验证失败的回调</param>
            
        </member>
        <member name="M:StarkSDKSpace.StarkAccount.GetUserInfo(System.Boolean,System.Boolean,StarkSDKSpace.StarkAccount.OnGetScUserInfoSuccessCallback,StarkSDKSpace.StarkAccount.OnGetScUserInfoFailedCallback)">
            <summary>
            获取已登录用户的基本信息或特殊信息
            若匿名登录后 userinfo里面字段全部为默认值
            登录了宿主后可以获取账号数据，下次不用login GetScUserInfo也可以返回正确数据
            </summary>
            <param name="withCredentials">是否获取加密信息以及 CloudId</param>
            <param name="withRealNameAuthenticationInfo">是否需要返回用户实名认证状态，如果是则在成功回调参数中额外返回 `realNameAuthenticationStatus` 字段 </param>
            <param name="successCallback">验证有效的回调</param>
            <param name="failedCallback">验证无效或者验证失败的回调</param>
            
        </member>
        <member name="M:StarkSDKSpace.StarkAccount.AuthenticateRealName(StarkSDKSpace.StarkAccount.OnAuthenticateRealNameSuccessCallback,StarkSDKSpace.StarkAccount.OnAuthenticateRealNameFailedCallback)">
            <summary>
            拉起实名认证窗口。
            注意：调用该接口前请确保用户已登录。
            </summary>
            <param name="successCallback">实名认证窗口拉起成功回调</param>
            <param name="failedCallback">实名认证窗口拉起失败回调</param>
        </member>
        <member name="M:StarkSDKSpace.StarkAccount.ShowDouyinOpenAuth(System.Collections.Generic.Dictionary{System.String,StarkSDKSpace.DouyinPermissionScopeStatus},StarkSDKSpace.StarkAccount.OnShowDouyinOpenAuthSuccessCallback,StarkSDKSpace.StarkAccount.OnShowDouyinOpenAuthFailedCallback)">
            <summary>
            提供小游戏获取抖音权限的能力，展示出抖音权限授权弹窗。
            在使用在接口前，需要小游戏拥有者登录抖音开发平台申请开通小游戏需要的权限。
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkRequest">
            <summary>
            游戏内网络请求模块
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkRequest.Options">
            <summary>
            请求相关设置
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkRequest.Options.Method">
            <summary>网络请求方法，支持 GET/POST/OPTIONS/PUT/HEAD/DELETE</summary>
        </member>
        <member name="F:StarkSDKSpace.StarkRequest.Options.Data">
            <summary>请求的参数</summary>
        </member>
        <member name="F:StarkSDKSpace.StarkRequest.Options.Header">
            <summary>请求header</summary>
        </member>
        <member name="F:StarkSDKSpace.StarkRequest.Options.DataType">
            <summary>期望返回的数据类型</summary>
        </member>
        <member name="F:StarkSDKSpace.StarkRequest.Options.ResponseType">
            <summary>期望响应的数据类型，支持 text 或 arraybuffer</summary>
        </member>
        <member name="T:StarkSDKSpace.StarkRequest.Response">
            <summary>
            请求响应
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkRequest.Request(System.String,StarkSDKSpace.StarkRequest.Options,System.Action{StarkSDKSpace.StarkRequest.Response},System.Action{StarkSDKSpace.StarkRequest.Response})">
            <summary>
            发起一个网络请求。网络相关的 API 在使用前需要配置域名白名单。
            请参考 https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/guide/basic-ability/network/
            </summary>
            <param name="url">请求地址</param>
            <param name="options">相关设置</param>
            <param name="success">请求'成功'的回调</param>
            <param name="fail">请求失败的回调</param>
        </member>
        <member name="M:StarkSDKSpace.StarkRequest.InnerRequest(System.String,StarkSDKSpace.StarkRequest.InnerOptions,System.Action{StarkSDKSpace.StarkRequest.Response},System.Action{StarkSDKSpace.StarkRequest.Response})">
            <summary>
            （内部方法）发起一个网络请求。网络相关的 API 在使用前需要配置域名白名单。
            请参考 https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/guide/basic-ability/network/
            </summary>
            <param name="url">请求地址</param>
            <param name="options">相关设置</param>
            <param name="success">请求'成功'的回调</param>
            <param name="fail">请求失败的回调</param>
        </member>
        <member name="M:StarkSDKSpace.StarkRank.SetImRankDataV2(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{System.Boolean,System.String})">
            https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/open-capacity/game-rank/setImRankData
            <summary>
            在关键的游戏场景，设置写入用户的排行榜数据（游戏成绩信息），该数据会上传到服务端
            </summary>
            <param name="paramJson">以上参数使用json格式传入，例如"{"dataType":0,"value":"100","priority":0,"zoneId":"default"}"</param>
            <param name="action">回调函数</param>
        </member>
        <member name="M:StarkSDKSpace.StarkRank.GetImRankListV2(TTSDK.UNBridgeLib.LitJson.JsonData,System.Action{System.Boolean,System.String})">
             <summary>
            获取排行榜列表，调用 API 后， 根据参数自动绘制游戏好友排行榜
             </summary>
             <param name="paramJson">以上参数使用json格式传入，例如"{"rankType":"week","dataType":0,"relationType":"all","suffix":"分","rankTitle":"","zoneId":"default"}"</param>
             <param name="action">回调函数</param>
        </member>
        <member name="M:StarkSDKSpace.StarkRank.GetImRankDataV2(TTSDK.UNBridgeLib.LitJson.JsonData,StarkSDKSpace.StarkRank.OnGetRankDataSuccessCallback,StarkSDKSpace.StarkRank.OnGetRankDataFailCallback)">
            <summary>
            获取排序好的「好友/总榜」数据源，开发者基于数据源自行渲染返回的数据
            </summary>
            <param name="paramJson">以上参数使用Json格式传入,</param>
            <param name="onGetRankDataSuccessCallback">获取成功回调</param>
            <param name="onGetRankDataFailCallback">获取失败回调</param>
        </member>
        <member name="M:StarkSDKSpace.StarkRank.SetImRankData(System.Int32,System.String,System.Int32,System.String,System.Action{System.Boolean,System.String})">
            https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/open-capacity/game-rank/setImRankData
            <summary>
            在关键的游戏场景，设置写入用户的排行榜数据（游戏成绩信息），该数据会上传到服务端
            </summary>
            <param name="dataType">0：数字类型、1：枚举类型;数字类型（0）往往适用于游戏的通关分数（103分、105分），枚举类型（1）适用于段位信息（青铜、白银）；</param>
            <param name="value">展示出来的数值，dataType == 0 时只能传正数的字符串，否则会报错。value为具体的值，若dataType为0，请传入数字（eg：103、105）；若dataType为1，则传入字符串（eg：青铜、白银）</param>
            <param name="priority">dataType 为 1 时，需要传入这个值判断权重，dataType 为 0 时，不填即可</param>
            <param name="extra">预留字段</param>
            <param name="action">回调函数</param>
        </member>
        <member name="M:StarkSDKSpace.StarkRank.GetImRankList(System.String,System.Int32,System.String,System.String,System.String,System.Action{System.Boolean,System.String})">
             <summary>
            获取排行榜列表，调用 API 后， 根据参数自动绘制游戏好友排行榜
             </summary>
             <param name="rankType">代表数据排序周期，day为当日写入的数据做排序；week为自然周，month为自然月，all为半年</param>
             <param name="dataType">由于数字类型的数据与枚举类型的数据无法同时排序，因此需要选择排序哪些类型的数据</param>
             <param name="relationType">选择榜单展示范围。default: 好友及总榜都展示，all：仅总榜单</param>
             <param name="suffix">数据后缀，最后展示样式为 value + suffix，若suffix传“分”，则展示 103分、104分</param>
             <param name="rankTitle">排行榜标题的文案</param>
             <param name="action">回调函数</param>
        </member>
        <member name="M:StarkSDKSpace.StarkRank.GetImRankData(System.String,System.Int32,System.String,System.Int32,System.Int32,StarkSDKSpace.StarkRank.OnGetRankDataSuccessCallback,StarkSDKSpace.StarkRank.OnGetRankDataFailCallback)">
            <summary>
            获取排序好的「好友/总榜」数据源，开发者基于数据源自行渲染返回的数据
            </summary>
            <param name="rankType">day、week、month、all</param>
            <param name="dataType">0：数字类型 、 1：枚举类型</param>
            <param name="relationType">friend：当前登录用户的好友的游戏数据排行，default：全部写入数据的排行 ，all: 总榜</param>
            <param name="pageNum">页码，从1开始</param>
            <param name="pageSize">每页长度，大于 0 小于 40</param>
            <param name="onGetRankDataSuccessCallback">获取成功回调</param>
            <param name="onGetRankDataFailCallback">获取失败回调</param>
        </member>
        <member name="T:StarkSDKSpace.StarkInputOverrideBypass">
             <summary>
             触控事件适配
             挂载到 EventSystem 对象上以解决 WebGL 方案下多点触控时，部分触点 PointerUp 等事件丢失的问题。
             </summary>
             <remarks>
             当前脚本会通过重载 StandaloneInputModule，将全局鼠标/触控事件映射到 StarkSDK。
             如果需要进一步重载 UnityEngine.Input，请参考 UnityInputOverride.cs。
             如果不需要全局重载，可使用 StarkSDK.API.GetStarkInput() 手动挂载触控监听。
            
             勾选 DebugTraceEnabled，可以打印更多调试日志。
             仅在 WebGL 方案下生效；Native 和 Unity Editor 环境中不会有任何作用。
             </remarks>
        </member>
        <member name="F:StarkSDKSpace.StarkPayService.ERR_CODE_NOT_IN_UC_ENV">
            <summary>
            非uc环境下运行
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkPayService.ERR_CODE_PAY_NOT_SUPPORT">
            <summary>
            当前uc环境不支持支付功能
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkPayService.ERR_CODE_PAY_UNFINISHED">
            <summary>
            前一个支付未完成
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkPayService.ERR_CODE_INVALID_ORDER_INFO">
            <summary>
            orderInfo参数无效
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkPayService.ERR_CODE_PAY_FAILED">
            <summary>
            支付失败
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkPayService.ERR_CODE_WX_LAUNCH_FAILED">
            <summary>
            拉起微信支付失败
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkPayService.ERR_CODE_WX_NOT_INSTALLED">
            <summary>
            微信未安装
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkPayService.GetOrderStatusHandler">
            <summary>
            查询订单状态处理函数
            </summary>
            <param name="orderNo">订单号（从orderInfo中读取的order_info值）</param>
            <param name="tradeTime">交易时间（从orderInfo中读取的trade_time值）</param>
            <returns>PayStatus 订单支付状态</returns>
        </member>
        <member name="T:StarkSDKSpace.StarkPayService.PayStatus">
            <summary>
            支付状态
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkPayService.PayStatus.PaySuccess">
            <summary>
            支付成功
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkPayService.PayStatus.PayTimeout">
            <summary>
            支付超时
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkPayService.PayStatus.PayFailed">
            <summary>
            支付失败
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkPayService.PayStatus.PayClosed">
            <summary>
            支付关闭
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkPayService.PayStatus.PayCancel">
            <summary>
            支付取消
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkPayService.PayStatus.PayUnknown">
            <summary>
            订单状态未知/未支付
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkPayService.PayServiceType">
            <summary>
            拉起支付服务类型
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkPayService.PayServiceType.Checkout">
            <summary>
            小程序收银台，从收银台选择支付渠道
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkPayService.PayServiceType.Wechat">
            <summary>
            调用微信 API 支付，不拉起小程序收银台
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkPayService.PayServiceType.Alipay">
            <summary>
            调用支付宝 API 支付，不拉起小程序收银台
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkPayService.PayChannel">
            <summary>
            支付渠道
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkPayService.PayChannel.Wechat">
            <summary>
            使用微信支付
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkPayService.PayChannel.Alipay">
            <summary>
            使用支付宝支付
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkPayService.Pay(System.String,StarkSDKSpace.StarkPayService.PayServiceType,StarkSDKSpace.StarkPayService.PayChannel,StarkSDKSpace.StarkPayService.GetOrderStatusHandler,System.Action{StarkSDKSpace.StarkPayService.PayStatus},System.Action{System.Int32,System.String})">
            <summary>
            支付接口 （已废弃）
            参考文档：https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/api/open-interface/pay/tt-pay/
            </summary>
            <param name="orderInfo">json字符串。调起小程序支付收银台的签名订单信息。
                                    生成方式参考文档：https://microapp.bytedance.com/docs/zh-CN/mini-app/develop/server/ecpay/server-doc/ </param>
            <param name="serviceType">拉起支付服务类型 (小程序收银台、微信、支付宝)</param>
            <param name="defaultPayChannel">默认勾选的支付方式（支付宝或微信），仅在 serviceType 值为 Checkout 时有效。
                                            注意：这个设置会依赖服务器端下发用户上次使用过的支付方式作为默认支付方式，所以这个设置可能不会生效。</param>
            <param name="orderStatusHandler">(orderNo, tradeTime) => { return PayStatus; } 查询订单支付状态函数实现，仅在 serviceType 值为 Checkout 时需要实现。
                                             如果 serviceType 值为 Checkout ，需要由业务方实现 orderStatusHandler 接口，根据订单号从业务后台查询支付状态并返回支付状态结果，主要用于通知前端界面展示。
                                             注意：orderStatusHandler 这个回调函数会在底层轮循调用。如果查询不到支付结果状态，可以返回PayUnknown状态。</param>
            <param name="payCallback">支付回调 (payStatus) => {}</param>
            <param name="errCallback">当有错误发生时回调 (errCode, errMsg) => {} </param>
        </member>
        <member name="M:StarkSDKSpace.StarkPayService.PayModuleInit">
            <summary>
            初始化支付接口，减少支付时卡顿时间
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkPayService.RequestGamePayment(System.Collections.Generic.Dictionary{System.String,System.Object},System.Action,System.Action{System.Int32,System.String})">
            <summary>
            小游戏平台的支付接口
            接口文档 https://microapp.bytedance.com/docs/zh-CN/mini-game/develop/api/payment/tt-request-game-payment
            mode string 支付的类型, 目前仅为"game"
            env int 环境配置，目前合法值仅为"0"
            currencyType string 币种, 目前仅为"CNY"
            platform string  申请接入时的平台，目前仅为"android"
            buyQuantity int 金币购买数量
            zoneId 选填 string 游戏服务区 id，
            customId 选填 string 游戏开发者自定义的唯一订单号，订单支付成功后通过服务端支付结果回调回传
            extraInfo string 游戏开发者自定义的其他信息，订单支付成功后通过服务端支付结果回调回传。字符串长度最大不能超过 256
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkAudioManager">
            <summary>
            本地音频播放管理器
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAudioManager.CreateInnerAudioContext(StarkSDKSpace.StarkAudioManager.InnerAudioContextOptions)">
            <summary>
            创建 InnerAudioContext
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="F:StarkSDKSpace.StarkAudioManager.InnerAudioContextOptions.src">
            <summary>
            音频资源 url 地址，也支持相对路径的地址。只支持 mp3、wav、m4a、aac 格式。
            如果 url 地址是一个相对路径的地址，比如 Assets/Sound/music.mp3，
            那么会自动根据配置的 url 前缀拼接为完整的url：${url_prefix}/Assets/Sound/music.mp3
            有两种方法设置 url 前缀：
              1. 构建 WebGL 时填写【游戏资源CDN】url 前缀，运行时会自动拼接为完整 url。
              2. 通过调用 StarkAudioManager.SetAudioUrlPrefix 函数设置 url 前缀。
            如果同时填写了【游戏资源CDN】和调用了 StarkAudioManager.SetAudioUrlPrefix 函数，默认优先使用构建时填写的【游戏资源CDN】url前缀。
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkAudioManager.InnerAudioContextOptions.startTime">
            <summary>
            开始播放的位置（单位：s）
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkAudioManager.InnerAudioContextOptions.autoPlay">
            <summary>
            是否自动播放
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkAudioManager.InnerAudioContextOptions.loop">
            <summary>
            是否自动循环
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkAudioManager.InnerAudioContextOptions.volume">
            <summary>
            当前音量，范围 0 ～ 1
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkAudioManager.InnerAudioContextOptions.playbackRate">
            <summary>
            播放速度。范围 0.5 ～ 2.0，默认为 1
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkAudioManager.InnerAudioContextOptions.needDownload">
            <summary>
            是否需要下载，如果为true，则会完全下载后再触发OnCanplay
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkAudioManager.InnerAudioContext">
            <summary>
            音频实例上下文对象，完成对音频播放
            同时支持Android及WebGL平台，但如果是Android下播放mp3文件，Unity引擎需要为Unity2020.1.14f1及以上版本 
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkAudioManager.InnerAudioContext.onCanPlay">
            <summary>
            监听音频进入可以播放状态，但不保证后面可以流畅播放
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkAudioManager.InnerAudioContext.onPlay">
            <summary>
            监听音频播放事件
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkAudioManager.InnerAudioContext.onPause">
            <summary>
            监听音频暂停事件
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkAudioManager.InnerAudioContext.onStop">
            <summary>
            监听音频停止播放事件
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkAudioManager.InnerAudioContext.onEnded">
            监听自然播放结束事件
        </member>
        <member name="F:StarkSDKSpace.StarkAudioManager.InnerAudioContext.onError">
            <summary>
            监听音频播放出错事件,
            (errMsg) => {}
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkAudioManager.InnerAudioContext.onWaiting">
            <summary>
            监听音频加载中事件，当音频因为数据不足，需要停下来加载时会触发
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkAudioManager.InnerAudioContext.onSeeking">
            <summary>
            监听音频开始进行 seek 操作的事件
            </summary>
        </member>
        <member name="F:StarkSDKSpace.StarkAudioManager.InnerAudioContext.onSeeked">
            <summary>
            监听音频完成 seek 操作的事件
            </summary>
        </member>
        <member name="P:StarkSDKSpace.StarkAudioManager.InnerAudioContext.AudioId">
            <summary>
            当前音频ID
            </summary>
        </member>
        <member name="P:StarkSDKSpace.StarkAudioManager.InnerAudioContext.Duration">
            <summary>
            获取音频时长，单位 s
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAudioManager.InnerAudioContext.GetCurrentTime(System.Action{System.Double})">
            <summary>
            获取当前播放时长，单位 s
            （由于WebGL底层实现方案的原因，只能将结果异步返回）
            </summary>
            <param name="callback">(currentTime) => {}</param>
            <example>
            audioContext.GetCurrentTime(value =>
            {
                Debug.Log($"audio currentTime: {value} s");
            });
            </example>
        </member>
        <member name="M:StarkSDKSpace.StarkAudioManager.InnerAudioContext.GetPausedState(System.Action{System.Boolean})">
            <summary>
            获取当前音频是否是暂停状态
            （由于WebGL底层实现方案的原因，只能将结果异步返回）
            </summary>
            <param name="callback">(isPaused) => {}</param>
            <example>
            audioContext.GetBuffered(isPaused =>
            {
                Debug.Log($"audio isPaused: {isPaused}");
            });
            </example>
        </member>
        <member name="M:StarkSDKSpace.StarkAudioManager.InnerAudioContext.GetBuffered(System.Action{System.Double})">
            <summary>
            获取当前已缓冲的音频长度，单位 s
            （由于WebGL底层实现方案的原因，只能将结果异步返回）
            </summary>
            <example>
            audioContext.GetBuffered(buffered =>
            {
                Debug.Log($"audio buffered: {buffered} s");
            });
            </example>
        </member>
        <member name="M:StarkSDKSpace.StarkAudioManager.InnerAudioContext.OnInnerAudioStateChanged(System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            内部方法（请勿调用）
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAudioManager.InnerAudioContext.Play">
            <summary>
            播放音频
            同时支持Android及WebGL平台，但如果是Android下播放mp3文件，Unity引擎需要为Unity2020.1.14f1及以上版本
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAudioManager.InnerAudioContext.Pause">
            <summary>
            暂停播放
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAudioManager.InnerAudioContext.Stop">
            <summary>
            停止播放
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAudioManager.InnerAudioContext.Destroy">
            <summary>
            销毁当前实例。销毁后该实例将不存在，如需播放需要再次创建
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAudioManager.InnerAudioContext.Seek(System.Double)">
            <summary>
            跳转到指定位置播放
            </summary>
            <param name="position"></param>
        </member>
        <member name="P:StarkSDKSpace.StarkAudioManager.InnerAudioContext.Volume">
            <summary>
            音量。范围 0~1。默认为 1
            </summary>
        </member>
        <member name="P:StarkSDKSpace.StarkAudioManager.InnerAudioContext.Mute">
            <summary>
            静音，静音时将音量设置为 0，取消静音则恢复原来的音量
            </summary>
        </member>
        <member name="P:StarkSDKSpace.StarkAudioManager.InnerAudioContext.Loop">
            <summary>
            设置是否循环播放，默认为 false
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkDeviceMotion.StartDeviceMotionListening(StarkSDKSpace.StarkDeviceMotion.Interval,StarkSDKSpace.StarkDeviceMotion.MotionCallback)">
            <summary>
            开始监听设备方向变化
            </summary>
            <param name="interval">"监听设备方向的变化回调函数的执行频率,game 适用于更新游戏的回调频率，在 20ms/次 左右,ui 适用于更新 UI 的回调频率，在 60ms/次 左右,normal 普通的回调频率，在 200ms/次 左右"</param>
            <param name="callback"></param>
        </member>
        <member name="M:StarkSDKSpace.StarkDeviceMotion.StopDeviceMotionListening(StarkSDKSpace.StarkDeviceMotion.MotionCallback)">
            <summary>
            停止监听设备方向变化
            </summary>
            <param name="callback"></param>
        </member>
        <member name="F:StarkSDKSpace.StarkDeviceMotion.OnDeviceMotionChange">
            <summary>
            监听设备方向变化事件
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkAppLifeCycle.OnAppShowEvent">
            <summary>
            游戏切到前台事件
            </summary>
        </member>
        <member name="T:StarkSDKSpace.StarkAppLifeCycle.OnAppHideEvent">
            <summary>
            游戏切到后台事件
            </summary>
        </member>
        <member name="E:StarkSDKSpace.StarkAppLifeCycle.onAppShow">
            <summary>
            监听游戏切到前台
            </summary>
        </member>
        <member name="E:StarkSDKSpace.StarkAppLifeCycle.onAppHide">
            <summary>
            监听游戏切到后台
            </summary>
        </member>
        <member name="E:StarkSDKSpace.StarkAppLifeCycle.OnShow">
            <summary>
            监听游戏切到前台,统一所有平台，并携带参数
            </summary>
        </member>
        <member name="E:StarkSDKSpace.StarkAppLifeCycle.OnHide">
            <summary>
            监听游戏切到后台，统一所有平台
            </summary>
        </member>
        <member name="E:StarkSDKSpace.StarkAppLifeCycle.OnShowWithDict">
            <summary>
            监听游戏到前台，统一所有平台，携带参数的格式为字典，可以根据指定key获取指定数据
            https://bytedance.feishu.cn/docx/NkzOdcUPXo02bdxl6zqcemGinzb
            </summary>
        </member>
        <member name="M:StarkSDKSpace.StarkAppLifeCycle.SetOnBeforeExitAppListener(System.Func{System.Boolean})">
            <summary>
            监听游戏退出
            </summary>
            <param name="onBeforeExitApp">返回值为true，则表示由开发者自行处理退出逻辑，可以调用StarkSDK.API.ExitApp来手动退出游戏。返回值为false，则默认退出游戏。</param>
        </member>
        <member name="P:bytedance.ttrec.ByteRecImpl.SamplingIntervalMs">
            <summary>
            声音采样间隔，单位毫秒
            </summary>
        </member>
        <member name="P:bytedance.ttrec.ByteRecImpl.NeedConvertToByteArray">
            <summary>
            是否需要将PCM从float数组转为byte数组
            </summary>
        </member>
        <member name="P:bytedance.ttrec.ByteRecImpl.Recording">
            <summary>
            是否在录制中
            </summary>
        </member>
        <member name="M:bytedance.ttrec.ByteRecImpl.NativeStopRecord">
            <summary>
            提供给Java端通过UnityPlayer.UnitySendMessage("ByteREC","NativeStopRecord","");来停止录屏
            </summary>
        </member>
        <member name="M:bytedance.ttrec.ByteRecImpl.NativeStartRecord">
            <summary>
            提供给Java端通过UnityPlayer.UnitySendMessage("ByteREC","NativeStartRecord","");来启动录屏
            </summary>
        </member>
        <member name="M:bytedance.ttrec.ByteRecImpl.StartRecord(System.String)">
            <summary>
            提供给Java端通过UnityPlayer.UnitySendMessage("ByteREC","StartRecord","");来触发录制
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:bytedance.ttrec.ByteRecImpl.NativeRecordVoice(System.String)">
            <summary>
            提供给Java端通过UnityPlayer.UnitySendMessage("ByteREC","NativeRecordVoice","");来设置是否录音
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:bytedance.ttrec.ByteRecImpl.NativeSetUnityConvertPCM(System.String)">
            <summary>
            设置是否在Unity测转换PCM
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bytedance.ttrec.ByteRecImpl.SetRecordRT(UnityEngine.RenderTexture)">
            <summary>
            支持外部注入RT进行录制
            </summary>
        </member>
        <member name="T:bytedance.ttrec.ByteRECAudioMgr">
            <summary>
            Unity层使用的接口
            </summary>
        </member>
        <member name="M:bytedance.ttrec.ByteRECAudioMgr.CheckUnityEditorListeners">
            检查是否有多个ActiveAndEnable AudioListener
        </member>
        <member name="T:bytedance.ttrec.ByteUnityAudioSample">
            <summary>
            Unity声音录制
            </summary>
        </member>
        <member name="M:bytedance.ttrec.ByteUnityAudioSample.PutArrayToList(System.Single[],System.Collections.Generic.List{System.Single})">
            将数组添加到List里。
        </member>
        <member name="T:bytedance.ttrec.ByteREC">
            <summary>
            Unity层使用的接口
            </summary>
        </member>
        <member name="M:bytedance.ttrec.ByteREC.StartRecord">
            <summary>
            开始录屏
            </summary>
        </member>
        <member name="M:bytedance.ttrec.ByteREC.StopRecord">
            <summary>
            停止录屏
            </summary>
        </member>
        <member name="M:bytedance.ttrec.ByteREC.EnableVoice">
            <summary>
            开启录制游戏声音
            </summary>
        </member>
        <member name="M:bytedance.ttrec.ByteREC.DisableVoice">
            <summary>
            关闭录制游戏声音
            </summary>
        </member>
        <member name="M:bytedance.ttrec.ByteREC.SetResolution(System.Int32)">
            <summary>
            设置录制分辨率
            </summary>
        </member>
        <member name="T:bytedance.ttrec.ByteRECJNI">
            <summary>
            Unity层使用的接口
            </summary>
        </member>
        <member name="F:bytedance.ttrec.ByteRECJNI.VERSION">
            <summary>
            Unity版本号，每对外升级一次，自增1，详情见
            </summary>
        </member>
        <member name="M:bytedance.ttrec.ByteRECJNI.UnityRenderEventPtr">
            <summary>
            UnityRenderEvent的回调的指针，可以通过
            </summary>
            <returns></returns>
        </member>
        <member name="M:bytedance.ttrec.ByteRECJNI.RecordBitmap(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            录制图片
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="data"></param>
            <param name="size"></param>
        </member>
        <member name="M:bytedance.ttrec.ByteRECJNI.RecordTexture(System.Int32)">
            <summary>
            录制纹理
            </summary>
            <param name="textureId"></param>
        </member>
        <member name="M:bytedance.ttrec.ByteRECJNI.SendApplicationPauseStatus(System.Boolean,System.Int64)">
            <summary>
            传递Unity前后台切换消息
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:bytedance.ttrec.ByteRECJNI.RecordVoice(System.Int32,System.Single[],System.Int32)">
            <summary>
            录音,传递PCM的float数组
            </summary>
            <param name="channel"></param>
            <param name="pcm"></param>
            <param name="length"></param>
        </member>
        <member name="M:bytedance.ttrec.ByteRECJNI.RecordVoiceByte(System.Int32,System.Byte[],System.Int32)">
            <summary>
            录音，传递PCM的byte数组
            </summary>
            <param name="channels"></param>
            <param name="pcm"></param>
            <param name="length"></param>
        </member>
        <member name="M:bytedance.ttrec.ByteRECJNI.RecordVoiceConfig(System.String)">
            <summary>
            传递录音的配置参数，JSON格式
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:bytedance.ttrec.ByteRECJNI.JNIDeAttachCurrentThread">
            <summary>
            通知JNI DeAttach 当前线程，不然会引起crash
            </summary>
        </member>
        <member name="M:bytedance.ttrec.ByteRECJNI.SendAudioTypeToNative(System.Int32)">
            <summary>
            设置使用的音频引擎类型：0-unity，1-wwise plugin, 2-wwise mix
            </summary>
        </member>
        <member name="M:bytedance.ttrec.ByteRECJNI.StartRecord(System.String)">
            <summary>
            开始录屏
            </summary>
        </member>
        <member name="M:bytedance.ttrec.ByteRECJNI.StopRecord">
            <summary>
            停止录屏
            </summary>
        </member>
        <member name="M:bytedance.ttrec.ByteRECJNI.EnableVoice">
            <summary>
            开启录制游戏声音
            </summary>
        </member>
        <member name="M:bytedance.ttrec.ByteRECJNI.DisableVoice">
            <summary>
            关闭录制游戏声音
            </summary>
        </member>
        <member name="T:bytedance.ttrec.ByteRECAudioSample">
            <summary>
            Unity声音录制接口
            </summary>
        </member>
        <member name="T:bytedance.ttrec.ByteAudioRec">
            <summary>
            Unity声音录制
            </summary>
        </member>
        <member name="T:UNBridge">
            <summary>
            封装了和Native通讯的接口。
            </summary>
        </member>
        <member name="M:UNBridge.InitBridge">
            <summary>
            初始化Bridge
            </summary>
        </member>
        <member name="M:UNBridge.setCallBackTimeout(System.Int64)">
            <summary>
            重新设置Call的超时时间，单位毫秒
            </summary>
            <param name="time">单位ms</param>
        </member>
        <member name="M:UNBridge.RegisterAPI(System.String,TTSDK.UNBridgeLib.IBridgeAPI)">
            <summary>
            Unity注册API,以接口的形式
            </summary>
            <param name="name">接口名</param>
            <param name="api">接口的实现</param>
        </member>
        <member name="M:UNBridge.RegisterAPI(System.String,TTSDK.UNBridgeLib.BridgeAPI)">
            <summary>
            Unity注册API，以委托的形式提供
            </summary>
            <param name="name"></param>
            <param name="api"></param>
        </member>
        <member name="M:UNBridge.UnRegisterAPI(System.String)">
            <summary>
            Unity注册API,以接口的形式
            </summary>
            <param name="name">接口名</param>
            <param name="api">接口的实现</param>
        </member>
        <member name="M:UNBridge.RegisterEvent(System.String)">
            <summary>
            Unity注册事件
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:UNBridge.SendEvent(System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
             Unity发送事件消息
            </summary>
            <param name="target"></param>
            <param name="data"></param>
        </member>
        <member name="M:UNBridge.Call(System.String)">
            <summary>
            异步调用native的方法，不需要回调和参数
            </summary>
            <param name="target">目标接口</param>
            
        </member>
        <member name="M:UNBridge.Call(System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            异步调用native的方法，不需要回调
            </summary>
            <param name="target">目标接口</param>
            <param name="param">参数数据</param> 
            
        </member>
        <member name="M:UNBridge.Call(System.String,TTSDK.UNBridgeLib.LitJson.JsonData,TTSDK.UNBridgeLib.BridgeCallBack)">
            <summary>
            异步调用native的方法
            </summary>
            <param name="target">目标接口</param>
            <param name="param">参数数据</param>
            <param name="callback">回调</param>
            
        </member>
        <member name="M:UNBridge.Call(System.String,TTSDK.UNBridgeLib.LitJson.JsonData,TTSDK.UNBridgeLib.BridgeCallBack,System.Int64)">
            <summary>
            异步调用native的方法
            </summary>
            <param name="target">目标接口</param>
            <param name="param">参数数据</param>
            <param name="callback">回调</param>
            <param name="timeout">超时，默认10秒，单位毫秒</param>
            
        </member>
        <member name="M:UNBridge.MixCall(System.String)">
            <summary>
            混合Call，函数可以带回一段string数据
            </summary>
            <param name="target">目标API</param>
            <returns></returns>
        </member>
        <member name="M:UNBridge.MixCall(System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            混合Call，函数可以带回一段string数据
            </summary>
            <param name="target">目标API</param>
            <param name="param">参数</param>
            <returns></returns>
        </member>
        <member name="M:UNBridge.MixCall(System.String,TTSDK.UNBridgeLib.LitJson.JsonData,TTSDK.UNBridgeLib.BridgeCallBack)">
            <summary>
            混合Call，函数可以带回一段string数据，同时有回调
            </summary>
            <param name="target">目标API</param>
            <param name="param">参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:UNBridge.MixCall(System.String,TTSDK.UNBridgeLib.LitJson.JsonData,TTSDK.UNBridgeLib.BridgeCallBack,System.Int64)">
            <summary>
            混合Call，函数可以带回一段string数据，同时有回调
            </summary>
            <param name="target">目标API</param>
            <param name="param">参数</param>
            <param name="callback">回调</param>
            <param name="timeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:UNBridge.CallSync(System.String,TTSDK.UNBridgeLib.LitJson.JsonData)">
            <summary>
            同步调用native的方法
            </summary>
            <param name="target">目标接口</param>
            <param name="param">参数数据</param> 
            
        </member>
        <member name="M:UNBridge.Listen(System.String,TTSDK.UNBridgeLib.BridgeCallBack)">
            <summary>
            监听事件
            </summary>
            <param name="target">目标接口</param>
            <param name="callBack">回调</param> 
            
        </member>
        <member name="M:UNBridge.Listen(System.String,System.Boolean,TTSDK.UNBridgeLib.BridgeCallBack)">
            <summary>
            监听事件
            </summary>
            <param name="target">目标接口</param>
            <param name="overOld">新的监听是否覆盖旧的</param>
            <param name="callBack">回调</param> 
            
        </member>
        <member name="M:UNBridge.UnListen(System.String)">
            <summary>
            关闭监听事件
            </summary>
            
            <param name="target">目标接口</param>
            
        </member>
        <member name="M:UNBridge.HasNativeAPI(System.String)">
            <summary>
            查询Native层是否支持某个API
            </summary>
            <param name="apiName"></param>
            <returns></returns>
        </member>
        <member name="M:UNBridge.HandleMsgFromNative(System.String)">
            <summary>
            处理Native调用过来的消息，通讯接口
            </summary>
            <param name="msg">消息数据，JSON格式</param>
        </member>
        <member name="T:PlayerPrefs">
            <summary>
              <para>`PlayerPrefs` is a class that stores Player preferences between game sessions. It can store string, float and integer values into the user’s platform registry.</para>
            </summary>
        </member>
        <member name="M:PlayerPrefs.SetInt(System.String,System.Int32)">
            <summary>
              <para>Sets a single integer value for the preference identified by the given key. You can use PlayerPrefs.GetInt to retrieve this value.</para>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:PlayerPrefs.GetInt(System.String,System.Int32)">
            <summary>
              <para>Returns the value corresponding to key in the preference file if it exists.</para>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:PlayerPrefs.SetFloat(System.String,System.Single)">
            <summary>
              <para>Sets the float value of the preference identified by the given key. You can use PlayerPrefs.GetFloat to retrieve this value.</para>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:PlayerPrefs.GetFloat(System.String,System.Single)">
            <summary>
              <para>Returns the value corresponding to key in the preference file if it exists.</para>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:PlayerPrefs.SetString(System.String,System.String)">
            <summary>
              <para>Sets a single string value for the preference identified by the given key. You can use PlayerPrefs.GetString to retrieve this value.</para>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:PlayerPrefs.GetString(System.String,System.String)">
            <summary>
              <para>Returns the value corresponding to key in the preference file if it exists.</para>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:PlayerPrefs.HasKey(System.String)">
            <summary>
              <para>Returns true if the given key exists in PlayerPrefs, otherwise returns false.</para>
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:PlayerPrefs.DeleteKey(System.String)">
            <summary>
              <para>Removes the given key from the PlayerPrefs. If the key does not exist, DeleteKey has no impact.</para>
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:PlayerPrefs.DeleteAll">
            <summary>
              <para>Removes all keys and values from the preferences. Use with caution.</para>
            </summary>
        </member>
        <member name="M:PlayerPrefs.Save">
            <summary>
              <para>Writes all modified preferences to disk.</para>
            </summary>
        </member>
    </members>
</doc>
